
dalecomir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000798  08003b48  08003b48  00013b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042e0  080042e0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080042e0  080042e0  000142e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042e8  080042e8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042e8  080042e8  000142e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042ec  080042ec  000142ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080042f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  2000005c  0800434c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  0800434c  000204a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f0d9  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002930  00000000  00000000  0002f1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb8  00000000  00000000  00031ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b3c  00000000  00000000  00032990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017881  00000000  00000000  000334cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010893  00000000  00000000  0004ad4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f593  00000000  00000000  0005b5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041b8  00000000  00000000  000eab74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000eed2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003b30 	.word	0x08003b30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003b30 	.word	0x08003b30

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000592:	2300      	movs	r3, #0
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	4b4c      	ldr	r3, [pc, #304]	; (80006c8 <MX_GPIO_Init+0x14c>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	4a4b      	ldr	r2, [pc, #300]	; (80006c8 <MX_GPIO_Init+0x14c>)
 800059c:	f043 0304 	orr.w	r3, r3, #4
 80005a0:	6313      	str	r3, [r2, #48]	; 0x30
 80005a2:	4b49      	ldr	r3, [pc, #292]	; (80006c8 <MX_GPIO_Init+0x14c>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	f003 0304 	and.w	r3, r3, #4
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	4b45      	ldr	r3, [pc, #276]	; (80006c8 <MX_GPIO_Init+0x14c>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a44      	ldr	r2, [pc, #272]	; (80006c8 <MX_GPIO_Init+0x14c>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b42      	ldr	r3, [pc, #264]	; (80006c8 <MX_GPIO_Init+0x14c>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	4b3e      	ldr	r3, [pc, #248]	; (80006c8 <MX_GPIO_Init+0x14c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a3d      	ldr	r2, [pc, #244]	; (80006c8 <MX_GPIO_Init+0x14c>)
 80005d4:	f043 0301 	orr.w	r3, r3, #1
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b3b      	ldr	r3, [pc, #236]	; (80006c8 <MX_GPIO_Init+0x14c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	4b37      	ldr	r3, [pc, #220]	; (80006c8 <MX_GPIO_Init+0x14c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a36      	ldr	r2, [pc, #216]	; (80006c8 <MX_GPIO_Init+0x14c>)
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b34      	ldr	r3, [pc, #208]	; (80006c8 <MX_GPIO_Init+0x14c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0302 	and.w	r3, r3, #2
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	4b30      	ldr	r3, [pc, #192]	; (80006c8 <MX_GPIO_Init+0x14c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a2f      	ldr	r2, [pc, #188]	; (80006c8 <MX_GPIO_Init+0x14c>)
 800060c:	f043 0308 	orr.w	r3, r3, #8
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b2d      	ldr	r3, [pc, #180]	; (80006c8 <MX_GPIO_Init+0x14c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0308 	and.w	r3, r3, #8
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD1_RST_Pin|LCD1_CS_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	2130      	movs	r1, #48	; 0x30
 8000622:	482a      	ldr	r0, [pc, #168]	; (80006cc <MX_GPIO_Init+0x150>)
 8000624:	f001 fb0c 	bl	8001c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD1_DC_GPIO_Port, LCD1_DC_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2101      	movs	r1, #1
 800062c:	4828      	ldr	r0, [pc, #160]	; (80006d0 <MX_GPIO_Init+0x154>)
 800062e:	f001 fb07 	bl	8001c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000638:	4826      	ldr	r0, [pc, #152]	; (80006d4 <MX_GPIO_Init+0x158>)
 800063a:	f001 fb01 	bl	8001c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD1_RST_Pin|LCD1_CS_Pin;
 800063e:	2330      	movs	r3, #48	; 0x30
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	481d      	ldr	r0, [pc, #116]	; (80006cc <MX_GPIO_Init+0x150>)
 8000656:	f001 f96f 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD1_DC_Pin;
 800065a:	2301      	movs	r3, #1
 800065c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065e:	2301      	movs	r3, #1
 8000660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD1_DC_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4817      	ldr	r0, [pc, #92]	; (80006d0 <MX_GPIO_Init+0x154>)
 8000672:	f001 f961 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8000676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4619      	mov	r1, r3
 800068e:	4811      	ldr	r0, [pc, #68]	; (80006d4 <MX_GPIO_Init+0x158>)
 8000690:	f001 f952 	bl	8001938 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ECHOI_Pin;
 8000694:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800069a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ECHOI_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	480a      	ldr	r0, [pc, #40]	; (80006d4 <MX_GPIO_Init+0x158>)
 80006ac:	f001 f944 	bl	8001938 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2100      	movs	r1, #0
 80006b4:	2028      	movs	r0, #40	; 0x28
 80006b6:	f001 f8e6 	bl	8001886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006ba:	2028      	movs	r0, #40	; 0x28
 80006bc:	f001 f8ff 	bl	80018be <HAL_NVIC_EnableIRQ>

}
 80006c0:	bf00      	nop
 80006c2:	3728      	adds	r7, #40	; 0x28
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020800 	.word	0x40020800
 80006d0:	40020400 	.word	0x40020400
 80006d4:	40020c00 	.word	0x40020c00

080006d8 <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fbad 	bl	8000e42 <LCD5110_refresh_ll>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <LCD5110_set_cursor>:
void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);

// Regarding inline -- C also lcd5110.c.
inline void LCD5110_set_cursor(int x, int y, LCD5110_display* lcd_conf)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
	LCD5110_wset_cursor(x, y, &lcd_conf->def_scr, lcd_conf);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	68b9      	ldr	r1, [r7, #8]
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f000 f880 	bl	800080c <LCD5110_wset_cursor>
}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <LCD5110_clear_scr>:
inline point_t LCD5110_get_cursor(LCD5110_display* lcd_conf)
{
	return LCD5110_wget_cursor(&lcd_conf->def_scr, lcd_conf);
}

inline void LCD5110_clear_scr(LCD5110_display* lcd_conf){
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	LCD5110_clrscr(&lcd_conf->hw_conf);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f936 	bl	8000990 <LCD5110_clrscr>
	LCD5110_set_cursor(0, 0, lcd_conf);
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	2100      	movs	r1, #0
 8000728:	2000      	movs	r0, #0
 800072a:	f7ff ffe1 	bl	80006f0 <LCD5110_set_cursor>
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <LCD5110_print>:

void LCD5110_wprint(const char* str, int color,
						LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
int LCD5110_wprintf( LCD5110_display* lcd_conf, int color, LCD5110_canvas_t* win, char *fmt, ...);

inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 8000736:	b580      	push	{r7, lr}
 8000738:	b084      	sub	sp, #16
 800073a:	af00      	add	r7, sp, #0
 800073c:	60f8      	str	r0, [r7, #12]
 800073e:	60b9      	str	r1, [r7, #8]
 8000740:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	68b9      	ldr	r1, [r7, #8]
 800074c:	68f8      	ldr	r0, [r7, #12]
 800074e:	f000 f893 	bl	8000878 <LCD5110_wprint>
}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <LCD5110_wputchar>:
	LCD5110_drawBitmap(px, py, fontpointer + ch * base_font_width,
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}

void LCD5110_wputchar(int px, int py, char ch, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 800075c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800075e:	b08b      	sub	sp, #44	; 0x2c
 8000760:	af04      	add	r7, sp, #16
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	4613      	mov	r3, r2
 800076a:	71fb      	strb	r3, [r7, #7]
	if (win->cursor.y < 0 || win->cursor.x < 0)
 800076c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800076e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000772:	2b00      	cmp	r3, #0
 8000774:	db41      	blt.n	80007fa <LCD5110_wputchar+0x9e>
 8000776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000778:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800077c:	2b00      	cmp	r3, #0
 800077e:	db3c      	blt.n	80007fa <LCD5110_wputchar+0x9e>
		return;
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8000780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000782:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000786:	461a      	mov	r2, r3
 8000788:	2306      	movs	r3, #6
 800078a:	4413      	add	r3, r2
 800078c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800078e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000792:	4293      	cmp	r3, r2
 8000794:	d833      	bhi.n	80007fe <LCD5110_wputchar+0xa2>
		 win->cursor.y + base_font_height > win->frame.height )
 8000796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000798:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800079c:	461a      	mov	r2, r3
 800079e:	2308      	movs	r3, #8
 80007a0:	4413      	add	r3, r2
 80007a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007a4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	if ( win->cursor.x + base_font_width > win->frame.width ||
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d828      	bhi.n	80007fe <LCD5110_wputchar+0xa2>
		return;
//! TODO: Print part of char
	const unsigned char *fontpointer = base_font;
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <LCD5110_wputchar+0xac>)
 80007ae:	617b      	str	r3, [r7, #20]
	LCD5110_drawBitmap(px + win->frame.x0, py + win->frame.y0, fontpointer + ch * base_font_width,
 80007b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007b6:	461a      	mov	r2, r3
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	18d0      	adds	r0, r2, r3
 80007bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007c2:	461a      	mov	r2, r3
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	18d1      	adds	r1, r2, r3
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	2206      	movs	r2, #6
 80007cc:	fb02 f303 	mul.w	r3, r2, r3
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	441a      	add	r2, r3
 80007d4:	2306      	movs	r3, #6
 80007d6:	461e      	mov	r6, r3
 80007d8:	2308      	movs	r3, #8
 80007da:	461c      	mov	r4, r3
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf0c      	ite	eq
 80007e2:	2301      	moveq	r3, #1
 80007e4:	2300      	movne	r3, #0
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	461d      	mov	r5, r3
 80007ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ec:	9302      	str	r3, [sp, #8]
 80007ee:	9501      	str	r5, [sp, #4]
 80007f0:	9400      	str	r4, [sp, #0]
 80007f2:	4633      	mov	r3, r6
 80007f4:	f000 f927 	bl	8000a46 <LCD5110_drawBitmap>
 80007f8:	e002      	b.n	8000800 <LCD5110_wputchar+0xa4>
		return;
 80007fa:	bf00      	nop
 80007fc:	e000      	b.n	8000800 <LCD5110_wputchar+0xa4>
		return;
 80007fe:	bf00      	nop
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}
 8000800:	371c      	adds	r7, #28
 8000802:	46bd      	mov	sp, r7
 8000804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000806:	bf00      	nop
 8000808:	08003b8c 	.word	0x08003b8c

0800080c <LCD5110_wset_cursor>:
	LCD5110_wclear_str(x, y, len, color, &lcd_conf->def_scr, lcd_conf);
}


void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	603b      	str	r3, [r7, #0]
	win->cursor.x = x;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	b21a      	sxth	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	811a      	strh	r2, [r3, #8]
	win->cursor.y = y;
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	b21a      	sxth	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	815a      	strh	r2, [r3, #10]
}
 800082a:	bf00      	nop
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <LCD5110_wendl>:

point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf){
	return win->cursor;
}

void LCD5110_wendl(LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	6039      	str	r1, [r7, #0]
	win->cursor.y += base_font_height + 1;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000846:	b29a      	uxth	r2, r3
 8000848:	2308      	movs	r3, #8
 800084a:	b29b      	uxth	r3, r3
 800084c:	4413      	add	r3, r2
 800084e:	b29b      	uxth	r3, r3
 8000850:	3301      	adds	r3, #1
 8000852:	b29b      	uxth	r3, r3
 8000854:	b21a      	sxth	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	815a      	strh	r2, [r3, #10]
	win->cursor.x = 2;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2202      	movs	r2, #2
 800085e:	811a      	strh	r2, [r3, #8]
	if (win->refresh_on_endl)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	7b1b      	ldrb	r3, [r3, #12]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d002      	beq.n	800086e <LCD5110_wendl+0x38>
		LCD5110_refresh(lcd_conf);
 8000868:	6838      	ldr	r0, [r7, #0]
 800086a:	f7ff ff35 	bl	80006d8 <LCD5110_refresh>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <LCD5110_wprint>:



void LCD5110_wprint(const char* str, int color, LCD5110_canvas_t* win,
		LCD5110_display* lcd_conf) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af02      	add	r7, sp, #8
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	60b9      	str	r1, [r7, #8]
 8000882:	607a      	str	r2, [r7, #4]
 8000884:	603b      	str	r3, [r7, #0]
	while (*str != 0) {
 8000886:	e053      	b.n	8000930 <LCD5110_wprint+0xb8>
		if (*str != '\n') {
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b0a      	cmp	r3, #10
 800088e:	d010      	beq.n	80008b2 <LCD5110_wprint+0x3a>
			LCD5110_wputchar(win->cursor.x, win->cursor.y, *str, color, win, lcd_conf);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000896:	4618      	mov	r0, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800089e:	4619      	mov	r1, r3
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	781a      	ldrb	r2, [r3, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	9301      	str	r3, [sp, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	f7ff ff55 	bl	800075c <LCD5110_wputchar>
		}
		win->cursor.x += base_font_width;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	2306      	movs	r3, #6
 80008bc:	b29b      	uxth	r3, r3
 80008be:	4413      	add	r3, r2
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	811a      	strh	r2, [r3, #8]

		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80008ce:	461a      	mov	r2, r3
 80008d0:	2306      	movs	r3, #6
 80008d2:	4413      	add	r3, r2
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80008da:	4293      	cmp	r3, r2
 80008dc:	d904      	bls.n	80008e8 <LCD5110_wprint+0x70>
				*(str + 1) != '\n') || *str == '\n')
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	3301      	adds	r3, #1
 80008e2:	781b      	ldrb	r3, [r3, #0]
		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 80008e4:	2b0a      	cmp	r3, #10
 80008e6:	d103      	bne.n	80008f0 <LCD5110_wprint+0x78>
				*(str + 1) != '\n') || *str == '\n')
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b0a      	cmp	r3, #10
 80008ee:	d111      	bne.n	8000914 <LCD5110_wprint+0x9c>
		{
			LCD5110_wendl(win, lcd_conf);
 80008f0:	6839      	ldr	r1, [r7, #0]
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff ff9f 	bl	8000836 <LCD5110_wendl>
			if( isspace(*(str + 1)) )
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	3301      	adds	r3, #1
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	3301      	adds	r3, #1
 8000900:	4a10      	ldr	r2, [pc, #64]	; (8000944 <LCD5110_wprint+0xcc>)
 8000902:	4413      	add	r3, r2
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	f003 0308 	and.w	r3, r3, #8
 800090a:	2b00      	cmp	r3, #0
 800090c:	d002      	beq.n	8000914 <LCD5110_wprint+0x9c>
				++str;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	3301      	adds	r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
		}
		if (win->cursor.y + base_font_height > win->frame.height)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800091a:	461a      	mov	r2, r3
 800091c:	2308      	movs	r3, #8
 800091e:	4413      	add	r3, r2
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000926:	4293      	cmp	r3, r2
 8000928:	d807      	bhi.n	800093a <LCD5110_wprint+0xc2>
			break;
		str++;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	3301      	adds	r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
	while (*str != 0) {
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1a7      	bne.n	8000888 <LCD5110_wprint+0x10>

	}
}
 8000938:	e000      	b.n	800093c <LCD5110_wprint+0xc4>
			break;
 800093a:	bf00      	nop
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	080041ac 	.word	0x080041ac

08000948 <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 8000948:	b480      	push	{r7}
 800094a:	b087      	sub	sp, #28
 800094c:	af00      	add	r7, sp, #0
 800094e:	60f8      	str	r0, [r7, #12]
 8000950:	60b9      	str	r1, [r7, #8]
 8000952:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	10db      	asrs	r3, r3, #3
 8000958:	2254      	movs	r2, #84	; 0x54
 800095a:	fb03 f202 	mul.w	r2, r3, r2
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	4413      	add	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	2201      	movs	r2, #1
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	b2db      	uxtb	r3, r3
 8000972:	753b      	strb	r3, [r7, #20]

	return res;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	461a      	mov	r2, r3
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000980:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8000984:	68f8      	ldr	r0, [r7, #12]
 8000986:	371c      	adds	r7, #28
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <LCD5110_clrscr>:

void LCD5110_clrscr(LCD5110_conf* lcd_conf) {
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	e008      	b.n	80009b0 <LCD5110_clrscr+0x20>
		lcd_conf->video_buffer[i] = 0;
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4413      	add	r3, r2
 80009a4:	331c      	adds	r3, #28
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	3301      	adds	r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80009b6:	dbf2      	blt.n	800099e <LCD5110_clrscr+0xe>
	}
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b086      	sub	sp, #24
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	db31      	blt.n	8000a3e <LCD5110_putpix+0x78>
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	db2e      	blt.n	8000a3e <LCD5110_putpix+0x78>
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2b53      	cmp	r3, #83	; 0x53
 80009e4:	dc2b      	bgt.n	8000a3e <LCD5110_putpix+0x78>
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	2b2f      	cmp	r3, #47	; 0x2f
 80009ea:	dc28      	bgt.n	8000a3e <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	68ba      	ldr	r2, [r7, #8]
 80009f2:	68f9      	ldr	r1, [r7, #12]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ffa7 	bl	8000948 <xy_to_pix>

	if (color)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d00c      	beq.n	8000a1a <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	683a      	ldr	r2, [r7, #0]
 8000a04:	4413      	add	r3, r2
 8000a06:	7f19      	ldrb	r1, [r3, #28]
 8000a08:	7d3a      	ldrb	r2, [r7, #20]
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	b2d1      	uxtb	r1, r2
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	460a      	mov	r2, r1
 8000a16:	771a      	strb	r2, [r3, #28]
 8000a18:	e012      	b.n	8000a40 <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	7f1b      	ldrb	r3, [r3, #28]
 8000a22:	b25a      	sxtb	r2, r3
 8000a24:	7d3b      	ldrb	r3, [r7, #20]
 8000a26:	b25b      	sxtb	r3, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	b25b      	sxtb	r3, r3
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	b25a      	sxtb	r2, r3
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	b2d1      	uxtb	r1, r2
 8000a34:	683a      	ldr	r2, [r7, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	460a      	mov	r2, r1
 8000a3a:	771a      	strb	r2, [r3, #28]
 8000a3c:	e000      	b.n	8000a40 <LCD5110_putpix+0x7a>
		return;
 8000a3e:	bf00      	nop
}
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <LCD5110_drawBitmap>:
}

//! TODO: optimize! Slow!
//! TODO: add different bitmap modes -- OR/AND/XOR
void LCD5110_drawBitmap(int x, int y, const unsigned char* bitmap, int cols, int rows, int invert, LCD5110_conf* lcd_conf)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b088      	sub	sp, #32
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	60f8      	str	r0, [r7, #12]
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	603b      	str	r3, [r7, #0]
	for(int cx=0; cx<cols; cx++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
 8000a58:	e03d      	b.n	8000ad6 <LCD5110_drawBitmap+0x90>
	{
		for (int cy=0; cy<rows; cy++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
 8000a5e:	e033      	b.n	8000ac8 <LCD5110_drawBitmap+0x82>
		{
			unsigned char temp = bitmap[(cy/8)*cols + cx];
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	da00      	bge.n	8000a68 <LCD5110_drawBitmap+0x22>
 8000a66:	3307      	adds	r3, #7
 8000a68:	10db      	asrs	r3, r3, #3
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	fb03 f202 	mul.w	r2, r3, r2
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	4413      	add	r3, r2
 8000a76:	461a      	mov	r2, r3
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	75fb      	strb	r3, [r7, #23]
			temp &= 1<<(cy%8);
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	2201      	movs	r2, #1
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	b25a      	sxtb	r2, r3
 8000a8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a92:	4013      	ands	r3, r2
 8000a94:	b25b      	sxtb	r3, r3
 8000a96:	75fb      	strb	r3, [r7, #23]
			LCD5110_putpix(x+cx, y+cy,  invert ? !temp : temp, lcd_conf);
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	18d0      	adds	r0, r2, r3
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	18d1      	adds	r1, r2, r3
 8000aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d007      	beq.n	8000aba <LCD5110_drawBitmap+0x74>
 8000aaa:	7dfb      	ldrb	r3, [r7, #23]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	bf0c      	ite	eq
 8000ab0:	2301      	moveq	r3, #1
 8000ab2:	2300      	movne	r3, #0
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	e000      	b.n	8000abc <LCD5110_drawBitmap+0x76>
 8000aba:	7dfa      	ldrb	r2, [r7, #23]
 8000abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000abe:	f7ff ff82 	bl	80009c6 <LCD5110_putpix>
		for (int cy=0; cy<rows; cy++)
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	61bb      	str	r3, [r7, #24]
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000acc:	429a      	cmp	r2, r3
 8000ace:	dbc7      	blt.n	8000a60 <LCD5110_drawBitmap+0x1a>
	for(int cx=0; cx<cols; cx++)
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	61fb      	str	r3, [r7, #28]
 8000ad6:	69fa      	ldr	r2, [r7, #28]
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	dbbd      	blt.n	8000a5a <LCD5110_drawBitmap+0x14>
		}
	}
}
 8000ade:	bf00      	nop
 8000ae0:	bf00      	nop
 8000ae2:	3720      	adds	r7, #32
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <send_byte_to_LCD5110>:
#include <stdio.h>

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	6818      	ldr	r0, [r3, #0]
 8000af8:	1df9      	adds	r1, r7, #7
 8000afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afe:	2201      	movs	r2, #1
 8000b00:	f001 fdbd 	bl	800267e <HAL_SPI_Transmit>
 8000b04:	4603      	mov	r3, r0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b084      	sub	sp, #16
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	460b      	mov	r3, r1
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6818      	ldr	r0, [r3, #0]
 8000b20:	897a      	ldrh	r2, [r7, #10]
 8000b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b26:	68f9      	ldr	r1, [r7, #12]
 8000b28:	f001 fda9 	bl	800267e <HAL_SPI_Transmit>
 8000b2c:	4603      	mov	r3, r0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6898      	ldr	r0, [r3, #8]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	889b      	ldrh	r3, [r3, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f001 f879 	bl	8001c40 <HAL_GPIO_WritePin>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b082      	sub	sp, #8
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6998      	ldr	r0, [r3, #24]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	8a9b      	ldrh	r3, [r3, #20]
 8000b66:	2201      	movs	r2, #1
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f001 f869 	bl	8001c40 <HAL_GPIO_WritePin>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6998      	ldr	r0, [r3, #24]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	8a9b      	ldrh	r3, [r3, #20]
 8000b86:	2200      	movs	r2, #0
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f001 f859 	bl	8001c40 <HAL_GPIO_WritePin>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6918      	ldr	r0, [r3, #16]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	899b      	ldrh	r3, [r3, #12]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f001 f849 	bl	8001c40 <HAL_GPIO_WritePin>
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6918      	ldr	r0, [r3, #16]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	899b      	ldrh	r3, [r3, #12]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f001 f839 	bl	8001c40 <HAL_GPIO_WritePin>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	6039      	str	r1, [r7, #0]
 8000be0:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f023 0320 	bic.w	r3, r3, #32
 8000be8:	2b07      	cmp	r3, #7
 8000bea:	dd01      	ble.n	8000bf0 <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 8000bec:	2301      	movs	r3, #1
 8000bee:	e008      	b.n	8000c02 <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f043 0320 	orr.w	r3, r3, #32
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	6839      	ldr	r1, [r7, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ff74 	bl	8000ae8 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	6039      	str	r1, [r7, #0]
 8000c14:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	f023 030d 	bic.w	r3, r3, #13
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 8000c20:	2302      	movs	r3, #2
 8000c22:	e005      	b.n	8000c30 <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	6839      	ldr	r1, [r7, #0]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff5d 	bl	8000ae8 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	da01      	bge.n	8000c50 <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	e008      	b.n	8000c62 <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	6839      	ldr	r1, [r7, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff44 	bl	8000ae8 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	6039      	str	r1, [r7, #0]
 8000c74:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	d901      	bls.n	8000c80 <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 8000c7c:	2304      	movs	r3, #4
 8000c7e:	e008      	b.n	8000c92 <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	6839      	ldr	r1, [r7, #0]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff2c 	bl	8000ae8 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	6039      	str	r1, [r7, #0]
 8000ca4:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2b07      	cmp	r3, #7
 8000caa:	d901      	bls.n	8000cb0 <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 8000cac:	2305      	movs	r3, #5
 8000cae:	e008      	b.n	8000cc2 <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	f043 0310 	orr.w	r3, r3, #16
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	6839      	ldr	r1, [r7, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f7ff ff14 	bl	8000ae8 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	6039      	str	r1, [r7, #0]
 8000cd4:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 8000cd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db03      	blt.n	8000ce6 <LCD5110_set_X_base+0x1c>
 8000cde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ce2:	2b53      	cmp	r3, #83	; 0x53
 8000ce4:	dd01      	ble.n	8000cea <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 8000ce6:	2307      	movs	r3, #7
 8000ce8:	e00a      	b.n	8000d00 <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	b25b      	sxtb	r3, r3
 8000cee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cf2:	b25b      	sxtb	r3, r3
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	6839      	ldr	r1, [r7, #0]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fef5 	bl	8000ae8 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 8000d14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db03      	blt.n	8000d24 <LCD5110_set_Y_base+0x1c>
 8000d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d20:	2b05      	cmp	r3, #5
 8000d22:	dd01      	ble.n	8000d28 <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 8000d24:	2307      	movs	r3, #7
 8000d26:	e00a      	b.n	8000d3e <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	b25b      	sxtb	r3, r3
 8000d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	6839      	ldr	r1, [r7, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fed6 	bl	8000ae8 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b084      	sub	sp, #16
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	603a      	str	r2, [r7, #0]
 8000d50:	80fb      	strh	r3, [r7, #6]
 8000d52:	460b      	mov	r3, r1
 8000d54:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 8000d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d5a:	6839      	ldr	r1, [r7, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ffb4 	bl	8000cca <LCD5110_set_X_base>
 8000d62:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <LCD5110_set_XY_base+0x28>
		return res;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	e00c      	b.n	8000d88 <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 8000d6e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d72:	6839      	ldr	r1, [r7, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ffc7 	bl	8000d08 <LCD5110_set_Y_base>
 8000d7a:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <LCD5110_set_XY_base+0x40>
		return res;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	e000      	b.n	8000d88 <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000daa:	601a      	str	r2, [r3, #0]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	70fb      	strb	r3, [r7, #3]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	70bb      	strb	r3, [r7, #2]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffdc 	bl	8000d90 <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff feac 	bl	8000b36 <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff fee9 	bl	8000bb6 <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 8000de4:	2364      	movs	r3, #100	; 0x64
 8000de6:	60fb      	str	r3, [r7, #12]
	while (--i){}
 8000de8:	bf00      	nop
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1fa      	bne.n	8000dea <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff fece 	bl	8000b96 <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff febb 	bl	8000b76 <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 8000e00:	6879      	ldr	r1, [r7, #4]
 8000e02:	2001      	movs	r0, #1
 8000e04:	f7ff fee7 	bl	8000bd6 <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 8000e08:	78bb      	ldrb	r3, [r7, #2]
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff13 	bl	8000c38 <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 8000e12:	787b      	ldrb	r3, [r7, #1]
 8000e14:	6879      	ldr	r1, [r7, #4]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ff27 	bl	8000c6a <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 8000e1c:	7e3b      	ldrb	r3, [r7, #24]
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff3a 	bl	8000c9a <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f7ff fed4 	bl	8000bd6 <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	6879      	ldr	r1, [r7, #4]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fee9 	bl	8000c0a <LCD5110_set_mode_base>

	return LCD5110_OK;
 8000e38:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff fe73 	bl	8000b36 <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff fe90 	bl	8000b76 <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f7ff ff73 	bl	8000d46 <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff fe78 	bl	8000b56 <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	331c      	adds	r3, #28
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fe4c 	bl	8000b0e <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <TIM10_reinit>:
/* USER CODE BEGIN 0 */

LCD5110_display lcd1;
volatile uint32_t tim10_overflows = 0;
void TIM10_reinit()
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
 HAL_TIM_Base_Stop(&htim10);
 8000e84:	4809      	ldr	r0, [pc, #36]	; (8000eac <TIM10_reinit+0x2c>)
 8000e86:	f001 ff62 	bl	8002d4e <HAL_TIM_Base_Stop>
 __HAL_TIM_SET_PRESCALER( &htim10, (95) );
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <TIM10_reinit+0x2c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	225f      	movs	r2, #95	; 0x5f
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28
 __HAL_TIM_SET_COUNTER( &htim10, 0 );
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <TIM10_reinit+0x2c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
 tim10_overflows = 0;
 8000e9a:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <TIM10_reinit+0x30>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 HAL_TIM_Base_Start_IT(&htim10);
 8000ea0:	4802      	ldr	r0, [pc, #8]	; (8000eac <TIM10_reinit+0x2c>)
 8000ea2:	f001 ff7b 	bl	8002d9c <HAL_TIM_Base_Start_IT>
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2000030c 	.word	0x2000030c
 8000eb0:	2000029c 	.word	0x2000029c

08000eb4 <init_timing>:

void init_timing()
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0


 TIM10_reinit();
 8000eb8:	f7ff ffe2 	bl	8000e80 <TIM10_reinit>

}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <get_tim10_us>:

uint32_t get_tim10_us()
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 __HAL_TIM_DISABLE_IT(&htim10, TIM_IT_UPDATE);
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <get_tim10_us+0x4c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <get_tim10_us+0x4c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 0201 	bic.w	r2, r2, #1
 8000ed4:	60da      	str	r2, [r3, #12]
 uint32_t res = tim10_overflows * 10000 + __HAL_TIM_GET_COUNTER(&htim10);
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <get_tim10_us+0x50>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ede:	fb03 f202 	mul.w	r2, r3, r2
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <get_tim10_us+0x4c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee8:	4413      	add	r3, r2
 8000eea:	607b      	str	r3, [r7, #4]
 __HAL_TIM_ENABLE_IT(&htim10, TIM_IT_UPDATE);
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <get_tim10_us+0x4c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	68da      	ldr	r2, [r3, #12]
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <get_tim10_us+0x4c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f042 0201 	orr.w	r2, r2, #1
 8000efa:	60da      	str	r2, [r3, #12]
 return res;
 8000efc:	687b      	ldr	r3, [r7, #4]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	2000030c 	.word	0x2000030c
 8000f10:	2000029c 	.word	0x2000029c

08000f14 <udelay_TIM10>:

void udelay_TIM10(uint32_t useconds) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 uint32_t before = get_tim10_us();
 8000f1c:	f7ff ffd0 	bl	8000ec0 <get_tim10_us>
 8000f20:	60f8      	str	r0, [r7, #12]
 while( get_tim10_us() < before+useconds){}
 8000f22:	bf00      	nop
 8000f24:	f7ff ffcc 	bl	8000ec0 <get_tim10_us>
 8000f28:	4601      	mov	r1, r0
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4299      	cmp	r1, r3
 8000f32:	d3f7      	bcc.n	8000f24 <udelay_TIM10+0x10>
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_TIM_PeriodElapsedCallback>:
#define USE_DWT_TIMING 1
#define __HAL_TIM_SET_PRESCALER(__HANDLE__, __PRESC__)((__HANDLE__)->Instance->PSC = (__PRESC__))


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if( htim->Instance == TIM10 )
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d104      	bne.n	8000f5c <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
   ++tim10_overflows;
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	3301      	adds	r3, #1
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f5a:	6013      	str	r3, [r2, #0]
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	40014400 	.word	0x40014400
 8000f6c:	2000029c 	.word	0x2000029c

08000f70 <get_us>:
#define USE_TIM10_TIMING 1



uint32_t get_us()
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0

 return get_tim10_us();
 8000f74:	f7ff ffa4 	bl	8000ec0 <get_tim10_us>
 8000f78:	4603      	mov	r3, r0

}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_GPIO_EXTI_Callback>:
volatile uint32_t echo_start;
volatile uint32_t echo_finish;
volatile uint32_t measured_time;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	80fb      	strh	r3, [r7, #6]
 if (GPIO_Pin == ECHOI_Pin )
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f90:	d124      	bne.n	8000fdc <HAL_GPIO_EXTI_Callback+0x5c>
 {
  switch (state) {
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d002      	beq.n	8000fa2 <HAL_GPIO_EXTI_Callback+0x22>
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d009      	beq.n	8000fb4 <HAL_GPIO_EXTI_Callback+0x34>
 8000fa0:	e018      	b.n	8000fd4 <HAL_GPIO_EXTI_Callback+0x54>
  case WAITING_FOR_ECHO_START_S: {
   echo_start =  get_us();
 8000fa2:	f7ff ffe5 	bl	8000f70 <get_us>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000faa:	6013      	str	r3, [r2, #0]
   state = WAITING_FOR_ECHO_STOP_S;
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000fae:	2203      	movs	r2, #3
 8000fb0:	701a      	strb	r2, [r3, #0]
   break;
 8000fb2:	e013      	b.n	8000fdc <HAL_GPIO_EXTI_Callback+0x5c>
  }
  case WAITING_FOR_ECHO_STOP_S: {
   echo_finish = get_us();
 8000fb4:	f7ff ffdc 	bl	8000f70 <get_us>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4a0c      	ldr	r2, [pc, #48]	; (8000fec <HAL_GPIO_EXTI_Callback+0x6c>)
 8000fbc:	6013      	str	r3, [r2, #0]
   measured_time = echo_finish - echo_start;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_GPIO_EXTI_Callback+0x6c>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000fca:	6013      	str	r3, [r2, #0]
   state = READING_DATA_S;
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000fce:	2207      	movs	r2, #7
 8000fd0:	701a      	strb	r2, [r3, #0]
   break;
 8000fd2:	e003      	b.n	8000fdc <HAL_GPIO_EXTI_Callback+0x5c>
  }
  default:
   state = ERROR_S;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_GPIO_EXTI_Callback+0x64>)
 8000fd6:	2208      	movs	r2, #8
 8000fd8:	701a      	strb	r2, [r3, #0]
  }
 }
}
 8000fda:	e7ff      	b.n	8000fdc <HAL_GPIO_EXTI_Callback+0x5c>
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200002a0 	.word	0x200002a0
 8000fe8:	200002a4 	.word	0x200002a4
 8000fec:	200002a8 	.word	0x200002a8
 8000ff0:	200002ac 	.word	0x200002ac

08000ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b099      	sub	sp, #100	; 0x64
 8000ff8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffa:	f000 fad3 	bl	80015a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffe:	f000 f8b1 	bl	8001164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001002:	f7ff fabb 	bl	800057c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001006:	f000 f91b 	bl	8001240 <MX_SPI1_Init>
  MX_TIM10_Init();
 800100a:	f000 fa55 	bl	80014b8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  lcd1.hw_conf.spi_handle = &hspi1;
 800100e:	4b49      	ldr	r3, [pc, #292]	; (8001134 <main+0x140>)
 8001010:	4a49      	ldr	r2, [pc, #292]	; (8001138 <main+0x144>)
 8001012:	601a      	str	r2, [r3, #0]
    lcd1.hw_conf.spi_cs_pin =  LCD1_CS_Pin;
 8001014:	4b47      	ldr	r3, [pc, #284]	; (8001134 <main+0x140>)
 8001016:	2220      	movs	r2, #32
 8001018:	809a      	strh	r2, [r3, #4]
    lcd1.hw_conf.spi_cs_port = LCD1_CS_GPIO_Port;
 800101a:	4b46      	ldr	r3, [pc, #280]	; (8001134 <main+0x140>)
 800101c:	4a47      	ldr	r2, [pc, #284]	; (800113c <main+0x148>)
 800101e:	609a      	str	r2, [r3, #8]
    lcd1.hw_conf.rst_pin =  LCD1_RST_Pin;
 8001020:	4b44      	ldr	r3, [pc, #272]	; (8001134 <main+0x140>)
 8001022:	2210      	movs	r2, #16
 8001024:	819a      	strh	r2, [r3, #12]
    lcd1.hw_conf.rst_port = LCD1_RST_GPIO_Port;
 8001026:	4b43      	ldr	r3, [pc, #268]	; (8001134 <main+0x140>)
 8001028:	4a44      	ldr	r2, [pc, #272]	; (800113c <main+0x148>)
 800102a:	611a      	str	r2, [r3, #16]
    lcd1.hw_conf.dc_pin =  LCD1_DC_Pin;
 800102c:	4b41      	ldr	r3, [pc, #260]	; (8001134 <main+0x140>)
 800102e:	2201      	movs	r2, #1
 8001030:	829a      	strh	r2, [r3, #20]
    lcd1.hw_conf.dc_port = LCD1_DC_GPIO_Port;
 8001032:	4b40      	ldr	r3, [pc, #256]	; (8001134 <main+0x140>)
 8001034:	4a42      	ldr	r2, [pc, #264]	; (8001140 <main+0x14c>)
 8001036:	619a      	str	r2, [r3, #24]
    lcd1.def_scr = lcd5110_def_scr;
 8001038:	4b3e      	ldr	r3, [pc, #248]	; (8001134 <main+0x140>)
 800103a:	4a42      	ldr	r2, [pc, #264]	; (8001144 <main+0x150>)
 800103c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001040:	4614      	mov	r4, r2
 8001042:	6820      	ldr	r0, [r4, #0]
 8001044:	6861      	ldr	r1, [r4, #4]
 8001046:	68a2      	ldr	r2, [r4, #8]
 8001048:	c307      	stmia	r3!, {r0, r1, r2}
 800104a:	89a2      	ldrh	r2, [r4, #12]
 800104c:	801a      	strh	r2, [r3, #0]
    LCD5110_init(&lcd1.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 800104e:	2303      	movs	r3, #3
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2302      	movs	r3, #2
 8001054:	2240      	movs	r2, #64	; 0x40
 8001056:	210c      	movs	r1, #12
 8001058:	4836      	ldr	r0, [pc, #216]	; (8001134 <main+0x140>)
 800105a:	f7ff fead 	bl	8000db8 <LCD5110_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init_timing();
 800105e:	f7ff ff29 	bl	8000eb4 <init_timing>
  while (1)
  {
	 char result[80];

	 HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001068:	4837      	ldr	r0, [pc, #220]	; (8001148 <main+0x154>)
 800106a:	f000 fde9 	bl	8001c40 <HAL_GPIO_WritePin>
	 udelay_TIM10(16);
 800106e:	2010      	movs	r0, #16
 8001070:	f7ff ff50 	bl	8000f14 <udelay_TIM10>
	 HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	f44f 7100 	mov.w	r1, #512	; 0x200
 800107a:	4833      	ldr	r0, [pc, #204]	; (8001148 <main+0x154>)
 800107c:	f000 fde0 	bl	8001c40 <HAL_GPIO_WritePin>

	 state = WAITING_FOR_ECHO_START_S;
 8001080:	4b32      	ldr	r3, [pc, #200]	; (800114c <main+0x158>)
 8001082:	2202      	movs	r2, #2
 8001084:	701a      	strb	r2, [r3, #0]

	 while( state == WAITING_FOR_ECHO_START_S && state != ERROR_S )
 8001086:	bf00      	nop
 8001088:	4b30      	ldr	r3, [pc, #192]	; (800114c <main+0x158>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d104      	bne.n	800109c <main+0xa8>
 8001092:	4b2e      	ldr	r3, [pc, #184]	; (800114c <main+0x158>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	2b08      	cmp	r3, #8
 800109a:	d1f5      	bne.n	8001088 <main+0x94>
	    {}
	 if ( state == ERROR_S )
 800109c:	4b2b      	ldr	r3, [pc, #172]	; (800114c <main+0x158>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b08      	cmp	r3, #8
 80010a4:	d10b      	bne.n	80010be <main+0xca>
	 {
		 LCD5110_print("Error on start", BLACK, &lcd1);
 80010a6:	4a23      	ldr	r2, [pc, #140]	; (8001134 <main+0x140>)
 80010a8:	2101      	movs	r1, #1
 80010aa:	4829      	ldr	r0, [pc, #164]	; (8001150 <main+0x15c>)
 80010ac:	f7ff fb43 	bl	8000736 <LCD5110_print>
		 LCD5110_refresh(&lcd1.hw_conf);
 80010b0:	4820      	ldr	r0, [pc, #128]	; (8001134 <main+0x140>)
 80010b2:	f7ff fb11 	bl	80006d8 <LCD5110_refresh>
		 LCD5110_clear_scr(&lcd1.hw_conf);
 80010b6:	481f      	ldr	r0, [pc, #124]	; (8001134 <main+0x140>)
 80010b8:	f7ff fb2c 	bl	8000714 <LCD5110_clear_scr>
	     continue;
 80010bc:	e039      	b.n	8001132 <main+0x13e>
	 }
	 while( state == WAITING_FOR_ECHO_STOP_S && state != ERROR_S )
 80010be:	bf00      	nop
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <main+0x158>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d104      	bne.n	80010d4 <main+0xe0>
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <main+0x158>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	d1f5      	bne.n	80010c0 <main+0xcc>
	    {}
	 if ( state == ERROR_S )
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <main+0x158>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b08      	cmp	r3, #8
 80010dc:	d10b      	bne.n	80010f6 <main+0x102>
	 {
		 LCD5110_print("Error on finish", BLACK, &lcd1);
 80010de:	4a15      	ldr	r2, [pc, #84]	; (8001134 <main+0x140>)
 80010e0:	2101      	movs	r1, #1
 80010e2:	481c      	ldr	r0, [pc, #112]	; (8001154 <main+0x160>)
 80010e4:	f7ff fb27 	bl	8000736 <LCD5110_print>
		 LCD5110_refresh(&lcd1.hw_conf);
 80010e8:	4812      	ldr	r0, [pc, #72]	; (8001134 <main+0x140>)
 80010ea:	f7ff faf5 	bl	80006d8 <LCD5110_refresh>
		 LCD5110_clear_scr(&lcd1.hw_conf);
 80010ee:	4811      	ldr	r0, [pc, #68]	; (8001134 <main+0x140>)
 80010f0:	f7ff fb10 	bl	8000714 <LCD5110_clear_scr>
	     continue;
 80010f4:	e01d      	b.n	8001132 <main+0x13e>
	 }

	 uint32_t distance = measured_time/58; // 58??
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <main+0x164>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a18      	ldr	r2, [pc, #96]	; (800115c <main+0x168>)
 80010fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001100:	095b      	lsrs	r3, r3, #5
 8001102:	657b      	str	r3, [r7, #84]	; 0x54


	 sprintf(result, "Time:\n %lu us\nDistance:\n %lu cm\n", measured_time, distance);
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <main+0x164>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	1d38      	adds	r0, r7, #4
 800110a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800110c:	4914      	ldr	r1, [pc, #80]	; (8001160 <main+0x16c>)
 800110e:	f002 f86b 	bl	80031e8 <siprintf>
	 LCD5110_print(result, BLACK, &lcd1);
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	4a07      	ldr	r2, [pc, #28]	; (8001134 <main+0x140>)
 8001116:	2101      	movs	r1, #1
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fb0c 	bl	8000736 <LCD5110_print>
	 HAL_Delay(1000);
 800111e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001122:	f000 fab1 	bl	8001688 <HAL_Delay>
	 LCD5110_refresh(&lcd1.hw_conf);
 8001126:	4803      	ldr	r0, [pc, #12]	; (8001134 <main+0x140>)
 8001128:	f7ff fad6 	bl	80006d8 <LCD5110_refresh>
	 LCD5110_clear_scr(&lcd1.hw_conf);
 800112c:	4801      	ldr	r0, [pc, #4]	; (8001134 <main+0x140>)
 800112e:	f7ff faf1 	bl	8000714 <LCD5110_clear_scr>
  {
 8001132:	e796      	b.n	8001062 <main+0x6e>
 8001134:	20000078 	.word	0x20000078
 8001138:	200002b0 	.word	0x200002b0
 800113c:	40020800 	.word	0x40020800
 8001140:	40020400 	.word	0x40020400
 8001144:	0800418c 	.word	0x0800418c
 8001148:	40020c00 	.word	0x40020c00
 800114c:	200002a0 	.word	0x200002a0
 8001150:	08003b48 	.word	0x08003b48
 8001154:	08003b58 	.word	0x08003b58
 8001158:	200002ac 	.word	0x200002ac
 800115c:	8d3dcb09 	.word	0x8d3dcb09
 8001160:	08003b68 	.word	0x08003b68

08001164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b094      	sub	sp, #80	; 0x50
 8001168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116a:	f107 0320 	add.w	r3, r7, #32
 800116e:	2230      	movs	r2, #48	; 0x30
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f002 f858 	bl	8003228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	4b27      	ldr	r3, [pc, #156]	; (800122c <SystemClock_Config+0xc8>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	4a26      	ldr	r2, [pc, #152]	; (800122c <SystemClock_Config+0xc8>)
 8001192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001196:	6413      	str	r3, [r2, #64]	; 0x40
 8001198:	4b24      	ldr	r3, [pc, #144]	; (800122c <SystemClock_Config+0xc8>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011a4:	2300      	movs	r3, #0
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	4b21      	ldr	r3, [pc, #132]	; (8001230 <SystemClock_Config+0xcc>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a20      	ldr	r2, [pc, #128]	; (8001230 <SystemClock_Config+0xcc>)
 80011ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <SystemClock_Config+0xcc>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c0:	2301      	movs	r3, #1
 80011c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ca:	2302      	movs	r3, #2
 80011cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011d4:	2304      	movs	r3, #4
 80011d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80011d8:	23c0      	movs	r3, #192	; 0xc0
 80011da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011dc:	2304      	movs	r3, #4
 80011de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80011e0:	2308      	movs	r3, #8
 80011e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e4:	f107 0320 	add.w	r3, r7, #32
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fd5b 	bl	8001ca4 <HAL_RCC_OscConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011f4:	f000 f81e 	bl	8001234 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f8:	230f      	movs	r3, #15
 80011fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fc:	2302      	movs	r3, #2
 80011fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001204:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001208:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	2103      	movs	r1, #3
 8001214:	4618      	mov	r0, r3
 8001216:	f000 ffbd 	bl	8002194 <HAL_RCC_ClockConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001220:	f000 f808 	bl	8001234 <Error_Handler>
  }
}
 8001224:	bf00      	nop
 8001226:	3750      	adds	r7, #80	; 0x50
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40023800 	.word	0x40023800
 8001230:	40007000 	.word	0x40007000

08001234 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001238:	b672      	cpsid	i
}
 800123a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800123c:	e7fe      	b.n	800123c <Error_Handler+0x8>
	...

08001240 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001246:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <MX_SPI1_Init+0x68>)
 8001248:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <MX_SPI1_Init+0x64>)
 800124c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001250:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_SPI1_Init+0x64>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_SPI1_Init+0x64>)
 800126c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001270:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001274:	2218      	movs	r2, #24
 8001276:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <MX_SPI1_Init+0x64>)
 800127a:	2200      	movs	r2, #0
 800127c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001280:	2200      	movs	r2, #0
 8001282:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001286:	2200      	movs	r2, #0
 8001288:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_SPI1_Init+0x64>)
 800128c:	220a      	movs	r2, #10
 800128e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001292:	f001 f96b 	bl	800256c <HAL_SPI_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800129c:	f7ff ffca 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	200002b0 	.word	0x200002b0
 80012a8:	40013000 	.word	0x40013000

080012ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a1d      	ldr	r2, [pc, #116]	; (8001340 <HAL_SPI_MspInit+0x94>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d133      	bne.n	8001336 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <HAL_SPI_MspInit+0x98>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a1b      	ldr	r2, [pc, #108]	; (8001344 <HAL_SPI_MspInit+0x98>)
 80012d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <HAL_SPI_MspInit+0x98>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <HAL_SPI_MspInit+0x98>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a14      	ldr	r2, [pc, #80]	; (8001344 <HAL_SPI_MspInit+0x98>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_SPI_MspInit+0x98>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001306:	23a0      	movs	r3, #160	; 0xa0
 8001308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001316:	2305      	movs	r3, #5
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	4809      	ldr	r0, [pc, #36]	; (8001348 <HAL_SPI_MspInit+0x9c>)
 8001322:	f000 fb09 	bl	8001938 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	2023      	movs	r0, #35	; 0x23
 800132c:	f000 faab 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001330:	2023      	movs	r0, #35	; 0x23
 8001332:	f000 fac4 	bl	80018be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	; 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40013000 	.word	0x40013000
 8001344:	40023800 	.word	0x40023800
 8001348:	40020000 	.word	0x40020000

0800134c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <HAL_MspInit+0x4c>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <HAL_MspInit+0x4c>)
 800135c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <HAL_MspInit+0x4c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_MspInit+0x4c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a08      	ldr	r2, [pc, #32]	; (8001398 <HAL_MspInit+0x4c>)
 8001378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_MspInit+0x4c>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800138a:	2007      	movs	r0, #7
 800138c:	f000 fa70 	bl	8001870 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40023800 	.word	0x40023800

0800139c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <NMI_Handler+0x4>

080013a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <HardFault_Handler+0x4>

080013a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <MemManage_Handler+0x4>

080013ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <BusFault_Handler+0x4>

080013b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <UsageFault_Handler+0x4>

080013ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e8:	f000 f92e 	bl	8001648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80013f6:	f001 fd33 	bl	8002e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000030c 	.word	0x2000030c

08001404 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <SPI1_IRQHandler+0x10>)
 800140a:	f001 fa75 	bl	80028f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200002b0 	.word	0x200002b0

08001418 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ECHOI_Pin);
 800141c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001420:	f000 fc28 	bl	8001c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}

08001428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001430:	4a14      	ldr	r2, [pc, #80]	; (8001484 <_sbrk+0x5c>)
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <_sbrk+0x60>)
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <_sbrk+0x64>)
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <_sbrk+0x68>)
 8001448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	429a      	cmp	r2, r3
 8001456:	d207      	bcs.n	8001468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001458:	f001 feee 	bl	8003238 <__errno>
 800145c:	4603      	mov	r3, r0
 800145e:	220c      	movs	r2, #12
 8001460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001466:	e009      	b.n	800147c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146e:	4b07      	ldr	r3, [pc, #28]	; (800148c <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <_sbrk+0x64>)
 8001478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20020000 	.word	0x20020000
 8001488:	00000400 	.word	0x00000400
 800148c:	20000308 	.word	0x20000308
 8001490:	200004a0 	.word	0x200004a0

08001494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <SystemInit+0x20>)
 800149a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <SystemInit+0x20>)
 80014a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80014bc:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_TIM10_Init+0x40>)
 80014be:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <MX_TIM10_Init+0x44>)
 80014c0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 95;
 80014c2:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <MX_TIM10_Init+0x40>)
 80014c4:	225f      	movs	r2, #95	; 0x5f
 80014c6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <MX_TIM10_Init+0x40>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <MX_TIM10_Init+0x40>)
 80014d0:	f242 7210 	movw	r2, #10000	; 0x2710
 80014d4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <MX_TIM10_Init+0x40>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_TIM10_Init+0x40>)
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_TIM10_Init+0x40>)
 80014e4:	f001 fbe4 	bl	8002cb0 <HAL_TIM_Base_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80014ee:	f7ff fea1 	bl	8001234 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2000030c 	.word	0x2000030c
 80014fc:	40014400 	.word	0x40014400

08001500 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <HAL_TIM_Base_MspInit+0x48>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d115      	bne.n	800153e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_TIM_Base_MspInit+0x4c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	4a0c      	ldr	r2, [pc, #48]	; (800154c <HAL_TIM_Base_MspInit+0x4c>)
 800151c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001520:	6453      	str	r3, [r2, #68]	; 0x44
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_TIM_Base_MspInit+0x4c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	2019      	movs	r0, #25
 8001534:	f000 f9a7 	bl	8001886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001538:	2019      	movs	r0, #25
 800153a:	f000 f9c0 	bl	80018be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40014400 	.word	0x40014400
 800154c:	40023800 	.word	0x40023800

08001550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001588 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001554:	480d      	ldr	r0, [pc, #52]	; (800158c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001556:	490e      	ldr	r1, [pc, #56]	; (8001590 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001558:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800155c:	e002      	b.n	8001564 <LoopCopyDataInit>

0800155e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800155e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001562:	3304      	adds	r3, #4

08001564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001568:	d3f9      	bcc.n	800155e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156a:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800156c:	4c0b      	ldr	r4, [pc, #44]	; (800159c <LoopFillZerobss+0x26>)
  movs r3, #0
 800156e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001570:	e001      	b.n	8001576 <LoopFillZerobss>

08001572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001574:	3204      	adds	r2, #4

08001576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001578:	d3fb      	bcc.n	8001572 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800157a:	f7ff ff8b 	bl	8001494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800157e:	f001 fe61 	bl	8003244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001582:	f7ff fd37 	bl	8000ff4 <main>
  bx  lr    
 8001586:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001588:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800158c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001590:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001594:	080042f0 	.word	0x080042f0
  ldr r2, =_sbss
 8001598:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800159c:	200004a0 	.word	0x200004a0

080015a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a0:	e7fe      	b.n	80015a0 <ADC_IRQHandler>
	...

080015a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <HAL_Init+0x40>)
 80015ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <HAL_Init+0x40>)
 80015ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <HAL_Init+0x40>)
 80015c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f000 f94f 	bl	8001870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f000 f808 	bl	80015e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d8:	f7ff feb8 	bl	800134c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023c00 	.word	0x40023c00

080015e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_InitTick+0x54>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_InitTick+0x58>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f967 	bl	80018da <HAL_SYSTICK_Config>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e00e      	b.n	8001634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d80a      	bhi.n	8001632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161c:	2200      	movs	r2, #0
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001624:	f000 f92f 	bl	8001886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001628:	4a06      	ldr	r2, [pc, #24]	; (8001644 <HAL_InitTick+0x5c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000000 	.word	0x20000000
 8001640:	20000008 	.word	0x20000008
 8001644:	20000004 	.word	0x20000004

08001648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_IncTick+0x20>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x24>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a04      	ldr	r2, [pc, #16]	; (800166c <HAL_IncTick+0x24>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000008 	.word	0x20000008
 800166c:	20000354 	.word	0x20000354

08001670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <HAL_GetTick+0x14>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000354 	.word	0x20000354

08001688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001690:	f7ff ffee 	bl	8001670 <HAL_GetTick>
 8001694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016a0:	d005      	beq.n	80016ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <HAL_Delay+0x44>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4413      	add	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ae:	bf00      	nop
 80016b0:	f7ff ffde 	bl	8001670 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d8f7      	bhi.n	80016b0 <HAL_Delay+0x28>
  {
  }
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000008 	.word	0x20000008

080016d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e0:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016ec:	4013      	ands	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001702:	4a04      	ldr	r2, [pc, #16]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	60d3      	str	r3, [r2, #12]
}
 8001708:	bf00      	nop
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <__NVIC_GetPriorityGrouping+0x18>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	f003 0307 	and.w	r3, r3, #7
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	2b00      	cmp	r3, #0
 8001744:	db0b      	blt.n	800175e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	f003 021f 	and.w	r2, r3, #31
 800174c:	4907      	ldr	r1, [pc, #28]	; (800176c <__NVIC_EnableIRQ+0x38>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	2001      	movs	r0, #1
 8001756:	fa00 f202 	lsl.w	r2, r0, r2
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	; (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	; (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
         );
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800183c:	d301      	bcc.n	8001842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183e:	2301      	movs	r3, #1
 8001840:	e00f      	b.n	8001862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <SysTick_Config+0x40>)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184a:	210f      	movs	r1, #15
 800184c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001850:	f7ff ff8e 	bl	8001770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <SysTick_Config+0x40>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185a:	4b04      	ldr	r3, [pc, #16]	; (800186c <SysTick_Config+0x40>)
 800185c:	2207      	movs	r2, #7
 800185e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	e000e010 	.word	0xe000e010

08001870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ff29 	bl	80016d0 <__NVIC_SetPriorityGrouping>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001898:	f7ff ff3e 	bl	8001718 <__NVIC_GetPriorityGrouping>
 800189c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	6978      	ldr	r0, [r7, #20]
 80018a4:	f7ff ff8e 	bl	80017c4 <NVIC_EncodePriority>
 80018a8:	4602      	mov	r2, r0
 80018aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ae:	4611      	mov	r1, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff5d 	bl	8001770 <__NVIC_SetPriority>
}
 80018b6:	bf00      	nop
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff ff31 	bl	8001734 <__NVIC_EnableIRQ>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff ffa2 	bl	800182c <SysTick_Config>
 80018e8:	4603      	mov	r3, r0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d004      	beq.n	8001910 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2280      	movs	r2, #128	; 0x80
 800190a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e00c      	b.n	800192a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2205      	movs	r2, #5
 8001914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0201 	bic.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	e159      	b.n	8001c08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001954:	2201      	movs	r2, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	429a      	cmp	r2, r3
 800196e:	f040 8148 	bne.w	8001c02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b01      	cmp	r3, #1
 800197c:	d005      	beq.n	800198a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001986:	2b02      	cmp	r3, #2
 8001988:	d130      	bne.n	80019ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	2203      	movs	r2, #3
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c0:	2201      	movs	r2, #1
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 0201 	and.w	r2, r3, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d017      	beq.n	8001a28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d123      	bne.n	8001a7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	08da      	lsrs	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3208      	adds	r2, #8
 8001a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	08da      	lsrs	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3208      	adds	r2, #8
 8001a76:	69b9      	ldr	r1, [r7, #24]
 8001a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0203 	and.w	r2, r3, #3
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80a2 	beq.w	8001c02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b57      	ldr	r3, [pc, #348]	; (8001c20 <HAL_GPIO_Init+0x2e8>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	4a56      	ldr	r2, [pc, #344]	; (8001c20 <HAL_GPIO_Init+0x2e8>)
 8001ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001acc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ace:	4b54      	ldr	r3, [pc, #336]	; (8001c20 <HAL_GPIO_Init+0x2e8>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ada:	4a52      	ldr	r2, [pc, #328]	; (8001c24 <HAL_GPIO_Init+0x2ec>)
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	089b      	lsrs	r3, r3, #2
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	220f      	movs	r2, #15
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a49      	ldr	r2, [pc, #292]	; (8001c28 <HAL_GPIO_Init+0x2f0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d019      	beq.n	8001b3a <HAL_GPIO_Init+0x202>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a48      	ldr	r2, [pc, #288]	; (8001c2c <HAL_GPIO_Init+0x2f4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_GPIO_Init+0x1fe>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a47      	ldr	r2, [pc, #284]	; (8001c30 <HAL_GPIO_Init+0x2f8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00d      	beq.n	8001b32 <HAL_GPIO_Init+0x1fa>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a46      	ldr	r2, [pc, #280]	; (8001c34 <HAL_GPIO_Init+0x2fc>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d007      	beq.n	8001b2e <HAL_GPIO_Init+0x1f6>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a45      	ldr	r2, [pc, #276]	; (8001c38 <HAL_GPIO_Init+0x300>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d101      	bne.n	8001b2a <HAL_GPIO_Init+0x1f2>
 8001b26:	2304      	movs	r3, #4
 8001b28:	e008      	b.n	8001b3c <HAL_GPIO_Init+0x204>
 8001b2a:	2307      	movs	r3, #7
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x204>
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e004      	b.n	8001b3c <HAL_GPIO_Init+0x204>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e002      	b.n	8001b3c <HAL_GPIO_Init+0x204>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_GPIO_Init+0x204>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	f002 0203 	and.w	r2, r2, #3
 8001b42:	0092      	lsls	r2, r2, #2
 8001b44:	4093      	lsls	r3, r2
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b4c:	4935      	ldr	r1, [pc, #212]	; (8001c24 <HAL_GPIO_Init+0x2ec>)
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	3302      	adds	r3, #2
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <HAL_GPIO_Init+0x304>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b7e:	4a2f      	ldr	r2, [pc, #188]	; (8001c3c <HAL_GPIO_Init+0x304>)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b84:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <HAL_GPIO_Init+0x304>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba8:	4a24      	ldr	r2, [pc, #144]	; (8001c3c <HAL_GPIO_Init+0x304>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bae:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <HAL_GPIO_Init+0x304>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bd2:	4a1a      	ldr	r2, [pc, #104]	; (8001c3c <HAL_GPIO_Init+0x304>)
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <HAL_GPIO_Init+0x304>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bfc:	4a0f      	ldr	r2, [pc, #60]	; (8001c3c <HAL_GPIO_Init+0x304>)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3301      	adds	r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	2b0f      	cmp	r3, #15
 8001c0c:	f67f aea2 	bls.w	8001954 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40013800 	.word	0x40013800
 8001c28:	40020000 	.word	0x40020000
 8001c2c:	40020400 	.word	0x40020400
 8001c30:	40020800 	.word	0x40020800
 8001c34:	40020c00 	.word	0x40020c00
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40013c00 	.word	0x40013c00

08001c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c50:	787b      	ldrb	r3, [r7, #1]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c5c:	e003      	b.n	8001c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c5e:	887b      	ldrh	r3, [r7, #2]
 8001c60:	041a      	lsls	r2, r3, #16
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	619a      	str	r2, [r3, #24]
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c80:	695a      	ldr	r2, [r3, #20]
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	4013      	ands	r3, r2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d006      	beq.n	8001c98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c8a:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c90:	88fb      	ldrh	r3, [r7, #6]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff f974 	bl	8000f80 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40013c00 	.word	0x40013c00

08001ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e267      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d075      	beq.n	8001dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cc2:	4b88      	ldr	r3, [pc, #544]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d00c      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cce:	4b85      	ldr	r3, [pc, #532]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d112      	bne.n	8001d00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cda:	4b82      	ldr	r3, [pc, #520]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ce6:	d10b      	bne.n	8001d00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	4b7e      	ldr	r3, [pc, #504]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d05b      	beq.n	8001dac <HAL_RCC_OscConfig+0x108>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d157      	bne.n	8001dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e242      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d08:	d106      	bne.n	8001d18 <HAL_RCC_OscConfig+0x74>
 8001d0a:	4b76      	ldr	r3, [pc, #472]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a75      	ldr	r2, [pc, #468]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e01d      	b.n	8001d54 <HAL_RCC_OscConfig+0xb0>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x98>
 8001d22:	4b70      	ldr	r3, [pc, #448]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a6f      	ldr	r2, [pc, #444]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b6d      	ldr	r3, [pc, #436]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a6c      	ldr	r2, [pc, #432]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCC_OscConfig+0xb0>
 8001d3c:	4b69      	ldr	r3, [pc, #420]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a68      	ldr	r2, [pc, #416]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	4b66      	ldr	r3, [pc, #408]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a65      	ldr	r2, [pc, #404]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d013      	beq.n	8001d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7ff fc88 	bl	8001670 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d64:	f7ff fc84 	bl	8001670 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	; 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e207      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	4b5b      	ldr	r3, [pc, #364]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0xc0>
 8001d82:	e014      	b.n	8001dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7ff fc74 	bl	8001670 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d8c:	f7ff fc70 	bl	8001670 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	; 0x64
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e1f3      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9e:	4b51      	ldr	r3, [pc, #324]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0xe8>
 8001daa:	e000      	b.n	8001dae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d063      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dba:	4b4a      	ldr	r3, [pc, #296]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00b      	beq.n	8001dde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dc6:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d11c      	bne.n	8001e0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dd2:	4b44      	ldr	r3, [pc, #272]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d116      	bne.n	8001e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dde:	4b41      	ldr	r3, [pc, #260]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d005      	beq.n	8001df6 <HAL_RCC_OscConfig+0x152>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e1c7      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df6:	4b3b      	ldr	r3, [pc, #236]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4937      	ldr	r1, [pc, #220]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0a:	e03a      	b.n	8001e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d020      	beq.n	8001e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e14:	4b34      	ldr	r3, [pc, #208]	; (8001ee8 <HAL_RCC_OscConfig+0x244>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1a:	f7ff fc29 	bl	8001670 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e22:	f7ff fc25 	bl	8001670 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e1a8      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e34:	4b2b      	ldr	r3, [pc, #172]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e40:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4925      	ldr	r1, [pc, #148]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]
 8001e54:	e015      	b.n	8001e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e56:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <HAL_RCC_OscConfig+0x244>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7ff fc08 	bl	8001670 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e64:	f7ff fc04 	bl	8001670 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e187      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d036      	beq.n	8001efc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d016      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <HAL_RCC_OscConfig+0x248>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9c:	f7ff fbe8 	bl	8001670 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea4:	f7ff fbe4 	bl	8001670 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e167      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x200>
 8001ec2:	e01b      	b.n	8001efc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <HAL_RCC_OscConfig+0x248>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eca:	f7ff fbd1 	bl	8001670 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed0:	e00e      	b.n	8001ef0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed2:	f7ff fbcd 	bl	8001670 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d907      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e150      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	42470000 	.word	0x42470000
 8001eec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef0:	4b88      	ldr	r3, [pc, #544]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 8001ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1ea      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 8097 	beq.w	8002038 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f0e:	4b81      	ldr	r3, [pc, #516]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10f      	bne.n	8001f3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	4b7d      	ldr	r3, [pc, #500]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a7c      	ldr	r2, [pc, #496]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2a:	4b7a      	ldr	r3, [pc, #488]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f36:	2301      	movs	r3, #1
 8001f38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3a:	4b77      	ldr	r3, [pc, #476]	; (8002118 <HAL_RCC_OscConfig+0x474>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d118      	bne.n	8001f78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f46:	4b74      	ldr	r3, [pc, #464]	; (8002118 <HAL_RCC_OscConfig+0x474>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a73      	ldr	r2, [pc, #460]	; (8002118 <HAL_RCC_OscConfig+0x474>)
 8001f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f52:	f7ff fb8d 	bl	8001670 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5a:	f7ff fb89 	bl	8001670 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e10c      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6c:	4b6a      	ldr	r3, [pc, #424]	; (8002118 <HAL_RCC_OscConfig+0x474>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d106      	bne.n	8001f8e <HAL_RCC_OscConfig+0x2ea>
 8001f80:	4b64      	ldr	r3, [pc, #400]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f84:	4a63      	ldr	r2, [pc, #396]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8c:	e01c      	b.n	8001fc8 <HAL_RCC_OscConfig+0x324>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b05      	cmp	r3, #5
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x30c>
 8001f96:	4b5f      	ldr	r3, [pc, #380]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9a:	4a5e      	ldr	r2, [pc, #376]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	f043 0304 	orr.w	r3, r3, #4
 8001fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa2:	4b5c      	ldr	r3, [pc, #368]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 8001fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa6:	4a5b      	ldr	r2, [pc, #364]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6713      	str	r3, [r2, #112]	; 0x70
 8001fae:	e00b      	b.n	8001fc8 <HAL_RCC_OscConfig+0x324>
 8001fb0:	4b58      	ldr	r3, [pc, #352]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 8001fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb4:	4a57      	ldr	r2, [pc, #348]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 8001fb6:	f023 0301 	bic.w	r3, r3, #1
 8001fba:	6713      	str	r3, [r2, #112]	; 0x70
 8001fbc:	4b55      	ldr	r3, [pc, #340]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 8001fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc0:	4a54      	ldr	r2, [pc, #336]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 8001fc2:	f023 0304 	bic.w	r3, r3, #4
 8001fc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d015      	beq.n	8001ffc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd0:	f7ff fb4e 	bl	8001670 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd6:	e00a      	b.n	8001fee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd8:	f7ff fb4a 	bl	8001670 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e0cb      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fee:	4b49      	ldr	r3, [pc, #292]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0ee      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x334>
 8001ffa:	e014      	b.n	8002026 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffc:	f7ff fb38 	bl	8001670 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002002:	e00a      	b.n	800201a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002004:	f7ff fb34 	bl	8001670 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e0b5      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800201a:	4b3e      	ldr	r3, [pc, #248]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1ee      	bne.n	8002004 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002026:	7dfb      	ldrb	r3, [r7, #23]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d105      	bne.n	8002038 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800202c:	4b39      	ldr	r3, [pc, #228]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	4a38      	ldr	r2, [pc, #224]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 8002032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002036:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80a1 	beq.w	8002184 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002042:	4b34      	ldr	r3, [pc, #208]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b08      	cmp	r3, #8
 800204c:	d05c      	beq.n	8002108 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d141      	bne.n	80020da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002056:	4b31      	ldr	r3, [pc, #196]	; (800211c <HAL_RCC_OscConfig+0x478>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff fb08 	bl	8001670 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002064:	f7ff fb04 	bl	8001670 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e087      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002076:	4b27      	ldr	r3, [pc, #156]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69da      	ldr	r2, [r3, #28]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	019b      	lsls	r3, r3, #6
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	085b      	lsrs	r3, r3, #1
 800209a:	3b01      	subs	r3, #1
 800209c:	041b      	lsls	r3, r3, #16
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a4:	061b      	lsls	r3, r3, #24
 80020a6:	491b      	ldr	r1, [pc, #108]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ac:	4b1b      	ldr	r3, [pc, #108]	; (800211c <HAL_RCC_OscConfig+0x478>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b2:	f7ff fadd 	bl	8001670 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ba:	f7ff fad9 	bl	8001670 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e05c      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x416>
 80020d8:	e054      	b.n	8002184 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <HAL_RCC_OscConfig+0x478>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff fac6 	bl	8001670 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e8:	f7ff fac2 	bl	8001670 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e045      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_RCC_OscConfig+0x470>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x444>
 8002106:	e03d      	b.n	8002184 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d107      	bne.n	8002120 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e038      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
 8002114:	40023800 	.word	0x40023800
 8002118:	40007000 	.word	0x40007000
 800211c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002120:	4b1b      	ldr	r3, [pc, #108]	; (8002190 <HAL_RCC_OscConfig+0x4ec>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d028      	beq.n	8002180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002138:	429a      	cmp	r2, r3
 800213a:	d121      	bne.n	8002180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002146:	429a      	cmp	r2, r3
 8002148:	d11a      	bne.n	8002180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002150:	4013      	ands	r3, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002156:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002158:	4293      	cmp	r3, r2
 800215a:	d111      	bne.n	8002180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002166:	085b      	lsrs	r3, r3, #1
 8002168:	3b01      	subs	r3, #1
 800216a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d107      	bne.n	8002180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800

08002194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0cc      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021a8:	4b68      	ldr	r3, [pc, #416]	; (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d90c      	bls.n	80021d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b6:	4b65      	ldr	r3, [pc, #404]	; (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b63      	ldr	r3, [pc, #396]	; (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0b8      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d020      	beq.n	800221e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e8:	4b59      	ldr	r3, [pc, #356]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	4a58      	ldr	r2, [pc, #352]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002200:	4b53      	ldr	r3, [pc, #332]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4a52      	ldr	r2, [pc, #328]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800220a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220c:	4b50      	ldr	r3, [pc, #320]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	494d      	ldr	r1, [pc, #308]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	4313      	orrs	r3, r2
 800221c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d044      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	4b47      	ldr	r3, [pc, #284]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d119      	bne.n	8002272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e07f      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d003      	beq.n	8002252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800224e:	2b03      	cmp	r3, #3
 8002250:	d107      	bne.n	8002262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002252:	4b3f      	ldr	r3, [pc, #252]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e06f      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002262:	4b3b      	ldr	r3, [pc, #236]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e067      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002272:	4b37      	ldr	r3, [pc, #220]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f023 0203 	bic.w	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4934      	ldr	r1, [pc, #208]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	4313      	orrs	r3, r2
 8002282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002284:	f7ff f9f4 	bl	8001670 <HAL_GetTick>
 8002288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228c:	f7ff f9f0 	bl	8001670 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	; 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e04f      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	4b2b      	ldr	r3, [pc, #172]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 020c 	and.w	r2, r3, #12
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d1eb      	bne.n	800228c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022b4:	4b25      	ldr	r3, [pc, #148]	; (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d20c      	bcs.n	80022dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c2:	4b22      	ldr	r3, [pc, #136]	; (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b20      	ldr	r3, [pc, #128]	; (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e032      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4916      	ldr	r1, [pc, #88]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	490e      	ldr	r1, [pc, #56]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800231a:	f000 f821 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 800231e:	4602      	mov	r2, r0
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	490a      	ldr	r1, [pc, #40]	; (8002354 <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	5ccb      	ldrb	r3, [r1, r3]
 800232e:	fa22 f303 	lsr.w	r3, r2, r3
 8002332:	4a09      	ldr	r2, [pc, #36]	; (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_RCC_ClockConfig+0x1c8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff f954 	bl	80015e8 <HAL_InitTick>

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023c00 	.word	0x40023c00
 8002350:	40023800 	.word	0x40023800
 8002354:	0800419c 	.word	0x0800419c
 8002358:	20000000 	.word	0x20000000
 800235c:	20000004 	.word	0x20000004

08002360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002364:	b094      	sub	sp, #80	; 0x50
 8002366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	647b      	str	r3, [r7, #68]	; 0x44
 800236c:	2300      	movs	r3, #0
 800236e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002370:	2300      	movs	r3, #0
 8002372:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002378:	4b79      	ldr	r3, [pc, #484]	; (8002560 <HAL_RCC_GetSysClockFreq+0x200>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 030c 	and.w	r3, r3, #12
 8002380:	2b08      	cmp	r3, #8
 8002382:	d00d      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002384:	2b08      	cmp	r3, #8
 8002386:	f200 80e1 	bhi.w	800254c <HAL_RCC_GetSysClockFreq+0x1ec>
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x34>
 800238e:	2b04      	cmp	r3, #4
 8002390:	d003      	beq.n	800239a <HAL_RCC_GetSysClockFreq+0x3a>
 8002392:	e0db      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002394:	4b73      	ldr	r3, [pc, #460]	; (8002564 <HAL_RCC_GetSysClockFreq+0x204>)
 8002396:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002398:	e0db      	b.n	8002552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800239a:	4b73      	ldr	r3, [pc, #460]	; (8002568 <HAL_RCC_GetSysClockFreq+0x208>)
 800239c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800239e:	e0d8      	b.n	8002552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023a0:	4b6f      	ldr	r3, [pc, #444]	; (8002560 <HAL_RCC_GetSysClockFreq+0x200>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023aa:	4b6d      	ldr	r3, [pc, #436]	; (8002560 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d063      	beq.n	800247e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b6:	4b6a      	ldr	r3, [pc, #424]	; (8002560 <HAL_RCC_GetSysClockFreq+0x200>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	099b      	lsrs	r3, r3, #6
 80023bc:	2200      	movs	r2, #0
 80023be:	63bb      	str	r3, [r7, #56]	; 0x38
 80023c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80023c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
 80023ca:	2300      	movs	r3, #0
 80023cc:	637b      	str	r3, [r7, #52]	; 0x34
 80023ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80023d2:	4622      	mov	r2, r4
 80023d4:	462b      	mov	r3, r5
 80023d6:	f04f 0000 	mov.w	r0, #0
 80023da:	f04f 0100 	mov.w	r1, #0
 80023de:	0159      	lsls	r1, r3, #5
 80023e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023e4:	0150      	lsls	r0, r2, #5
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4621      	mov	r1, r4
 80023ec:	1a51      	subs	r1, r2, r1
 80023ee:	6139      	str	r1, [r7, #16]
 80023f0:	4629      	mov	r1, r5
 80023f2:	eb63 0301 	sbc.w	r3, r3, r1
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002404:	4659      	mov	r1, fp
 8002406:	018b      	lsls	r3, r1, #6
 8002408:	4651      	mov	r1, sl
 800240a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800240e:	4651      	mov	r1, sl
 8002410:	018a      	lsls	r2, r1, #6
 8002412:	4651      	mov	r1, sl
 8002414:	ebb2 0801 	subs.w	r8, r2, r1
 8002418:	4659      	mov	r1, fp
 800241a:	eb63 0901 	sbc.w	r9, r3, r1
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800242a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800242e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002432:	4690      	mov	r8, r2
 8002434:	4699      	mov	r9, r3
 8002436:	4623      	mov	r3, r4
 8002438:	eb18 0303 	adds.w	r3, r8, r3
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	462b      	mov	r3, r5
 8002440:	eb49 0303 	adc.w	r3, r9, r3
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002452:	4629      	mov	r1, r5
 8002454:	024b      	lsls	r3, r1, #9
 8002456:	4621      	mov	r1, r4
 8002458:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800245c:	4621      	mov	r1, r4
 800245e:	024a      	lsls	r2, r1, #9
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002466:	2200      	movs	r2, #0
 8002468:	62bb      	str	r3, [r7, #40]	; 0x28
 800246a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800246c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002470:	f7fd ff06 	bl	8000280 <__aeabi_uldivmod>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4613      	mov	r3, r2
 800247a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800247c:	e058      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247e:	4b38      	ldr	r3, [pc, #224]	; (8002560 <HAL_RCC_GetSysClockFreq+0x200>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	099b      	lsrs	r3, r3, #6
 8002484:	2200      	movs	r2, #0
 8002486:	4618      	mov	r0, r3
 8002488:	4611      	mov	r1, r2
 800248a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800248e:	623b      	str	r3, [r7, #32]
 8002490:	2300      	movs	r3, #0
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
 8002494:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002498:	4642      	mov	r2, r8
 800249a:	464b      	mov	r3, r9
 800249c:	f04f 0000 	mov.w	r0, #0
 80024a0:	f04f 0100 	mov.w	r1, #0
 80024a4:	0159      	lsls	r1, r3, #5
 80024a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024aa:	0150      	lsls	r0, r2, #5
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4641      	mov	r1, r8
 80024b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80024b6:	4649      	mov	r1, r9
 80024b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024d0:	ebb2 040a 	subs.w	r4, r2, sl
 80024d4:	eb63 050b 	sbc.w	r5, r3, fp
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	00eb      	lsls	r3, r5, #3
 80024e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024e6:	00e2      	lsls	r2, r4, #3
 80024e8:	4614      	mov	r4, r2
 80024ea:	461d      	mov	r5, r3
 80024ec:	4643      	mov	r3, r8
 80024ee:	18e3      	adds	r3, r4, r3
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	464b      	mov	r3, r9
 80024f4:	eb45 0303 	adc.w	r3, r5, r3
 80024f8:	607b      	str	r3, [r7, #4]
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002506:	4629      	mov	r1, r5
 8002508:	028b      	lsls	r3, r1, #10
 800250a:	4621      	mov	r1, r4
 800250c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002510:	4621      	mov	r1, r4
 8002512:	028a      	lsls	r2, r1, #10
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800251a:	2200      	movs	r2, #0
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	61fa      	str	r2, [r7, #28]
 8002520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002524:	f7fd feac 	bl	8000280 <__aeabi_uldivmod>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4613      	mov	r3, r2
 800252e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_RCC_GetSysClockFreq+0x200>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	0c1b      	lsrs	r3, r3, #16
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	3301      	adds	r3, #1
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002540:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002544:	fbb2 f3f3 	udiv	r3, r2, r3
 8002548:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800254a:	e002      	b.n	8002552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <HAL_RCC_GetSysClockFreq+0x204>)
 800254e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002554:	4618      	mov	r0, r3
 8002556:	3750      	adds	r7, #80	; 0x50
 8002558:	46bd      	mov	sp, r7
 800255a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800
 8002564:	00f42400 	.word	0x00f42400
 8002568:	007a1200 	.word	0x007a1200

0800256c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e07b      	b.n	8002676 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	2b00      	cmp	r3, #0
 8002584:	d108      	bne.n	8002598 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800258e:	d009      	beq.n	80025a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	61da      	str	r2, [r3, #28]
 8002596:	e005      	b.n	80025a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fe fe74 	bl	80012ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002628:	ea42 0103 	orr.w	r1, r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002630:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	0c1b      	lsrs	r3, r3, #16
 8002642:	f003 0104 	and.w	r1, r3, #4
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	f003 0210 	and.w	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	69da      	ldr	r2, [r3, #28]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002664:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b088      	sub	sp, #32
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	603b      	str	r3, [r7, #0]
 800268a:	4613      	mov	r3, r2
 800268c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <HAL_SPI_Transmit+0x22>
 800269c:	2302      	movs	r3, #2
 800269e:	e126      	b.n	80028ee <HAL_SPI_Transmit+0x270>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026a8:	f7fe ffe2 	bl	8001670 <HAL_GetTick>
 80026ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d002      	beq.n	80026c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80026be:	2302      	movs	r3, #2
 80026c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026c2:	e10b      	b.n	80028dc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_SPI_Transmit+0x52>
 80026ca:	88fb      	ldrh	r3, [r7, #6]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d102      	bne.n	80026d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026d4:	e102      	b.n	80028dc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2203      	movs	r2, #3
 80026da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	88fa      	ldrh	r2, [r7, #6]
 80026ee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	88fa      	ldrh	r2, [r7, #6]
 80026f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800271c:	d10f      	bne.n	800273e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800272c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800273c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002748:	2b40      	cmp	r3, #64	; 0x40
 800274a:	d007      	beq.n	800275c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800275a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002764:	d14b      	bne.n	80027fe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <HAL_SPI_Transmit+0xf6>
 800276e:	8afb      	ldrh	r3, [r7, #22]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d13e      	bne.n	80027f2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	881a      	ldrh	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	1c9a      	adds	r2, r3, #2
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800278e:	b29b      	uxth	r3, r3
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002798:	e02b      	b.n	80027f2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d112      	bne.n	80027ce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	881a      	ldrh	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	1c9a      	adds	r2, r3, #2
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	86da      	strh	r2, [r3, #54]	; 0x36
 80027cc:	e011      	b.n	80027f2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027ce:	f7fe ff4f 	bl	8001670 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d803      	bhi.n	80027e6 <HAL_SPI_Transmit+0x168>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027e4:	d102      	bne.n	80027ec <HAL_SPI_Transmit+0x16e>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d102      	bne.n	80027f2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027f0:	e074      	b.n	80028dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1ce      	bne.n	800279a <HAL_SPI_Transmit+0x11c>
 80027fc:	e04c      	b.n	8002898 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <HAL_SPI_Transmit+0x18e>
 8002806:	8afb      	ldrh	r3, [r7, #22]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d140      	bne.n	800288e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	330c      	adds	r3, #12
 8002816:	7812      	ldrb	r2, [r2, #0]
 8002818:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	1c5a      	adds	r2, r3, #1
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002832:	e02c      	b.n	800288e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b02      	cmp	r3, #2
 8002840:	d113      	bne.n	800286a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	330c      	adds	r3, #12
 800284c:	7812      	ldrb	r2, [r2, #0]
 800284e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	86da      	strh	r2, [r3, #54]	; 0x36
 8002868:	e011      	b.n	800288e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800286a:	f7fe ff01 	bl	8001670 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d803      	bhi.n	8002882 <HAL_SPI_Transmit+0x204>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002880:	d102      	bne.n	8002888 <HAL_SPI_Transmit+0x20a>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d102      	bne.n	800288e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800288c:	e026      	b.n	80028dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002892:	b29b      	uxth	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1cd      	bne.n	8002834 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	6839      	ldr	r1, [r7, #0]
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 f9c5 	bl	8002c2c <SPI_EndRxTxTransaction>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2220      	movs	r2, #32
 80028ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10a      	bne.n	80028cc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	613b      	str	r3, [r7, #16]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d002      	beq.n	80028da <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	77fb      	strb	r3, [r7, #31]
 80028d8:	e000      	b.n	80028dc <HAL_SPI_Transmit+0x25e>
  }

error:
 80028da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80028ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3720      	adds	r7, #32
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10e      	bne.n	8002938 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002920:	2b00      	cmp	r3, #0
 8002922:	d009      	beq.n	8002938 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d004      	beq.n	8002938 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	4798      	blx	r3
    return;
 8002936:	e0ce      	b.n	8002ad6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <HAL_SPI_IRQHandler+0x5e>
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002948:	2b00      	cmp	r3, #0
 800294a:	d004      	beq.n	8002956 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4798      	blx	r3
    return;
 8002954:	e0bf      	b.n	8002ad6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <HAL_SPI_IRQHandler+0x7e>
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	2b00      	cmp	r3, #0
 8002968:	d105      	bne.n	8002976 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80b0 	beq.w	8002ad6 <HAL_SPI_IRQHandler+0x1de>
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80aa 	beq.w	8002ad6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002988:	2b00      	cmp	r3, #0
 800298a:	d023      	beq.n	80029d4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b03      	cmp	r3, #3
 8002996:	d011      	beq.n	80029bc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	f043 0204 	orr.w	r2, r3, #4
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	e00b      	b.n	80029d4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029bc:	2300      	movs	r3, #0
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	693b      	ldr	r3, [r7, #16]
        return;
 80029d2:	e080      	b.n	8002ad6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	f003 0320 	and.w	r3, r3, #32
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d014      	beq.n	8002a08 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e2:	f043 0201 	orr.w	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80029ea:	2300      	movs	r3, #0
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00c      	beq.n	8002a2c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	f043 0208 	orr.w	r2, r3, #8
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d04f      	beq.n	8002ad4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002a42:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d104      	bne.n	8002a60 <HAL_SPI_IRQHandler+0x168>
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d034      	beq.n	8002aca <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0203 	bic.w	r2, r2, #3
 8002a6e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d011      	beq.n	8002a9c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7c:	4a17      	ldr	r2, [pc, #92]	; (8002adc <HAL_SPI_IRQHandler+0x1e4>)
 8002a7e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe ff34 	bl	80018f2 <HAL_DMA_Abort_IT>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d016      	beq.n	8002ad2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa8:	4a0c      	ldr	r2, [pc, #48]	; (8002adc <HAL_SPI_IRQHandler+0x1e4>)
 8002aaa:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe ff1e 	bl	80018f2 <HAL_DMA_Abort_IT>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00a      	beq.n	8002ad2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002ac8:	e003      	b.n	8002ad2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f808 	bl	8002ae0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002ad0:	e000      	b.n	8002ad4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002ad2:	bf00      	nop
    return;
 8002ad4:	bf00      	nop
  }
}
 8002ad6:	3720      	adds	r7, #32
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	08002af5 	.word	0x08002af5

08002ae0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b00:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f7ff ffe6 	bl	8002ae0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b2c:	f7fe fda0 	bl	8001670 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	4413      	add	r3, r2
 8002b3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b3c:	f7fe fd98 	bl	8001670 <HAL_GetTick>
 8002b40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b42:	4b39      	ldr	r3, [pc, #228]	; (8002c28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	015b      	lsls	r3, r3, #5
 8002b48:	0d1b      	lsrs	r3, r3, #20
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	fb02 f303 	mul.w	r3, r2, r3
 8002b50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b52:	e054      	b.n	8002bfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b5a:	d050      	beq.n	8002bfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b5c:	f7fe fd88 	bl	8001670 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	69fa      	ldr	r2, [r7, #28]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d902      	bls.n	8002b72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d13d      	bne.n	8002bee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b8a:	d111      	bne.n	8002bb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b94:	d004      	beq.n	8002ba0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9e:	d107      	bne.n	8002bb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb8:	d10f      	bne.n	8002bda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e017      	b.n	8002c1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	4013      	ands	r3, r2
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	bf0c      	ite	eq
 8002c0e:	2301      	moveq	r3, #1
 8002c10:	2300      	movne	r3, #0
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d19b      	bne.n	8002b54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3720      	adds	r7, #32
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000000 	.word	0x20000000

08002c2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c38:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <SPI_EndRxTxTransaction+0x7c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1b      	ldr	r2, [pc, #108]	; (8002cac <SPI_EndRxTxTransaction+0x80>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	0d5b      	lsrs	r3, r3, #21
 8002c44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c48:	fb02 f303 	mul.w	r3, r2, r3
 8002c4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c56:	d112      	bne.n	8002c7e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2180      	movs	r1, #128	; 0x80
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f7ff ff5a 	bl	8002b1c <SPI_WaitFlagStateUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d016      	beq.n	8002c9c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c72:	f043 0220 	orr.w	r2, r3, #32
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e00f      	b.n	8002c9e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c94:	2b80      	cmp	r3, #128	; 0x80
 8002c96:	d0f2      	beq.n	8002c7e <SPI_EndRxTxTransaction+0x52>
 8002c98:	e000      	b.n	8002c9c <SPI_EndRxTxTransaction+0x70>
        break;
 8002c9a:	bf00      	nop
  }

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000000 	.word	0x20000000
 8002cac:	165e9f81 	.word	0x165e9f81

08002cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e041      	b.n	8002d46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fe fc12 	bl	8001500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3304      	adds	r3, #4
 8002cec:	4619      	mov	r1, r3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	f000 f9e6 	bl	80030c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6a1a      	ldr	r2, [r3, #32]
 8002d5c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10f      	bne.n	8002d86 <HAL_TIM_Base_Stop+0x38>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6a1a      	ldr	r2, [r3, #32]
 8002d6c:	f240 4344 	movw	r3, #1092	; 0x444
 8002d70:	4013      	ands	r3, r2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d107      	bne.n	8002d86 <HAL_TIM_Base_Stop+0x38>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 0201 	bic.w	r2, r2, #1
 8002d84:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d001      	beq.n	8002db4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e044      	b.n	8002e3e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1e      	ldr	r2, [pc, #120]	; (8002e4c <HAL_TIM_Base_Start_IT+0xb0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d018      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x6c>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dde:	d013      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x6c>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1a      	ldr	r2, [pc, #104]	; (8002e50 <HAL_TIM_Base_Start_IT+0xb4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00e      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x6c>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a19      	ldr	r2, [pc, #100]	; (8002e54 <HAL_TIM_Base_Start_IT+0xb8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d009      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x6c>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a17      	ldr	r2, [pc, #92]	; (8002e58 <HAL_TIM_Base_Start_IT+0xbc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d004      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x6c>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a16      	ldr	r2, [pc, #88]	; (8002e5c <HAL_TIM_Base_Start_IT+0xc0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d111      	bne.n	8002e2c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	d010      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 0201 	orr.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2a:	e007      	b.n	8002e3c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	40000400 	.word	0x40000400
 8002e54:	40000800 	.word	0x40000800
 8002e58:	40000c00 	.word	0x40000c00
 8002e5c:	40014000 	.word	0x40014000

08002e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d122      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d11b      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f06f 0202 	mvn.w	r2, #2
 8002e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f8ee 	bl	8003084 <HAL_TIM_IC_CaptureCallback>
 8002ea8:	e005      	b.n	8002eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f8e0 	bl	8003070 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 f8f1 	bl	8003098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d122      	bne.n	8002f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d11b      	bne.n	8002f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0204 	mvn.w	r2, #4
 8002ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f8c4 	bl	8003084 <HAL_TIM_IC_CaptureCallback>
 8002efc:	e005      	b.n	8002f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f8b6 	bl	8003070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f8c7 	bl	8003098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d122      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d11b      	bne.n	8002f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0208 	mvn.w	r2, #8
 8002f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2204      	movs	r2, #4
 8002f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f89a 	bl	8003084 <HAL_TIM_IC_CaptureCallback>
 8002f50:	e005      	b.n	8002f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f88c 	bl	8003070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f89d 	bl	8003098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b10      	cmp	r3, #16
 8002f70:	d122      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 0310 	and.w	r3, r3, #16
 8002f7c:	2b10      	cmp	r3, #16
 8002f7e:	d11b      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0210 	mvn.w	r2, #16
 8002f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2208      	movs	r2, #8
 8002f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f870 	bl	8003084 <HAL_TIM_IC_CaptureCallback>
 8002fa4:	e005      	b.n	8002fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f862 	bl	8003070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f873 	bl	8003098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d10e      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d107      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0201 	mvn.w	r2, #1
 8002fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fd ffae 	bl	8000f40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fee:	2b80      	cmp	r3, #128	; 0x80
 8002ff0:	d10e      	bne.n	8003010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffc:	2b80      	cmp	r3, #128	; 0x80
 8002ffe:	d107      	bne.n	8003010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f8e2 	bl	80031d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301a:	2b40      	cmp	r3, #64	; 0x40
 800301c:	d10e      	bne.n	800303c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003028:	2b40      	cmp	r3, #64	; 0x40
 800302a:	d107      	bne.n	800303c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f838 	bl	80030ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b20      	cmp	r3, #32
 8003048:	d10e      	bne.n	8003068 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0320 	and.w	r3, r3, #32
 8003054:	2b20      	cmp	r3, #32
 8003056:	d107      	bne.n	8003068 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0220 	mvn.w	r2, #32
 8003060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f8ac 	bl	80031c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a34      	ldr	r2, [pc, #208]	; (80031a4 <TIM_Base_SetConfig+0xe4>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d00f      	beq.n	80030f8 <TIM_Base_SetConfig+0x38>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030de:	d00b      	beq.n	80030f8 <TIM_Base_SetConfig+0x38>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a31      	ldr	r2, [pc, #196]	; (80031a8 <TIM_Base_SetConfig+0xe8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d007      	beq.n	80030f8 <TIM_Base_SetConfig+0x38>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a30      	ldr	r2, [pc, #192]	; (80031ac <TIM_Base_SetConfig+0xec>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d003      	beq.n	80030f8 <TIM_Base_SetConfig+0x38>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a2f      	ldr	r2, [pc, #188]	; (80031b0 <TIM_Base_SetConfig+0xf0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d108      	bne.n	800310a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a25      	ldr	r2, [pc, #148]	; (80031a4 <TIM_Base_SetConfig+0xe4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d01b      	beq.n	800314a <TIM_Base_SetConfig+0x8a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003118:	d017      	beq.n	800314a <TIM_Base_SetConfig+0x8a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a22      	ldr	r2, [pc, #136]	; (80031a8 <TIM_Base_SetConfig+0xe8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <TIM_Base_SetConfig+0x8a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a21      	ldr	r2, [pc, #132]	; (80031ac <TIM_Base_SetConfig+0xec>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00f      	beq.n	800314a <TIM_Base_SetConfig+0x8a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a20      	ldr	r2, [pc, #128]	; (80031b0 <TIM_Base_SetConfig+0xf0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00b      	beq.n	800314a <TIM_Base_SetConfig+0x8a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a1f      	ldr	r2, [pc, #124]	; (80031b4 <TIM_Base_SetConfig+0xf4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d007      	beq.n	800314a <TIM_Base_SetConfig+0x8a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a1e      	ldr	r2, [pc, #120]	; (80031b8 <TIM_Base_SetConfig+0xf8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d003      	beq.n	800314a <TIM_Base_SetConfig+0x8a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a1d      	ldr	r2, [pc, #116]	; (80031bc <TIM_Base_SetConfig+0xfc>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d108      	bne.n	800315c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a08      	ldr	r2, [pc, #32]	; (80031a4 <TIM_Base_SetConfig+0xe4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d103      	bne.n	8003190 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	615a      	str	r2, [r3, #20]
}
 8003196:	bf00      	nop
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40010000 	.word	0x40010000
 80031a8:	40000400 	.word	0x40000400
 80031ac:	40000800 	.word	0x40000800
 80031b0:	40000c00 	.word	0x40000c00
 80031b4:	40014000 	.word	0x40014000
 80031b8:	40014400 	.word	0x40014400
 80031bc:	40014800 	.word	0x40014800

080031c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <siprintf>:
 80031e8:	b40e      	push	{r1, r2, r3}
 80031ea:	b500      	push	{lr}
 80031ec:	b09c      	sub	sp, #112	; 0x70
 80031ee:	ab1d      	add	r3, sp, #116	; 0x74
 80031f0:	9002      	str	r0, [sp, #8]
 80031f2:	9006      	str	r0, [sp, #24]
 80031f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031f8:	4809      	ldr	r0, [pc, #36]	; (8003220 <siprintf+0x38>)
 80031fa:	9107      	str	r1, [sp, #28]
 80031fc:	9104      	str	r1, [sp, #16]
 80031fe:	4909      	ldr	r1, [pc, #36]	; (8003224 <siprintf+0x3c>)
 8003200:	f853 2b04 	ldr.w	r2, [r3], #4
 8003204:	9105      	str	r1, [sp, #20]
 8003206:	6800      	ldr	r0, [r0, #0]
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	a902      	add	r1, sp, #8
 800320c:	f000 f89a 	bl	8003344 <_svfiprintf_r>
 8003210:	9b02      	ldr	r3, [sp, #8]
 8003212:	2200      	movs	r2, #0
 8003214:	701a      	strb	r2, [r3, #0]
 8003216:	b01c      	add	sp, #112	; 0x70
 8003218:	f85d eb04 	ldr.w	lr, [sp], #4
 800321c:	b003      	add	sp, #12
 800321e:	4770      	bx	lr
 8003220:	20000058 	.word	0x20000058
 8003224:	ffff0208 	.word	0xffff0208

08003228 <memset>:
 8003228:	4402      	add	r2, r0
 800322a:	4603      	mov	r3, r0
 800322c:	4293      	cmp	r3, r2
 800322e:	d100      	bne.n	8003232 <memset+0xa>
 8003230:	4770      	bx	lr
 8003232:	f803 1b01 	strb.w	r1, [r3], #1
 8003236:	e7f9      	b.n	800322c <memset+0x4>

08003238 <__errno>:
 8003238:	4b01      	ldr	r3, [pc, #4]	; (8003240 <__errno+0x8>)
 800323a:	6818      	ldr	r0, [r3, #0]
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	20000058 	.word	0x20000058

08003244 <__libc_init_array>:
 8003244:	b570      	push	{r4, r5, r6, lr}
 8003246:	4d0d      	ldr	r5, [pc, #52]	; (800327c <__libc_init_array+0x38>)
 8003248:	4c0d      	ldr	r4, [pc, #52]	; (8003280 <__libc_init_array+0x3c>)
 800324a:	1b64      	subs	r4, r4, r5
 800324c:	10a4      	asrs	r4, r4, #2
 800324e:	2600      	movs	r6, #0
 8003250:	42a6      	cmp	r6, r4
 8003252:	d109      	bne.n	8003268 <__libc_init_array+0x24>
 8003254:	4d0b      	ldr	r5, [pc, #44]	; (8003284 <__libc_init_array+0x40>)
 8003256:	4c0c      	ldr	r4, [pc, #48]	; (8003288 <__libc_init_array+0x44>)
 8003258:	f000 fc6a 	bl	8003b30 <_init>
 800325c:	1b64      	subs	r4, r4, r5
 800325e:	10a4      	asrs	r4, r4, #2
 8003260:	2600      	movs	r6, #0
 8003262:	42a6      	cmp	r6, r4
 8003264:	d105      	bne.n	8003272 <__libc_init_array+0x2e>
 8003266:	bd70      	pop	{r4, r5, r6, pc}
 8003268:	f855 3b04 	ldr.w	r3, [r5], #4
 800326c:	4798      	blx	r3
 800326e:	3601      	adds	r6, #1
 8003270:	e7ee      	b.n	8003250 <__libc_init_array+0xc>
 8003272:	f855 3b04 	ldr.w	r3, [r5], #4
 8003276:	4798      	blx	r3
 8003278:	3601      	adds	r6, #1
 800327a:	e7f2      	b.n	8003262 <__libc_init_array+0x1e>
 800327c:	080042e8 	.word	0x080042e8
 8003280:	080042e8 	.word	0x080042e8
 8003284:	080042e8 	.word	0x080042e8
 8003288:	080042ec 	.word	0x080042ec

0800328c <__retarget_lock_acquire_recursive>:
 800328c:	4770      	bx	lr

0800328e <__retarget_lock_release_recursive>:
 800328e:	4770      	bx	lr

08003290 <__ssputs_r>:
 8003290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003294:	688e      	ldr	r6, [r1, #8]
 8003296:	461f      	mov	r7, r3
 8003298:	42be      	cmp	r6, r7
 800329a:	680b      	ldr	r3, [r1, #0]
 800329c:	4682      	mov	sl, r0
 800329e:	460c      	mov	r4, r1
 80032a0:	4690      	mov	r8, r2
 80032a2:	d82c      	bhi.n	80032fe <__ssputs_r+0x6e>
 80032a4:	898a      	ldrh	r2, [r1, #12]
 80032a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032aa:	d026      	beq.n	80032fa <__ssputs_r+0x6a>
 80032ac:	6965      	ldr	r5, [r4, #20]
 80032ae:	6909      	ldr	r1, [r1, #16]
 80032b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032b4:	eba3 0901 	sub.w	r9, r3, r1
 80032b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032bc:	1c7b      	adds	r3, r7, #1
 80032be:	444b      	add	r3, r9
 80032c0:	106d      	asrs	r5, r5, #1
 80032c2:	429d      	cmp	r5, r3
 80032c4:	bf38      	it	cc
 80032c6:	461d      	movcc	r5, r3
 80032c8:	0553      	lsls	r3, r2, #21
 80032ca:	d527      	bpl.n	800331c <__ssputs_r+0x8c>
 80032cc:	4629      	mov	r1, r5
 80032ce:	f000 f957 	bl	8003580 <_malloc_r>
 80032d2:	4606      	mov	r6, r0
 80032d4:	b360      	cbz	r0, 8003330 <__ssputs_r+0xa0>
 80032d6:	6921      	ldr	r1, [r4, #16]
 80032d8:	464a      	mov	r2, r9
 80032da:	f000 fbc7 	bl	8003a6c <memcpy>
 80032de:	89a3      	ldrh	r3, [r4, #12]
 80032e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e8:	81a3      	strh	r3, [r4, #12]
 80032ea:	6126      	str	r6, [r4, #16]
 80032ec:	6165      	str	r5, [r4, #20]
 80032ee:	444e      	add	r6, r9
 80032f0:	eba5 0509 	sub.w	r5, r5, r9
 80032f4:	6026      	str	r6, [r4, #0]
 80032f6:	60a5      	str	r5, [r4, #8]
 80032f8:	463e      	mov	r6, r7
 80032fa:	42be      	cmp	r6, r7
 80032fc:	d900      	bls.n	8003300 <__ssputs_r+0x70>
 80032fe:	463e      	mov	r6, r7
 8003300:	6820      	ldr	r0, [r4, #0]
 8003302:	4632      	mov	r2, r6
 8003304:	4641      	mov	r1, r8
 8003306:	f000 fb86 	bl	8003a16 <memmove>
 800330a:	68a3      	ldr	r3, [r4, #8]
 800330c:	1b9b      	subs	r3, r3, r6
 800330e:	60a3      	str	r3, [r4, #8]
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	4433      	add	r3, r6
 8003314:	6023      	str	r3, [r4, #0]
 8003316:	2000      	movs	r0, #0
 8003318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800331c:	462a      	mov	r2, r5
 800331e:	f000 fb4b 	bl	80039b8 <_realloc_r>
 8003322:	4606      	mov	r6, r0
 8003324:	2800      	cmp	r0, #0
 8003326:	d1e0      	bne.n	80032ea <__ssputs_r+0x5a>
 8003328:	6921      	ldr	r1, [r4, #16]
 800332a:	4650      	mov	r0, sl
 800332c:	f000 fbac 	bl	8003a88 <_free_r>
 8003330:	230c      	movs	r3, #12
 8003332:	f8ca 3000 	str.w	r3, [sl]
 8003336:	89a3      	ldrh	r3, [r4, #12]
 8003338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800333c:	81a3      	strh	r3, [r4, #12]
 800333e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003342:	e7e9      	b.n	8003318 <__ssputs_r+0x88>

08003344 <_svfiprintf_r>:
 8003344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003348:	4698      	mov	r8, r3
 800334a:	898b      	ldrh	r3, [r1, #12]
 800334c:	061b      	lsls	r3, r3, #24
 800334e:	b09d      	sub	sp, #116	; 0x74
 8003350:	4607      	mov	r7, r0
 8003352:	460d      	mov	r5, r1
 8003354:	4614      	mov	r4, r2
 8003356:	d50e      	bpl.n	8003376 <_svfiprintf_r+0x32>
 8003358:	690b      	ldr	r3, [r1, #16]
 800335a:	b963      	cbnz	r3, 8003376 <_svfiprintf_r+0x32>
 800335c:	2140      	movs	r1, #64	; 0x40
 800335e:	f000 f90f 	bl	8003580 <_malloc_r>
 8003362:	6028      	str	r0, [r5, #0]
 8003364:	6128      	str	r0, [r5, #16]
 8003366:	b920      	cbnz	r0, 8003372 <_svfiprintf_r+0x2e>
 8003368:	230c      	movs	r3, #12
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003370:	e0d0      	b.n	8003514 <_svfiprintf_r+0x1d0>
 8003372:	2340      	movs	r3, #64	; 0x40
 8003374:	616b      	str	r3, [r5, #20]
 8003376:	2300      	movs	r3, #0
 8003378:	9309      	str	r3, [sp, #36]	; 0x24
 800337a:	2320      	movs	r3, #32
 800337c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003380:	f8cd 800c 	str.w	r8, [sp, #12]
 8003384:	2330      	movs	r3, #48	; 0x30
 8003386:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800352c <_svfiprintf_r+0x1e8>
 800338a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800338e:	f04f 0901 	mov.w	r9, #1
 8003392:	4623      	mov	r3, r4
 8003394:	469a      	mov	sl, r3
 8003396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800339a:	b10a      	cbz	r2, 80033a0 <_svfiprintf_r+0x5c>
 800339c:	2a25      	cmp	r2, #37	; 0x25
 800339e:	d1f9      	bne.n	8003394 <_svfiprintf_r+0x50>
 80033a0:	ebba 0b04 	subs.w	fp, sl, r4
 80033a4:	d00b      	beq.n	80033be <_svfiprintf_r+0x7a>
 80033a6:	465b      	mov	r3, fp
 80033a8:	4622      	mov	r2, r4
 80033aa:	4629      	mov	r1, r5
 80033ac:	4638      	mov	r0, r7
 80033ae:	f7ff ff6f 	bl	8003290 <__ssputs_r>
 80033b2:	3001      	adds	r0, #1
 80033b4:	f000 80a9 	beq.w	800350a <_svfiprintf_r+0x1c6>
 80033b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033ba:	445a      	add	r2, fp
 80033bc:	9209      	str	r2, [sp, #36]	; 0x24
 80033be:	f89a 3000 	ldrb.w	r3, [sl]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 80a1 	beq.w	800350a <_svfiprintf_r+0x1c6>
 80033c8:	2300      	movs	r3, #0
 80033ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033d2:	f10a 0a01 	add.w	sl, sl, #1
 80033d6:	9304      	str	r3, [sp, #16]
 80033d8:	9307      	str	r3, [sp, #28]
 80033da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033de:	931a      	str	r3, [sp, #104]	; 0x68
 80033e0:	4654      	mov	r4, sl
 80033e2:	2205      	movs	r2, #5
 80033e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033e8:	4850      	ldr	r0, [pc, #320]	; (800352c <_svfiprintf_r+0x1e8>)
 80033ea:	f7fc fef9 	bl	80001e0 <memchr>
 80033ee:	9a04      	ldr	r2, [sp, #16]
 80033f0:	b9d8      	cbnz	r0, 800342a <_svfiprintf_r+0xe6>
 80033f2:	06d0      	lsls	r0, r2, #27
 80033f4:	bf44      	itt	mi
 80033f6:	2320      	movmi	r3, #32
 80033f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033fc:	0711      	lsls	r1, r2, #28
 80033fe:	bf44      	itt	mi
 8003400:	232b      	movmi	r3, #43	; 0x2b
 8003402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003406:	f89a 3000 	ldrb.w	r3, [sl]
 800340a:	2b2a      	cmp	r3, #42	; 0x2a
 800340c:	d015      	beq.n	800343a <_svfiprintf_r+0xf6>
 800340e:	9a07      	ldr	r2, [sp, #28]
 8003410:	4654      	mov	r4, sl
 8003412:	2000      	movs	r0, #0
 8003414:	f04f 0c0a 	mov.w	ip, #10
 8003418:	4621      	mov	r1, r4
 800341a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800341e:	3b30      	subs	r3, #48	; 0x30
 8003420:	2b09      	cmp	r3, #9
 8003422:	d94d      	bls.n	80034c0 <_svfiprintf_r+0x17c>
 8003424:	b1b0      	cbz	r0, 8003454 <_svfiprintf_r+0x110>
 8003426:	9207      	str	r2, [sp, #28]
 8003428:	e014      	b.n	8003454 <_svfiprintf_r+0x110>
 800342a:	eba0 0308 	sub.w	r3, r0, r8
 800342e:	fa09 f303 	lsl.w	r3, r9, r3
 8003432:	4313      	orrs	r3, r2
 8003434:	9304      	str	r3, [sp, #16]
 8003436:	46a2      	mov	sl, r4
 8003438:	e7d2      	b.n	80033e0 <_svfiprintf_r+0x9c>
 800343a:	9b03      	ldr	r3, [sp, #12]
 800343c:	1d19      	adds	r1, r3, #4
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	9103      	str	r1, [sp, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	bfbb      	ittet	lt
 8003446:	425b      	neglt	r3, r3
 8003448:	f042 0202 	orrlt.w	r2, r2, #2
 800344c:	9307      	strge	r3, [sp, #28]
 800344e:	9307      	strlt	r3, [sp, #28]
 8003450:	bfb8      	it	lt
 8003452:	9204      	strlt	r2, [sp, #16]
 8003454:	7823      	ldrb	r3, [r4, #0]
 8003456:	2b2e      	cmp	r3, #46	; 0x2e
 8003458:	d10c      	bne.n	8003474 <_svfiprintf_r+0x130>
 800345a:	7863      	ldrb	r3, [r4, #1]
 800345c:	2b2a      	cmp	r3, #42	; 0x2a
 800345e:	d134      	bne.n	80034ca <_svfiprintf_r+0x186>
 8003460:	9b03      	ldr	r3, [sp, #12]
 8003462:	1d1a      	adds	r2, r3, #4
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	9203      	str	r2, [sp, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	bfb8      	it	lt
 800346c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003470:	3402      	adds	r4, #2
 8003472:	9305      	str	r3, [sp, #20]
 8003474:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800353c <_svfiprintf_r+0x1f8>
 8003478:	7821      	ldrb	r1, [r4, #0]
 800347a:	2203      	movs	r2, #3
 800347c:	4650      	mov	r0, sl
 800347e:	f7fc feaf 	bl	80001e0 <memchr>
 8003482:	b138      	cbz	r0, 8003494 <_svfiprintf_r+0x150>
 8003484:	9b04      	ldr	r3, [sp, #16]
 8003486:	eba0 000a 	sub.w	r0, r0, sl
 800348a:	2240      	movs	r2, #64	; 0x40
 800348c:	4082      	lsls	r2, r0
 800348e:	4313      	orrs	r3, r2
 8003490:	3401      	adds	r4, #1
 8003492:	9304      	str	r3, [sp, #16]
 8003494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003498:	4825      	ldr	r0, [pc, #148]	; (8003530 <_svfiprintf_r+0x1ec>)
 800349a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800349e:	2206      	movs	r2, #6
 80034a0:	f7fc fe9e 	bl	80001e0 <memchr>
 80034a4:	2800      	cmp	r0, #0
 80034a6:	d038      	beq.n	800351a <_svfiprintf_r+0x1d6>
 80034a8:	4b22      	ldr	r3, [pc, #136]	; (8003534 <_svfiprintf_r+0x1f0>)
 80034aa:	bb1b      	cbnz	r3, 80034f4 <_svfiprintf_r+0x1b0>
 80034ac:	9b03      	ldr	r3, [sp, #12]
 80034ae:	3307      	adds	r3, #7
 80034b0:	f023 0307 	bic.w	r3, r3, #7
 80034b4:	3308      	adds	r3, #8
 80034b6:	9303      	str	r3, [sp, #12]
 80034b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034ba:	4433      	add	r3, r6
 80034bc:	9309      	str	r3, [sp, #36]	; 0x24
 80034be:	e768      	b.n	8003392 <_svfiprintf_r+0x4e>
 80034c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80034c4:	460c      	mov	r4, r1
 80034c6:	2001      	movs	r0, #1
 80034c8:	e7a6      	b.n	8003418 <_svfiprintf_r+0xd4>
 80034ca:	2300      	movs	r3, #0
 80034cc:	3401      	adds	r4, #1
 80034ce:	9305      	str	r3, [sp, #20]
 80034d0:	4619      	mov	r1, r3
 80034d2:	f04f 0c0a 	mov.w	ip, #10
 80034d6:	4620      	mov	r0, r4
 80034d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034dc:	3a30      	subs	r2, #48	; 0x30
 80034de:	2a09      	cmp	r2, #9
 80034e0:	d903      	bls.n	80034ea <_svfiprintf_r+0x1a6>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0c6      	beq.n	8003474 <_svfiprintf_r+0x130>
 80034e6:	9105      	str	r1, [sp, #20]
 80034e8:	e7c4      	b.n	8003474 <_svfiprintf_r+0x130>
 80034ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80034ee:	4604      	mov	r4, r0
 80034f0:	2301      	movs	r3, #1
 80034f2:	e7f0      	b.n	80034d6 <_svfiprintf_r+0x192>
 80034f4:	ab03      	add	r3, sp, #12
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	462a      	mov	r2, r5
 80034fa:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <_svfiprintf_r+0x1f4>)
 80034fc:	a904      	add	r1, sp, #16
 80034fe:	4638      	mov	r0, r7
 8003500:	f3af 8000 	nop.w
 8003504:	1c42      	adds	r2, r0, #1
 8003506:	4606      	mov	r6, r0
 8003508:	d1d6      	bne.n	80034b8 <_svfiprintf_r+0x174>
 800350a:	89ab      	ldrh	r3, [r5, #12]
 800350c:	065b      	lsls	r3, r3, #25
 800350e:	f53f af2d 	bmi.w	800336c <_svfiprintf_r+0x28>
 8003512:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003514:	b01d      	add	sp, #116	; 0x74
 8003516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800351a:	ab03      	add	r3, sp, #12
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	462a      	mov	r2, r5
 8003520:	4b05      	ldr	r3, [pc, #20]	; (8003538 <_svfiprintf_r+0x1f4>)
 8003522:	a904      	add	r1, sp, #16
 8003524:	4638      	mov	r0, r7
 8003526:	f000 f919 	bl	800375c <_printf_i>
 800352a:	e7eb      	b.n	8003504 <_svfiprintf_r+0x1c0>
 800352c:	080042ad 	.word	0x080042ad
 8003530:	080042b7 	.word	0x080042b7
 8003534:	00000000 	.word	0x00000000
 8003538:	08003291 	.word	0x08003291
 800353c:	080042b3 	.word	0x080042b3

08003540 <sbrk_aligned>:
 8003540:	b570      	push	{r4, r5, r6, lr}
 8003542:	4e0e      	ldr	r6, [pc, #56]	; (800357c <sbrk_aligned+0x3c>)
 8003544:	460c      	mov	r4, r1
 8003546:	6831      	ldr	r1, [r6, #0]
 8003548:	4605      	mov	r5, r0
 800354a:	b911      	cbnz	r1, 8003552 <sbrk_aligned+0x12>
 800354c:	f000 fa7e 	bl	8003a4c <_sbrk_r>
 8003550:	6030      	str	r0, [r6, #0]
 8003552:	4621      	mov	r1, r4
 8003554:	4628      	mov	r0, r5
 8003556:	f000 fa79 	bl	8003a4c <_sbrk_r>
 800355a:	1c43      	adds	r3, r0, #1
 800355c:	d00a      	beq.n	8003574 <sbrk_aligned+0x34>
 800355e:	1cc4      	adds	r4, r0, #3
 8003560:	f024 0403 	bic.w	r4, r4, #3
 8003564:	42a0      	cmp	r0, r4
 8003566:	d007      	beq.n	8003578 <sbrk_aligned+0x38>
 8003568:	1a21      	subs	r1, r4, r0
 800356a:	4628      	mov	r0, r5
 800356c:	f000 fa6e 	bl	8003a4c <_sbrk_r>
 8003570:	3001      	adds	r0, #1
 8003572:	d101      	bne.n	8003578 <sbrk_aligned+0x38>
 8003574:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003578:	4620      	mov	r0, r4
 800357a:	bd70      	pop	{r4, r5, r6, pc}
 800357c:	20000498 	.word	0x20000498

08003580 <_malloc_r>:
 8003580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003584:	1ccd      	adds	r5, r1, #3
 8003586:	f025 0503 	bic.w	r5, r5, #3
 800358a:	3508      	adds	r5, #8
 800358c:	2d0c      	cmp	r5, #12
 800358e:	bf38      	it	cc
 8003590:	250c      	movcc	r5, #12
 8003592:	2d00      	cmp	r5, #0
 8003594:	4607      	mov	r7, r0
 8003596:	db01      	blt.n	800359c <_malloc_r+0x1c>
 8003598:	42a9      	cmp	r1, r5
 800359a:	d905      	bls.n	80035a8 <_malloc_r+0x28>
 800359c:	230c      	movs	r3, #12
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	2600      	movs	r6, #0
 80035a2:	4630      	mov	r0, r6
 80035a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800367c <_malloc_r+0xfc>
 80035ac:	f000 f9f8 	bl	80039a0 <__malloc_lock>
 80035b0:	f8d8 3000 	ldr.w	r3, [r8]
 80035b4:	461c      	mov	r4, r3
 80035b6:	bb5c      	cbnz	r4, 8003610 <_malloc_r+0x90>
 80035b8:	4629      	mov	r1, r5
 80035ba:	4638      	mov	r0, r7
 80035bc:	f7ff ffc0 	bl	8003540 <sbrk_aligned>
 80035c0:	1c43      	adds	r3, r0, #1
 80035c2:	4604      	mov	r4, r0
 80035c4:	d155      	bne.n	8003672 <_malloc_r+0xf2>
 80035c6:	f8d8 4000 	ldr.w	r4, [r8]
 80035ca:	4626      	mov	r6, r4
 80035cc:	2e00      	cmp	r6, #0
 80035ce:	d145      	bne.n	800365c <_malloc_r+0xdc>
 80035d0:	2c00      	cmp	r4, #0
 80035d2:	d048      	beq.n	8003666 <_malloc_r+0xe6>
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	4631      	mov	r1, r6
 80035d8:	4638      	mov	r0, r7
 80035da:	eb04 0903 	add.w	r9, r4, r3
 80035de:	f000 fa35 	bl	8003a4c <_sbrk_r>
 80035e2:	4581      	cmp	r9, r0
 80035e4:	d13f      	bne.n	8003666 <_malloc_r+0xe6>
 80035e6:	6821      	ldr	r1, [r4, #0]
 80035e8:	1a6d      	subs	r5, r5, r1
 80035ea:	4629      	mov	r1, r5
 80035ec:	4638      	mov	r0, r7
 80035ee:	f7ff ffa7 	bl	8003540 <sbrk_aligned>
 80035f2:	3001      	adds	r0, #1
 80035f4:	d037      	beq.n	8003666 <_malloc_r+0xe6>
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	442b      	add	r3, r5
 80035fa:	6023      	str	r3, [r4, #0]
 80035fc:	f8d8 3000 	ldr.w	r3, [r8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d038      	beq.n	8003676 <_malloc_r+0xf6>
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	42a2      	cmp	r2, r4
 8003608:	d12b      	bne.n	8003662 <_malloc_r+0xe2>
 800360a:	2200      	movs	r2, #0
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	e00f      	b.n	8003630 <_malloc_r+0xb0>
 8003610:	6822      	ldr	r2, [r4, #0]
 8003612:	1b52      	subs	r2, r2, r5
 8003614:	d41f      	bmi.n	8003656 <_malloc_r+0xd6>
 8003616:	2a0b      	cmp	r2, #11
 8003618:	d917      	bls.n	800364a <_malloc_r+0xca>
 800361a:	1961      	adds	r1, r4, r5
 800361c:	42a3      	cmp	r3, r4
 800361e:	6025      	str	r5, [r4, #0]
 8003620:	bf18      	it	ne
 8003622:	6059      	strne	r1, [r3, #4]
 8003624:	6863      	ldr	r3, [r4, #4]
 8003626:	bf08      	it	eq
 8003628:	f8c8 1000 	streq.w	r1, [r8]
 800362c:	5162      	str	r2, [r4, r5]
 800362e:	604b      	str	r3, [r1, #4]
 8003630:	4638      	mov	r0, r7
 8003632:	f104 060b 	add.w	r6, r4, #11
 8003636:	f000 f9b9 	bl	80039ac <__malloc_unlock>
 800363a:	f026 0607 	bic.w	r6, r6, #7
 800363e:	1d23      	adds	r3, r4, #4
 8003640:	1af2      	subs	r2, r6, r3
 8003642:	d0ae      	beq.n	80035a2 <_malloc_r+0x22>
 8003644:	1b9b      	subs	r3, r3, r6
 8003646:	50a3      	str	r3, [r4, r2]
 8003648:	e7ab      	b.n	80035a2 <_malloc_r+0x22>
 800364a:	42a3      	cmp	r3, r4
 800364c:	6862      	ldr	r2, [r4, #4]
 800364e:	d1dd      	bne.n	800360c <_malloc_r+0x8c>
 8003650:	f8c8 2000 	str.w	r2, [r8]
 8003654:	e7ec      	b.n	8003630 <_malloc_r+0xb0>
 8003656:	4623      	mov	r3, r4
 8003658:	6864      	ldr	r4, [r4, #4]
 800365a:	e7ac      	b.n	80035b6 <_malloc_r+0x36>
 800365c:	4634      	mov	r4, r6
 800365e:	6876      	ldr	r6, [r6, #4]
 8003660:	e7b4      	b.n	80035cc <_malloc_r+0x4c>
 8003662:	4613      	mov	r3, r2
 8003664:	e7cc      	b.n	8003600 <_malloc_r+0x80>
 8003666:	230c      	movs	r3, #12
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	4638      	mov	r0, r7
 800366c:	f000 f99e 	bl	80039ac <__malloc_unlock>
 8003670:	e797      	b.n	80035a2 <_malloc_r+0x22>
 8003672:	6025      	str	r5, [r4, #0]
 8003674:	e7dc      	b.n	8003630 <_malloc_r+0xb0>
 8003676:	605b      	str	r3, [r3, #4]
 8003678:	deff      	udf	#255	; 0xff
 800367a:	bf00      	nop
 800367c:	20000494 	.word	0x20000494

08003680 <_printf_common>:
 8003680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003684:	4616      	mov	r6, r2
 8003686:	4699      	mov	r9, r3
 8003688:	688a      	ldr	r2, [r1, #8]
 800368a:	690b      	ldr	r3, [r1, #16]
 800368c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003690:	4293      	cmp	r3, r2
 8003692:	bfb8      	it	lt
 8003694:	4613      	movlt	r3, r2
 8003696:	6033      	str	r3, [r6, #0]
 8003698:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800369c:	4607      	mov	r7, r0
 800369e:	460c      	mov	r4, r1
 80036a0:	b10a      	cbz	r2, 80036a6 <_printf_common+0x26>
 80036a2:	3301      	adds	r3, #1
 80036a4:	6033      	str	r3, [r6, #0]
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	0699      	lsls	r1, r3, #26
 80036aa:	bf42      	ittt	mi
 80036ac:	6833      	ldrmi	r3, [r6, #0]
 80036ae:	3302      	addmi	r3, #2
 80036b0:	6033      	strmi	r3, [r6, #0]
 80036b2:	6825      	ldr	r5, [r4, #0]
 80036b4:	f015 0506 	ands.w	r5, r5, #6
 80036b8:	d106      	bne.n	80036c8 <_printf_common+0x48>
 80036ba:	f104 0a19 	add.w	sl, r4, #25
 80036be:	68e3      	ldr	r3, [r4, #12]
 80036c0:	6832      	ldr	r2, [r6, #0]
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	42ab      	cmp	r3, r5
 80036c6:	dc26      	bgt.n	8003716 <_printf_common+0x96>
 80036c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036cc:	1e13      	subs	r3, r2, #0
 80036ce:	6822      	ldr	r2, [r4, #0]
 80036d0:	bf18      	it	ne
 80036d2:	2301      	movne	r3, #1
 80036d4:	0692      	lsls	r2, r2, #26
 80036d6:	d42b      	bmi.n	8003730 <_printf_common+0xb0>
 80036d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036dc:	4649      	mov	r1, r9
 80036de:	4638      	mov	r0, r7
 80036e0:	47c0      	blx	r8
 80036e2:	3001      	adds	r0, #1
 80036e4:	d01e      	beq.n	8003724 <_printf_common+0xa4>
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	6922      	ldr	r2, [r4, #16]
 80036ea:	f003 0306 	and.w	r3, r3, #6
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	bf02      	ittt	eq
 80036f2:	68e5      	ldreq	r5, [r4, #12]
 80036f4:	6833      	ldreq	r3, [r6, #0]
 80036f6:	1aed      	subeq	r5, r5, r3
 80036f8:	68a3      	ldr	r3, [r4, #8]
 80036fa:	bf0c      	ite	eq
 80036fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003700:	2500      	movne	r5, #0
 8003702:	4293      	cmp	r3, r2
 8003704:	bfc4      	itt	gt
 8003706:	1a9b      	subgt	r3, r3, r2
 8003708:	18ed      	addgt	r5, r5, r3
 800370a:	2600      	movs	r6, #0
 800370c:	341a      	adds	r4, #26
 800370e:	42b5      	cmp	r5, r6
 8003710:	d11a      	bne.n	8003748 <_printf_common+0xc8>
 8003712:	2000      	movs	r0, #0
 8003714:	e008      	b.n	8003728 <_printf_common+0xa8>
 8003716:	2301      	movs	r3, #1
 8003718:	4652      	mov	r2, sl
 800371a:	4649      	mov	r1, r9
 800371c:	4638      	mov	r0, r7
 800371e:	47c0      	blx	r8
 8003720:	3001      	adds	r0, #1
 8003722:	d103      	bne.n	800372c <_printf_common+0xac>
 8003724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800372c:	3501      	adds	r5, #1
 800372e:	e7c6      	b.n	80036be <_printf_common+0x3e>
 8003730:	18e1      	adds	r1, r4, r3
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	2030      	movs	r0, #48	; 0x30
 8003736:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800373a:	4422      	add	r2, r4
 800373c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003740:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003744:	3302      	adds	r3, #2
 8003746:	e7c7      	b.n	80036d8 <_printf_common+0x58>
 8003748:	2301      	movs	r3, #1
 800374a:	4622      	mov	r2, r4
 800374c:	4649      	mov	r1, r9
 800374e:	4638      	mov	r0, r7
 8003750:	47c0      	blx	r8
 8003752:	3001      	adds	r0, #1
 8003754:	d0e6      	beq.n	8003724 <_printf_common+0xa4>
 8003756:	3601      	adds	r6, #1
 8003758:	e7d9      	b.n	800370e <_printf_common+0x8e>
	...

0800375c <_printf_i>:
 800375c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003760:	7e0f      	ldrb	r7, [r1, #24]
 8003762:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003764:	2f78      	cmp	r7, #120	; 0x78
 8003766:	4691      	mov	r9, r2
 8003768:	4680      	mov	r8, r0
 800376a:	460c      	mov	r4, r1
 800376c:	469a      	mov	sl, r3
 800376e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003772:	d807      	bhi.n	8003784 <_printf_i+0x28>
 8003774:	2f62      	cmp	r7, #98	; 0x62
 8003776:	d80a      	bhi.n	800378e <_printf_i+0x32>
 8003778:	2f00      	cmp	r7, #0
 800377a:	f000 80d4 	beq.w	8003926 <_printf_i+0x1ca>
 800377e:	2f58      	cmp	r7, #88	; 0x58
 8003780:	f000 80c0 	beq.w	8003904 <_printf_i+0x1a8>
 8003784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003788:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800378c:	e03a      	b.n	8003804 <_printf_i+0xa8>
 800378e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003792:	2b15      	cmp	r3, #21
 8003794:	d8f6      	bhi.n	8003784 <_printf_i+0x28>
 8003796:	a101      	add	r1, pc, #4	; (adr r1, 800379c <_printf_i+0x40>)
 8003798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800379c:	080037f5 	.word	0x080037f5
 80037a0:	08003809 	.word	0x08003809
 80037a4:	08003785 	.word	0x08003785
 80037a8:	08003785 	.word	0x08003785
 80037ac:	08003785 	.word	0x08003785
 80037b0:	08003785 	.word	0x08003785
 80037b4:	08003809 	.word	0x08003809
 80037b8:	08003785 	.word	0x08003785
 80037bc:	08003785 	.word	0x08003785
 80037c0:	08003785 	.word	0x08003785
 80037c4:	08003785 	.word	0x08003785
 80037c8:	0800390d 	.word	0x0800390d
 80037cc:	08003835 	.word	0x08003835
 80037d0:	080038c7 	.word	0x080038c7
 80037d4:	08003785 	.word	0x08003785
 80037d8:	08003785 	.word	0x08003785
 80037dc:	0800392f 	.word	0x0800392f
 80037e0:	08003785 	.word	0x08003785
 80037e4:	08003835 	.word	0x08003835
 80037e8:	08003785 	.word	0x08003785
 80037ec:	08003785 	.word	0x08003785
 80037f0:	080038cf 	.word	0x080038cf
 80037f4:	682b      	ldr	r3, [r5, #0]
 80037f6:	1d1a      	adds	r2, r3, #4
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	602a      	str	r2, [r5, #0]
 80037fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003804:	2301      	movs	r3, #1
 8003806:	e09f      	b.n	8003948 <_printf_i+0x1ec>
 8003808:	6820      	ldr	r0, [r4, #0]
 800380a:	682b      	ldr	r3, [r5, #0]
 800380c:	0607      	lsls	r7, r0, #24
 800380e:	f103 0104 	add.w	r1, r3, #4
 8003812:	6029      	str	r1, [r5, #0]
 8003814:	d501      	bpl.n	800381a <_printf_i+0xbe>
 8003816:	681e      	ldr	r6, [r3, #0]
 8003818:	e003      	b.n	8003822 <_printf_i+0xc6>
 800381a:	0646      	lsls	r6, r0, #25
 800381c:	d5fb      	bpl.n	8003816 <_printf_i+0xba>
 800381e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003822:	2e00      	cmp	r6, #0
 8003824:	da03      	bge.n	800382e <_printf_i+0xd2>
 8003826:	232d      	movs	r3, #45	; 0x2d
 8003828:	4276      	negs	r6, r6
 800382a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800382e:	485a      	ldr	r0, [pc, #360]	; (8003998 <_printf_i+0x23c>)
 8003830:	230a      	movs	r3, #10
 8003832:	e012      	b.n	800385a <_printf_i+0xfe>
 8003834:	682b      	ldr	r3, [r5, #0]
 8003836:	6820      	ldr	r0, [r4, #0]
 8003838:	1d19      	adds	r1, r3, #4
 800383a:	6029      	str	r1, [r5, #0]
 800383c:	0605      	lsls	r5, r0, #24
 800383e:	d501      	bpl.n	8003844 <_printf_i+0xe8>
 8003840:	681e      	ldr	r6, [r3, #0]
 8003842:	e002      	b.n	800384a <_printf_i+0xee>
 8003844:	0641      	lsls	r1, r0, #25
 8003846:	d5fb      	bpl.n	8003840 <_printf_i+0xe4>
 8003848:	881e      	ldrh	r6, [r3, #0]
 800384a:	4853      	ldr	r0, [pc, #332]	; (8003998 <_printf_i+0x23c>)
 800384c:	2f6f      	cmp	r7, #111	; 0x6f
 800384e:	bf0c      	ite	eq
 8003850:	2308      	moveq	r3, #8
 8003852:	230a      	movne	r3, #10
 8003854:	2100      	movs	r1, #0
 8003856:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800385a:	6865      	ldr	r5, [r4, #4]
 800385c:	60a5      	str	r5, [r4, #8]
 800385e:	2d00      	cmp	r5, #0
 8003860:	bfa2      	ittt	ge
 8003862:	6821      	ldrge	r1, [r4, #0]
 8003864:	f021 0104 	bicge.w	r1, r1, #4
 8003868:	6021      	strge	r1, [r4, #0]
 800386a:	b90e      	cbnz	r6, 8003870 <_printf_i+0x114>
 800386c:	2d00      	cmp	r5, #0
 800386e:	d04b      	beq.n	8003908 <_printf_i+0x1ac>
 8003870:	4615      	mov	r5, r2
 8003872:	fbb6 f1f3 	udiv	r1, r6, r3
 8003876:	fb03 6711 	mls	r7, r3, r1, r6
 800387a:	5dc7      	ldrb	r7, [r0, r7]
 800387c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003880:	4637      	mov	r7, r6
 8003882:	42bb      	cmp	r3, r7
 8003884:	460e      	mov	r6, r1
 8003886:	d9f4      	bls.n	8003872 <_printf_i+0x116>
 8003888:	2b08      	cmp	r3, #8
 800388a:	d10b      	bne.n	80038a4 <_printf_i+0x148>
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	07de      	lsls	r6, r3, #31
 8003890:	d508      	bpl.n	80038a4 <_printf_i+0x148>
 8003892:	6923      	ldr	r3, [r4, #16]
 8003894:	6861      	ldr	r1, [r4, #4]
 8003896:	4299      	cmp	r1, r3
 8003898:	bfde      	ittt	le
 800389a:	2330      	movle	r3, #48	; 0x30
 800389c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80038a4:	1b52      	subs	r2, r2, r5
 80038a6:	6122      	str	r2, [r4, #16]
 80038a8:	f8cd a000 	str.w	sl, [sp]
 80038ac:	464b      	mov	r3, r9
 80038ae:	aa03      	add	r2, sp, #12
 80038b0:	4621      	mov	r1, r4
 80038b2:	4640      	mov	r0, r8
 80038b4:	f7ff fee4 	bl	8003680 <_printf_common>
 80038b8:	3001      	adds	r0, #1
 80038ba:	d14a      	bne.n	8003952 <_printf_i+0x1f6>
 80038bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038c0:	b004      	add	sp, #16
 80038c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	f043 0320 	orr.w	r3, r3, #32
 80038cc:	6023      	str	r3, [r4, #0]
 80038ce:	4833      	ldr	r0, [pc, #204]	; (800399c <_printf_i+0x240>)
 80038d0:	2778      	movs	r7, #120	; 0x78
 80038d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	6829      	ldr	r1, [r5, #0]
 80038da:	061f      	lsls	r7, r3, #24
 80038dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80038e0:	d402      	bmi.n	80038e8 <_printf_i+0x18c>
 80038e2:	065f      	lsls	r7, r3, #25
 80038e4:	bf48      	it	mi
 80038e6:	b2b6      	uxthmi	r6, r6
 80038e8:	07df      	lsls	r7, r3, #31
 80038ea:	bf48      	it	mi
 80038ec:	f043 0320 	orrmi.w	r3, r3, #32
 80038f0:	6029      	str	r1, [r5, #0]
 80038f2:	bf48      	it	mi
 80038f4:	6023      	strmi	r3, [r4, #0]
 80038f6:	b91e      	cbnz	r6, 8003900 <_printf_i+0x1a4>
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	f023 0320 	bic.w	r3, r3, #32
 80038fe:	6023      	str	r3, [r4, #0]
 8003900:	2310      	movs	r3, #16
 8003902:	e7a7      	b.n	8003854 <_printf_i+0xf8>
 8003904:	4824      	ldr	r0, [pc, #144]	; (8003998 <_printf_i+0x23c>)
 8003906:	e7e4      	b.n	80038d2 <_printf_i+0x176>
 8003908:	4615      	mov	r5, r2
 800390a:	e7bd      	b.n	8003888 <_printf_i+0x12c>
 800390c:	682b      	ldr	r3, [r5, #0]
 800390e:	6826      	ldr	r6, [r4, #0]
 8003910:	6961      	ldr	r1, [r4, #20]
 8003912:	1d18      	adds	r0, r3, #4
 8003914:	6028      	str	r0, [r5, #0]
 8003916:	0635      	lsls	r5, r6, #24
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	d501      	bpl.n	8003920 <_printf_i+0x1c4>
 800391c:	6019      	str	r1, [r3, #0]
 800391e:	e002      	b.n	8003926 <_printf_i+0x1ca>
 8003920:	0670      	lsls	r0, r6, #25
 8003922:	d5fb      	bpl.n	800391c <_printf_i+0x1c0>
 8003924:	8019      	strh	r1, [r3, #0]
 8003926:	2300      	movs	r3, #0
 8003928:	6123      	str	r3, [r4, #16]
 800392a:	4615      	mov	r5, r2
 800392c:	e7bc      	b.n	80038a8 <_printf_i+0x14c>
 800392e:	682b      	ldr	r3, [r5, #0]
 8003930:	1d1a      	adds	r2, r3, #4
 8003932:	602a      	str	r2, [r5, #0]
 8003934:	681d      	ldr	r5, [r3, #0]
 8003936:	6862      	ldr	r2, [r4, #4]
 8003938:	2100      	movs	r1, #0
 800393a:	4628      	mov	r0, r5
 800393c:	f7fc fc50 	bl	80001e0 <memchr>
 8003940:	b108      	cbz	r0, 8003946 <_printf_i+0x1ea>
 8003942:	1b40      	subs	r0, r0, r5
 8003944:	6060      	str	r0, [r4, #4]
 8003946:	6863      	ldr	r3, [r4, #4]
 8003948:	6123      	str	r3, [r4, #16]
 800394a:	2300      	movs	r3, #0
 800394c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003950:	e7aa      	b.n	80038a8 <_printf_i+0x14c>
 8003952:	6923      	ldr	r3, [r4, #16]
 8003954:	462a      	mov	r2, r5
 8003956:	4649      	mov	r1, r9
 8003958:	4640      	mov	r0, r8
 800395a:	47d0      	blx	sl
 800395c:	3001      	adds	r0, #1
 800395e:	d0ad      	beq.n	80038bc <_printf_i+0x160>
 8003960:	6823      	ldr	r3, [r4, #0]
 8003962:	079b      	lsls	r3, r3, #30
 8003964:	d413      	bmi.n	800398e <_printf_i+0x232>
 8003966:	68e0      	ldr	r0, [r4, #12]
 8003968:	9b03      	ldr	r3, [sp, #12]
 800396a:	4298      	cmp	r0, r3
 800396c:	bfb8      	it	lt
 800396e:	4618      	movlt	r0, r3
 8003970:	e7a6      	b.n	80038c0 <_printf_i+0x164>
 8003972:	2301      	movs	r3, #1
 8003974:	4632      	mov	r2, r6
 8003976:	4649      	mov	r1, r9
 8003978:	4640      	mov	r0, r8
 800397a:	47d0      	blx	sl
 800397c:	3001      	adds	r0, #1
 800397e:	d09d      	beq.n	80038bc <_printf_i+0x160>
 8003980:	3501      	adds	r5, #1
 8003982:	68e3      	ldr	r3, [r4, #12]
 8003984:	9903      	ldr	r1, [sp, #12]
 8003986:	1a5b      	subs	r3, r3, r1
 8003988:	42ab      	cmp	r3, r5
 800398a:	dcf2      	bgt.n	8003972 <_printf_i+0x216>
 800398c:	e7eb      	b.n	8003966 <_printf_i+0x20a>
 800398e:	2500      	movs	r5, #0
 8003990:	f104 0619 	add.w	r6, r4, #25
 8003994:	e7f5      	b.n	8003982 <_printf_i+0x226>
 8003996:	bf00      	nop
 8003998:	080042be 	.word	0x080042be
 800399c:	080042cf 	.word	0x080042cf

080039a0 <__malloc_lock>:
 80039a0:	4801      	ldr	r0, [pc, #4]	; (80039a8 <__malloc_lock+0x8>)
 80039a2:	f7ff bc73 	b.w	800328c <__retarget_lock_acquire_recursive>
 80039a6:	bf00      	nop
 80039a8:	20000490 	.word	0x20000490

080039ac <__malloc_unlock>:
 80039ac:	4801      	ldr	r0, [pc, #4]	; (80039b4 <__malloc_unlock+0x8>)
 80039ae:	f7ff bc6e 	b.w	800328e <__retarget_lock_release_recursive>
 80039b2:	bf00      	nop
 80039b4:	20000490 	.word	0x20000490

080039b8 <_realloc_r>:
 80039b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039bc:	4680      	mov	r8, r0
 80039be:	4614      	mov	r4, r2
 80039c0:	460e      	mov	r6, r1
 80039c2:	b921      	cbnz	r1, 80039ce <_realloc_r+0x16>
 80039c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039c8:	4611      	mov	r1, r2
 80039ca:	f7ff bdd9 	b.w	8003580 <_malloc_r>
 80039ce:	b92a      	cbnz	r2, 80039dc <_realloc_r+0x24>
 80039d0:	f000 f85a 	bl	8003a88 <_free_r>
 80039d4:	4625      	mov	r5, r4
 80039d6:	4628      	mov	r0, r5
 80039d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039dc:	f000 f8a0 	bl	8003b20 <_malloc_usable_size_r>
 80039e0:	4284      	cmp	r4, r0
 80039e2:	4607      	mov	r7, r0
 80039e4:	d802      	bhi.n	80039ec <_realloc_r+0x34>
 80039e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80039ea:	d812      	bhi.n	8003a12 <_realloc_r+0x5a>
 80039ec:	4621      	mov	r1, r4
 80039ee:	4640      	mov	r0, r8
 80039f0:	f7ff fdc6 	bl	8003580 <_malloc_r>
 80039f4:	4605      	mov	r5, r0
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d0ed      	beq.n	80039d6 <_realloc_r+0x1e>
 80039fa:	42bc      	cmp	r4, r7
 80039fc:	4622      	mov	r2, r4
 80039fe:	4631      	mov	r1, r6
 8003a00:	bf28      	it	cs
 8003a02:	463a      	movcs	r2, r7
 8003a04:	f000 f832 	bl	8003a6c <memcpy>
 8003a08:	4631      	mov	r1, r6
 8003a0a:	4640      	mov	r0, r8
 8003a0c:	f000 f83c 	bl	8003a88 <_free_r>
 8003a10:	e7e1      	b.n	80039d6 <_realloc_r+0x1e>
 8003a12:	4635      	mov	r5, r6
 8003a14:	e7df      	b.n	80039d6 <_realloc_r+0x1e>

08003a16 <memmove>:
 8003a16:	4288      	cmp	r0, r1
 8003a18:	b510      	push	{r4, lr}
 8003a1a:	eb01 0402 	add.w	r4, r1, r2
 8003a1e:	d902      	bls.n	8003a26 <memmove+0x10>
 8003a20:	4284      	cmp	r4, r0
 8003a22:	4623      	mov	r3, r4
 8003a24:	d807      	bhi.n	8003a36 <memmove+0x20>
 8003a26:	1e43      	subs	r3, r0, #1
 8003a28:	42a1      	cmp	r1, r4
 8003a2a:	d008      	beq.n	8003a3e <memmove+0x28>
 8003a2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a30:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a34:	e7f8      	b.n	8003a28 <memmove+0x12>
 8003a36:	4402      	add	r2, r0
 8003a38:	4601      	mov	r1, r0
 8003a3a:	428a      	cmp	r2, r1
 8003a3c:	d100      	bne.n	8003a40 <memmove+0x2a>
 8003a3e:	bd10      	pop	{r4, pc}
 8003a40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a44:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a48:	e7f7      	b.n	8003a3a <memmove+0x24>
	...

08003a4c <_sbrk_r>:
 8003a4c:	b538      	push	{r3, r4, r5, lr}
 8003a4e:	4d06      	ldr	r5, [pc, #24]	; (8003a68 <_sbrk_r+0x1c>)
 8003a50:	2300      	movs	r3, #0
 8003a52:	4604      	mov	r4, r0
 8003a54:	4608      	mov	r0, r1
 8003a56:	602b      	str	r3, [r5, #0]
 8003a58:	f7fd fce6 	bl	8001428 <_sbrk>
 8003a5c:	1c43      	adds	r3, r0, #1
 8003a5e:	d102      	bne.n	8003a66 <_sbrk_r+0x1a>
 8003a60:	682b      	ldr	r3, [r5, #0]
 8003a62:	b103      	cbz	r3, 8003a66 <_sbrk_r+0x1a>
 8003a64:	6023      	str	r3, [r4, #0]
 8003a66:	bd38      	pop	{r3, r4, r5, pc}
 8003a68:	2000049c 	.word	0x2000049c

08003a6c <memcpy>:
 8003a6c:	440a      	add	r2, r1
 8003a6e:	4291      	cmp	r1, r2
 8003a70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003a74:	d100      	bne.n	8003a78 <memcpy+0xc>
 8003a76:	4770      	bx	lr
 8003a78:	b510      	push	{r4, lr}
 8003a7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a82:	4291      	cmp	r1, r2
 8003a84:	d1f9      	bne.n	8003a7a <memcpy+0xe>
 8003a86:	bd10      	pop	{r4, pc}

08003a88 <_free_r>:
 8003a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a8a:	2900      	cmp	r1, #0
 8003a8c:	d044      	beq.n	8003b18 <_free_r+0x90>
 8003a8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a92:	9001      	str	r0, [sp, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f1a1 0404 	sub.w	r4, r1, #4
 8003a9a:	bfb8      	it	lt
 8003a9c:	18e4      	addlt	r4, r4, r3
 8003a9e:	f7ff ff7f 	bl	80039a0 <__malloc_lock>
 8003aa2:	4a1e      	ldr	r2, [pc, #120]	; (8003b1c <_free_r+0x94>)
 8003aa4:	9801      	ldr	r0, [sp, #4]
 8003aa6:	6813      	ldr	r3, [r2, #0]
 8003aa8:	b933      	cbnz	r3, 8003ab8 <_free_r+0x30>
 8003aaa:	6063      	str	r3, [r4, #4]
 8003aac:	6014      	str	r4, [r2, #0]
 8003aae:	b003      	add	sp, #12
 8003ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ab4:	f7ff bf7a 	b.w	80039ac <__malloc_unlock>
 8003ab8:	42a3      	cmp	r3, r4
 8003aba:	d908      	bls.n	8003ace <_free_r+0x46>
 8003abc:	6825      	ldr	r5, [r4, #0]
 8003abe:	1961      	adds	r1, r4, r5
 8003ac0:	428b      	cmp	r3, r1
 8003ac2:	bf01      	itttt	eq
 8003ac4:	6819      	ldreq	r1, [r3, #0]
 8003ac6:	685b      	ldreq	r3, [r3, #4]
 8003ac8:	1949      	addeq	r1, r1, r5
 8003aca:	6021      	streq	r1, [r4, #0]
 8003acc:	e7ed      	b.n	8003aaa <_free_r+0x22>
 8003ace:	461a      	mov	r2, r3
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	b10b      	cbz	r3, 8003ad8 <_free_r+0x50>
 8003ad4:	42a3      	cmp	r3, r4
 8003ad6:	d9fa      	bls.n	8003ace <_free_r+0x46>
 8003ad8:	6811      	ldr	r1, [r2, #0]
 8003ada:	1855      	adds	r5, r2, r1
 8003adc:	42a5      	cmp	r5, r4
 8003ade:	d10b      	bne.n	8003af8 <_free_r+0x70>
 8003ae0:	6824      	ldr	r4, [r4, #0]
 8003ae2:	4421      	add	r1, r4
 8003ae4:	1854      	adds	r4, r2, r1
 8003ae6:	42a3      	cmp	r3, r4
 8003ae8:	6011      	str	r1, [r2, #0]
 8003aea:	d1e0      	bne.n	8003aae <_free_r+0x26>
 8003aec:	681c      	ldr	r4, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	6053      	str	r3, [r2, #4]
 8003af2:	440c      	add	r4, r1
 8003af4:	6014      	str	r4, [r2, #0]
 8003af6:	e7da      	b.n	8003aae <_free_r+0x26>
 8003af8:	d902      	bls.n	8003b00 <_free_r+0x78>
 8003afa:	230c      	movs	r3, #12
 8003afc:	6003      	str	r3, [r0, #0]
 8003afe:	e7d6      	b.n	8003aae <_free_r+0x26>
 8003b00:	6825      	ldr	r5, [r4, #0]
 8003b02:	1961      	adds	r1, r4, r5
 8003b04:	428b      	cmp	r3, r1
 8003b06:	bf04      	itt	eq
 8003b08:	6819      	ldreq	r1, [r3, #0]
 8003b0a:	685b      	ldreq	r3, [r3, #4]
 8003b0c:	6063      	str	r3, [r4, #4]
 8003b0e:	bf04      	itt	eq
 8003b10:	1949      	addeq	r1, r1, r5
 8003b12:	6021      	streq	r1, [r4, #0]
 8003b14:	6054      	str	r4, [r2, #4]
 8003b16:	e7ca      	b.n	8003aae <_free_r+0x26>
 8003b18:	b003      	add	sp, #12
 8003b1a:	bd30      	pop	{r4, r5, pc}
 8003b1c:	20000494 	.word	0x20000494

08003b20 <_malloc_usable_size_r>:
 8003b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b24:	1f18      	subs	r0, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	bfbc      	itt	lt
 8003b2a:	580b      	ldrlt	r3, [r1, r0]
 8003b2c:	18c0      	addlt	r0, r0, r3
 8003b2e:	4770      	bx	lr

08003b30 <_init>:
 8003b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b32:	bf00      	nop
 8003b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b36:	bc08      	pop	{r3}
 8003b38:	469e      	mov	lr, r3
 8003b3a:	4770      	bx	lr

08003b3c <_fini>:
 8003b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3e:	bf00      	nop
 8003b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b42:	bc08      	pop	{r3}
 8003b44:	469e      	mov	lr, r3
 8003b46:	4770      	bx	lr
