
bin_diodes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a00  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08008b98  08008b98  00018b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d80  08008d80  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008d80  08008d80  00018d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d88  08008d88  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d88  08008d88  00018d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d8c  08008d8c  00018d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008d90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000098c  2000007c  08008e0c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a08  08008e0c  00020a08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001549e  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f55  00000000  00000000  0003558d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  000394e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d51  00000000  00000000  0003a680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001927c  00000000  00000000  0003b3d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001991f  00000000  00000000  0005464d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e478  00000000  00000000  0006df6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004aa8  00000000  00000000  000fc3e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00100e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008b80 	.word	0x08008b80

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	08008b80 	.word	0x08008b80

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08c      	sub	sp, #48	; 0x30
 80004d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 031c 	add.w	r3, r7, #28
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	61bb      	str	r3, [r7, #24]
 80004ee:	4b76      	ldr	r3, [pc, #472]	; (80006c8 <MX_GPIO_Init+0x1f4>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a75      	ldr	r2, [pc, #468]	; (80006c8 <MX_GPIO_Init+0x1f4>)
 80004f4:	f043 0310 	orr.w	r3, r3, #16
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
 80004fa:	4b73      	ldr	r3, [pc, #460]	; (80006c8 <MX_GPIO_Init+0x1f4>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	f003 0310 	and.w	r3, r3, #16
 8000502:	61bb      	str	r3, [r7, #24]
 8000504:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
 800050a:	4b6f      	ldr	r3, [pc, #444]	; (80006c8 <MX_GPIO_Init+0x1f4>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a6e      	ldr	r2, [pc, #440]	; (80006c8 <MX_GPIO_Init+0x1f4>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b6c      	ldr	r3, [pc, #432]	; (80006c8 <MX_GPIO_Init+0x1f4>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f003 0304 	and.w	r3, r3, #4
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	613b      	str	r3, [r7, #16]
 8000526:	4b68      	ldr	r3, [pc, #416]	; (80006c8 <MX_GPIO_Init+0x1f4>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a67      	ldr	r2, [pc, #412]	; (80006c8 <MX_GPIO_Init+0x1f4>)
 800052c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
 8000532:	4b65      	ldr	r3, [pc, #404]	; (80006c8 <MX_GPIO_Init+0x1f4>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	4b61      	ldr	r3, [pc, #388]	; (80006c8 <MX_GPIO_Init+0x1f4>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a60      	ldr	r2, [pc, #384]	; (80006c8 <MX_GPIO_Init+0x1f4>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b5e      	ldr	r3, [pc, #376]	; (80006c8 <MX_GPIO_Init+0x1f4>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	4b5a      	ldr	r3, [pc, #360]	; (80006c8 <MX_GPIO_Init+0x1f4>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a59      	ldr	r2, [pc, #356]	; (80006c8 <MX_GPIO_Init+0x1f4>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b57      	ldr	r3, [pc, #348]	; (80006c8 <MX_GPIO_Init+0x1f4>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	4b53      	ldr	r3, [pc, #332]	; (80006c8 <MX_GPIO_Init+0x1f4>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a52      	ldr	r2, [pc, #328]	; (80006c8 <MX_GPIO_Init+0x1f4>)
 8000580:	f043 0308 	orr.w	r3, r3, #8
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b50      	ldr	r3, [pc, #320]	; (80006c8 <MX_GPIO_Init+0x1f4>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0308 	and.w	r3, r3, #8
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LEDBIT3_Pin|LEDBIT4_Pin|LEDBIT5_Pin
 8000592:	2200      	movs	r2, #0
 8000594:	f640 3188 	movw	r1, #2952	; 0xb88
 8000598:	484c      	ldr	r0, [pc, #304]	; (80006cc <MX_GPIO_Init+0x1f8>)
 800059a:	f001 f943 	bl	8001824 <HAL_GPIO_WritePin>
                          |LEDBIT2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	2101      	movs	r1, #1
 80005a2:	484b      	ldr	r0, [pc, #300]	; (80006d0 <MX_GPIO_Init+0x1fc>)
 80005a4:	f001 f93e 	bl	8001824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LEDBIT0_Pin|LEDBIT1_Pin|GPIO_PIN_3, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	210e      	movs	r1, #14
 80005ac:	4849      	ldr	r0, [pc, #292]	; (80006d4 <MX_GPIO_Init+0x200>)
 80005ae:	f001 f939 	bl	8001824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005b2:	2200      	movs	r2, #0
 80005b4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005b8:	4847      	ldr	r0, [pc, #284]	; (80006d8 <MX_GPIO_Init+0x204>)
 80005ba:	f001 f933 	bl	8001824 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80005be:	2304      	movs	r3, #4
 80005c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c2:	2300      	movs	r3, #0
 80005c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	4619      	mov	r1, r3
 80005d0:	483e      	ldr	r0, [pc, #248]	; (80006cc <MX_GPIO_Init+0x1f8>)
 80005d2:	f000 fe67 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LEDBIT3_Pin|LEDBIT4_Pin|LEDBIT5_Pin
 80005d6:	f640 3388 	movw	r3, #2952	; 0xb88
 80005da:	61fb      	str	r3, [r7, #28]
                          |LEDBIT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2300      	movs	r3, #0
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	4619      	mov	r1, r3
 80005ee:	4837      	ldr	r0, [pc, #220]	; (80006cc <MX_GPIO_Init+0x1f8>)
 80005f0:	f000 fe58 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 80005f4:	2330      	movs	r3, #48	; 0x30
 80005f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005f8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	4619      	mov	r1, r3
 8000608:	4830      	ldr	r0, [pc, #192]	; (80006cc <MX_GPIO_Init+0x1f8>)
 800060a:	f000 fe4b 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800060e:	2301      	movs	r3, #1
 8000610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	4619      	mov	r1, r3
 8000624:	482a      	ldr	r0, [pc, #168]	; (80006d0 <MX_GPIO_Init+0x1fc>)
 8000626:	f000 fe3d 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800062a:	2301      	movs	r3, #1
 800062c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800062e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4619      	mov	r1, r3
 800063e:	4825      	ldr	r0, [pc, #148]	; (80006d4 <MX_GPIO_Init+0x200>)
 8000640:	f000 fe30 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA3 */
  GPIO_InitStruct.Pin = LEDBIT0_Pin|LEDBIT1_Pin|GPIO_PIN_3;
 8000644:	230e      	movs	r3, #14
 8000646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2300      	movs	r3, #0
 8000652:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4619      	mov	r1, r3
 800065a:	481e      	ldr	r0, [pc, #120]	; (80006d4 <MX_GPIO_Init+0x200>)
 800065c:	f000 fe22 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UButton_Pin;
 8000660:	2302      	movs	r3, #2
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000664:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UButton_GPIO_Port, &GPIO_InitStruct);
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	4619      	mov	r1, r3
 8000674:	4819      	ldr	r0, [pc, #100]	; (80006dc <MX_GPIO_Init+0x208>)
 8000676:	f000 fe15 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800067a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800067e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	4811      	ldr	r0, [pc, #68]	; (80006d8 <MX_GPIO_Init+0x204>)
 8000694:	f000 fe06 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000698:	2320      	movs	r3, #32
 800069a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800069c:	2300      	movs	r3, #0
 800069e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4619      	mov	r1, r3
 80006aa:	480b      	ldr	r0, [pc, #44]	; (80006d8 <MX_GPIO_Init+0x204>)
 80006ac:	f000 fdfa 	bl	80012a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2100      	movs	r1, #0
 80006b4:	2007      	movs	r0, #7
 80006b6:	f000 fda5 	bl	8001204 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80006ba:	2007      	movs	r0, #7
 80006bc:	f000 fdce 	bl	800125c <HAL_NVIC_EnableIRQ>

}
 80006c0:	bf00      	nop
 80006c2:	3730      	adds	r7, #48	; 0x30
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40020800 	.word	0x40020800
 80006d4:	40020000 	.word	0x40020000
 80006d8:	40020c00 	.word	0x40020c00
 80006dc:	40020400 	.word	0x40020400

080006e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_I2C1_Init+0x50>)
 80006e6:	4a13      	ldr	r2, [pc, #76]	; (8000734 <MX_I2C1_Init+0x54>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_I2C1_Init+0x50>)
 80006ec:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_I2C1_Init+0x58>)
 80006ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_I2C1_Init+0x50>)
 80006fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000702:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_I2C1_Init+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_I2C1_Init+0x50>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_I2C1_Init+0x50>)
 800071e:	f002 fced 	bl	80030fc <HAL_I2C_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000728:	f000 fa82 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000098 	.word	0x20000098
 8000734:	40005400 	.word	0x40005400
 8000738:	000186a0 	.word	0x000186a0

0800073c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a19      	ldr	r2, [pc, #100]	; (80007c0 <HAL_I2C_MspInit+0x84>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d12c      	bne.n	80007b8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <HAL_I2C_MspInit+0x88>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <HAL_I2C_MspInit+0x88>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <HAL_I2C_MspInit+0x88>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0302 	and.w	r3, r3, #2
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800077a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800077e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000780:	2312      	movs	r3, #18
 8000782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000784:	2301      	movs	r3, #1
 8000786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800078c:	2304      	movs	r3, #4
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	480c      	ldr	r0, [pc, #48]	; (80007c8 <HAL_I2C_MspInit+0x8c>)
 8000798:	f000 fd84 	bl	80012a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_I2C_MspInit+0x88>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <HAL_I2C_MspInit+0x88>)
 80007a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_I2C_MspInit+0x88>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007b8:	bf00      	nop
 80007ba:	3728      	adds	r7, #40	; 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40005400 	.word	0x40005400
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020400 	.word	0x40020400

080007cc <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_I2S2_Init+0x50>)
 80007d2:	4a13      	ldr	r2, [pc, #76]	; (8000820 <MX_I2S2_Init+0x54>)
 80007d4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_I2S2_Init+0x50>)
 80007d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007dc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_I2S2_Init+0x50>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007e4:	4b0d      	ldr	r3, [pc, #52]	; (800081c <MX_I2S2_Init+0x50>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_I2S2_Init+0x50>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <MX_I2S2_Init+0x50>)
 80007f2:	4a0c      	ldr	r2, [pc, #48]	; (8000824 <MX_I2S2_Init+0x58>)
 80007f4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_I2S2_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <MX_I2S2_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_I2S2_Init+0x50>)
 8000804:	2201      	movs	r2, #1
 8000806:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_I2S2_Init+0x50>)
 800080a:	f002 fe43 	bl	8003494 <HAL_I2S_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000814:	f000 fa0c 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200000ec 	.word	0x200000ec
 8000820:	40003800 	.word	0x40003800
 8000824:	00017700 	.word	0x00017700

08000828 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_I2S3_Init+0x54>)
 800082e:	4a14      	ldr	r2, [pc, #80]	; (8000880 <MX_I2S3_Init+0x58>)
 8000830:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_I2S3_Init+0x54>)
 8000834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000838:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_I2S3_Init+0x54>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_I2S3_Init+0x54>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <MX_I2S3_Init+0x54>)
 8000848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800084c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_I2S3_Init+0x54>)
 8000850:	4a0c      	ldr	r2, [pc, #48]	; (8000884 <MX_I2S3_Init+0x5c>)
 8000852:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_I2S3_Init+0x54>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_I2S3_Init+0x54>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_I2S3_Init+0x54>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_I2S3_Init+0x54>)
 8000868:	f002 fe14 	bl	8003494 <HAL_I2S_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000872:	f000 f9dd 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000134 	.word	0x20000134
 8000880:	40003c00 	.word	0x40003c00
 8000884:	00017700 	.word	0x00017700

08000888 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08e      	sub	sp, #56	; 0x38
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a59      	ldr	r2, [pc, #356]	; (8000a0c <HAL_I2S_MspInit+0x184>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d15b      	bne.n	8000962 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
 80008ae:	4b58      	ldr	r3, [pc, #352]	; (8000a10 <HAL_I2S_MspInit+0x188>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	4a57      	ldr	r2, [pc, #348]	; (8000a10 <HAL_I2S_MspInit+0x188>)
 80008b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ba:	4b55      	ldr	r3, [pc, #340]	; (8000a10 <HAL_I2S_MspInit+0x188>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c2:	623b      	str	r3, [r7, #32]
 80008c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
 80008ca:	4b51      	ldr	r3, [pc, #324]	; (8000a10 <HAL_I2S_MspInit+0x188>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a50      	ldr	r2, [pc, #320]	; (8000a10 <HAL_I2S_MspInit+0x188>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b4e      	ldr	r3, [pc, #312]	; (8000a10 <HAL_I2S_MspInit+0x188>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	61fb      	str	r3, [r7, #28]
 80008e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
 80008e6:	4b4a      	ldr	r3, [pc, #296]	; (8000a10 <HAL_I2S_MspInit+0x188>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a49      	ldr	r2, [pc, #292]	; (8000a10 <HAL_I2S_MspInit+0x188>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b47      	ldr	r3, [pc, #284]	; (8000a10 <HAL_I2S_MspInit+0x188>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	61bb      	str	r3, [r7, #24]
 80008fc:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008fe:	2304      	movs	r3, #4
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800090e:	2306      	movs	r3, #6
 8000910:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000916:	4619      	mov	r1, r3
 8000918:	483e      	ldr	r0, [pc, #248]	; (8000a14 <HAL_I2S_MspInit+0x18c>)
 800091a:	f000 fcc3 	bl	80012a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800091e:	2308      	movs	r3, #8
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092e:	2305      	movs	r3, #5
 8000930:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000936:	4619      	mov	r1, r3
 8000938:	4836      	ldr	r0, [pc, #216]	; (8000a14 <HAL_I2S_MspInit+0x18c>)
 800093a:	f000 fcb3 	bl	80012a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800093e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000950:	2305      	movs	r3, #5
 8000952:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	4619      	mov	r1, r3
 800095a:	482f      	ldr	r0, [pc, #188]	; (8000a18 <HAL_I2S_MspInit+0x190>)
 800095c:	f000 fca2 	bl	80012a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000960:	e04f      	b.n	8000a02 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a2d      	ldr	r2, [pc, #180]	; (8000a1c <HAL_I2S_MspInit+0x194>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d14a      	bne.n	8000a02 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <HAL_I2S_MspInit+0x188>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	4a26      	ldr	r2, [pc, #152]	; (8000a10 <HAL_I2S_MspInit+0x188>)
 8000976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800097a:	6413      	str	r3, [r2, #64]	; 0x40
 800097c:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <HAL_I2S_MspInit+0x188>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000988:	2300      	movs	r3, #0
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <HAL_I2S_MspInit+0x188>)
 800098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000990:	4a1f      	ldr	r2, [pc, #124]	; (8000a10 <HAL_I2S_MspInit+0x188>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	6313      	str	r3, [r2, #48]	; 0x30
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <HAL_I2S_MspInit+0x188>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <HAL_I2S_MspInit+0x188>)
 80009aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ac:	4a18      	ldr	r2, [pc, #96]	; (8000a10 <HAL_I2S_MspInit+0x188>)
 80009ae:	f043 0304 	orr.w	r3, r3, #4
 80009b2:	6313      	str	r3, [r2, #48]	; 0x30
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <HAL_I2S_MspInit+0x188>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009c0:	2310      	movs	r3, #16
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009d0:	2306      	movs	r3, #6
 80009d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d8:	4619      	mov	r1, r3
 80009da:	4811      	ldr	r0, [pc, #68]	; (8000a20 <HAL_I2S_MspInit+0x198>)
 80009dc:	f000 fc62 	bl	80012a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009e0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009f2:	2306      	movs	r3, #6
 80009f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	; (8000a14 <HAL_I2S_MspInit+0x18c>)
 80009fe:	f000 fc51 	bl	80012a4 <HAL_GPIO_Init>
}
 8000a02:	bf00      	nop
 8000a04:	3738      	adds	r7, #56	; 0x38
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40003800 	.word	0x40003800
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020800 	.word	0x40020800
 8000a18:	40020400 	.word	0x40020400
 8000a1c:	40003c00 	.word	0x40003c00
 8000a20:	40020000 	.word	0x40020000

08000a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a28:	f000 fa66 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a2c:	f000 f878 	bl	8000b20 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a30:	f000 f8de 	bl	8000bf0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a34:	f7ff fd4e 	bl	80004d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a38:	f7ff fe52 	bl	80006e0 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000a3c:	f7ff fec6 	bl	80007cc <MX_I2S2_Init>
  MX_I2S3_Init();
 8000a40:	f7ff fef2 	bl	8000828 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000a44:	f000 f904 	bl	8000c50 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000a48:	f007 fc46 	bl	80082d8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN WHILE */


  while (1)
    {
     if ( HAL_GPIO_ReadPin(UButton_GPIO_Port, UButton_Pin) )
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	4830      	ldr	r0, [pc, #192]	; (8000b10 <main+0xec>)
 8000a50:	f000 fec2 	bl	80017d8 <HAL_GPIO_ReadPin>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d012      	beq.n	8000a80 <main+0x5c>
     {
      ++pressed;
 8000a5a:	4b2e      	ldr	r3, [pc, #184]	; (8000b14 <main+0xf0>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	4a2c      	ldr	r2, [pc, #176]	; (8000b14 <main+0xf0>)
 8000a62:	6013      	str	r3, [r2, #0]
      HAL_Delay(50);
 8000a64:	2032      	movs	r0, #50	; 0x32
 8000a66:	f000 fab9 	bl	8000fdc <HAL_Delay>
      while( HAL_GPIO_ReadPin(UButton_GPIO_Port, UButton_Pin) )
 8000a6a:	bf00      	nop
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	4828      	ldr	r0, [pc, #160]	; (8000b10 <main+0xec>)
 8000a70:	f000 feb2 	bl	80017d8 <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d1f8      	bne.n	8000a6c <main+0x48>
      {}
      HAL_Delay(50);
 8000a7a:	2032      	movs	r0, #50	; 0x32
 8000a7c:	f000 faae 	bl	8000fdc <HAL_Delay>
     }


     HAL_GPIO_WritePin(LEDBIT0_GPIO_Port, LEDBIT0_Pin, pressed & 1);
 8000a80:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <main+0xf0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	2102      	movs	r1, #2
 8000a90:	4821      	ldr	r0, [pc, #132]	; (8000b18 <main+0xf4>)
 8000a92:	f000 fec7 	bl	8001824 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(LEDBIT1_GPIO_Port, LEDBIT1_Pin, pressed & 1 << 1);
 8000a96:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <main+0xf0>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f003 0302 	and.w	r3, r3, #2
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	481c      	ldr	r0, [pc, #112]	; (8000b18 <main+0xf4>)
 8000aa8:	f000 febc 	bl	8001824 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(LEDBIT2_GPIO_Port, LEDBIT2_Pin, pressed & 1 << 2);
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <main+0xf0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	461a      	mov	r2, r3
 8000aba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000abe:	4817      	ldr	r0, [pc, #92]	; (8000b1c <main+0xf8>)
 8000ac0:	f000 feb0 	bl	8001824 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(LEDBIT3_GPIO_Port, LEDBIT3_Pin, pressed & 1 << 3);
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <main+0xf0>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	f003 0308 	and.w	r3, r3, #8
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	2180      	movs	r1, #128	; 0x80
 8000ad4:	4811      	ldr	r0, [pc, #68]	; (8000b1c <main+0xf8>)
 8000ad6:	f000 fea5 	bl	8001824 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(LEDBIT2_GPIO_Port, LEDBIT4_Pin, pressed & 1 << 4);
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <main+0xf0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	f003 0310 	and.w	r3, r3, #16
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aec:	480b      	ldr	r0, [pc, #44]	; (8000b1c <main+0xf8>)
 8000aee:	f000 fe99 	bl	8001824 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(LEDBIT3_GPIO_Port, LEDBIT5_Pin, pressed & 1 << 5);
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <main+0xf0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	f003 0320 	and.w	r3, r3, #32
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	461a      	mov	r2, r3
 8000b00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b04:	4805      	ldr	r0, [pc, #20]	; (8000b1c <main+0xf8>)
 8000b06:	f000 fe8d 	bl	8001824 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000b0a:	f007 fc0b 	bl	8008324 <MX_USB_HOST_Process>
     if ( HAL_GPIO_ReadPin(UButton_GPIO_Port, UButton_Pin) )
 8000b0e:	e79d      	b.n	8000a4c <main+0x28>
 8000b10:	40020400 	.word	0x40020400
 8000b14:	2000017c 	.word	0x2000017c
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	40021000 	.word	0x40021000

08000b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b094      	sub	sp, #80	; 0x50
 8000b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	2230      	movs	r2, #48	; 0x30
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f007 ff96 	bl	8008a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	4b27      	ldr	r3, [pc, #156]	; (8000be8 <SystemClock_Config+0xc8>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	4a26      	ldr	r2, [pc, #152]	; (8000be8 <SystemClock_Config+0xc8>)
 8000b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b52:	6413      	str	r3, [r2, #64]	; 0x40
 8000b54:	4b24      	ldr	r3, [pc, #144]	; (8000be8 <SystemClock_Config+0xc8>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	4b21      	ldr	r3, [pc, #132]	; (8000bec <SystemClock_Config+0xcc>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a20      	ldr	r2, [pc, #128]	; (8000bec <SystemClock_Config+0xcc>)
 8000b6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <SystemClock_Config+0xcc>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b86:	2302      	movs	r3, #2
 8000b88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b90:	2304      	movs	r3, #4
 8000b92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b94:	23c0      	movs	r3, #192	; 0xc0
 8000b96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f003 f9d3 	bl	8003f50 <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bb0:	f000 f83e 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	2103      	movs	r1, #3
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f003 fce5 	bl	80045a0 <HAL_RCC_ClockConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bdc:	f000 f828 	bl	8000c30 <Error_Handler>
  }
}
 8000be0:	bf00      	nop
 8000be2:	3750      	adds	r7, #80	; 0x50
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40007000 	.word	0x40007000

08000bf0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf6:	463b      	mov	r3, r7
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
 8000c04:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c06:	2301      	movs	r3, #1
 8000c08:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000c0a:	23c8      	movs	r3, #200	; 0xc8
 8000c0c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000c0e:	2305      	movs	r3, #5
 8000c10:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c12:	2302      	movs	r3, #2
 8000c14:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c16:	463b      	mov	r3, r7
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f003 ff75 	bl	8004b08 <HAL_RCCEx_PeriphCLKConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000c24:	f000 f804 	bl	8000c30 <Error_Handler>
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <Error_Handler+0x8>

08000c3a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
 8000c42:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c56:	4a18      	ldr	r2, [pc, #96]	; (8000cb8 <MX_SPI1_Init+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000c9c:	220a      	movs	r2, #10
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_SPI1_Init+0x64>)
 8000ca2:	f004 f9a7 	bl	8004ff4 <HAL_SPI_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cac:	f7ff ffc0 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000180 	.word	0x20000180
 8000cb8:	40013000 	.word	0x40013000

08000cbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	; 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <HAL_SPI_MspInit+0x84>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d12b      	bne.n	8000d36 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	4a17      	ldr	r2, [pc, #92]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000ce8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cec:	6453      	str	r3, [r2, #68]	; 0x44
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_SPI_MspInit+0x88>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d16:	23e0      	movs	r3, #224	; 0xe0
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d26:	2305      	movs	r3, #5
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4805      	ldr	r0, [pc, #20]	; (8000d48 <HAL_SPI_MspInit+0x8c>)
 8000d32:	f000 fab7 	bl	80012a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	; 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40013000 	.word	0x40013000
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	4a0f      	ldr	r2, [pc, #60]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d60:	6453      	str	r3, [r2, #68]	; 0x44
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a08      	ldr	r2, [pc, #32]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_MspInit+0x4c>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	603b      	str	r3, [r7, #0]
 8000d88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d8a:	2007      	movs	r0, #7
 8000d8c:	f000 fa1a 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40023800 	.word	0x40023800

08000d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <NMI_Handler+0x4>

08000da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <MemManage_Handler+0x4>

08000dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de8:	f000 f8d8 	bl	8000f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UButton_Pin);
 8000df4:	2002      	movs	r0, #2
 8000df6:	f000 fd47 	bl	8001888 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <OTG_FS_IRQHandler+0x10>)
 8000e06:	f000 ffd9 	bl	8001dbc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200005bc 	.word	0x200005bc

08000e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e1c:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <_sbrk+0x5c>)
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <_sbrk+0x60>)
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <_sbrk+0x64>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <_sbrk+0x68>)
 8000e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d207      	bcs.n	8000e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e44:	f007 fe24 	bl	8008a90 <__errno>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e52:	e009      	b.n	8000e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <_sbrk+0x64>)
 8000e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20020000 	.word	0x20020000
 8000e74:	00000400 	.word	0x00000400
 8000e78:	200001d8 	.word	0x200001d8
 8000e7c:	20000a08 	.word	0x20000a08

08000e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <SystemInit+0x20>)
 8000e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <SystemInit+0x20>)
 8000e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000edc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea8:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eaa:	490e      	ldr	r1, [pc, #56]	; (8000ee4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eac:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb0:	e002      	b.n	8000eb8 <LoopCopyDataInit>

08000eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb6:	3304      	adds	r3, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ebc:	d3f9      	bcc.n	8000eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ec0:	4c0b      	ldr	r4, [pc, #44]	; (8000ef0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec4:	e001      	b.n	8000eca <LoopFillZerobss>

08000ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec8:	3204      	adds	r2, #4

08000eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ecc:	d3fb      	bcc.n	8000ec6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ece:	f7ff ffd7 	bl	8000e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f007 fde3 	bl	8008a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed6:	f7ff fda5 	bl	8000a24 <main>
  bx  lr    
 8000eda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000edc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ee8:	08008d90 	.word	0x08008d90
  ldr r2, =_sbss
 8000eec:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ef0:	20000a08 	.word	0x20000a08

08000ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <HAL_Init+0x40>)
 8000f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_Init+0x40>)
 8000f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_Init+0x40>)
 8000f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 f94f 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 f808 	bl	8000f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2c:	f7ff ff0e 	bl	8000d4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023c00 	.word	0x40023c00

08000f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_InitTick+0x54>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x58>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f996 	bl	800128c <HAL_SYSTICK_Config>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00e      	b.n	8000f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d80a      	bhi.n	8000f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f78:	f000 f944 	bl	8001204 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f7c:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <HAL_InitTick+0x5c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e000      	b.n	8000f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000000 	.word	0x20000000
 8000f94:	20000008 	.word	0x20000008
 8000f98:	20000004 	.word	0x20000004

08000f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x20>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	200001dc 	.word	0x200001dc

08000fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_GetTick+0x14>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	200001dc 	.word	0x200001dc

08000fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff ffee 	bl	8000fc4 <HAL_GetTick>
 8000fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ff4:	d005      	beq.n	8001002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_Delay+0x44>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001002:	bf00      	nop
 8001004:	f7ff ffde 	bl	8000fc4 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	429a      	cmp	r2, r3
 8001012:	d8f7      	bhi.n	8001004 <HAL_Delay+0x28>
  {
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000008 	.word	0x20000008

08001024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001040:	4013      	ands	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800104c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001056:	4a04      	ldr	r2, [pc, #16]	; (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <__NVIC_GetPriorityGrouping+0x18>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	f003 0307 	and.w	r3, r3, #7
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	db0b      	blt.n	80010b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f003 021f 	and.w	r2, r3, #31
 80010a0:	4907      	ldr	r1, [pc, #28]	; (80010c0 <__NVIC_EnableIRQ+0x38>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	095b      	lsrs	r3, r3, #5
 80010a8:	2001      	movs	r0, #1
 80010aa:	fa00 f202 	lsl.w	r2, r0, r2
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	; (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001190:	d301      	bcc.n	8001196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001192:	2301      	movs	r3, #1
 8001194:	e00f      	b.n	80011b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <SysTick_Config+0x40>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119e:	210f      	movs	r1, #15
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011a4:	f7ff ff8e 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <SysTick_Config+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <SysTick_Config+0x40>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	e000e010 	.word	0xe000e010

080011c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b07      	cmp	r3, #7
 80011d0:	d00f      	beq.n	80011f2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b06      	cmp	r3, #6
 80011d6:	d00c      	beq.n	80011f2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b05      	cmp	r3, #5
 80011dc:	d009      	beq.n	80011f2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d006      	beq.n	80011f2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d003      	beq.n	80011f2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011ea:	2190      	movs	r1, #144	; 0x90
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80011ee:	f7ff fd24 	bl	8000c3a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ff16 	bl	8001024 <__NVIC_SetPriorityGrouping>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	08008b98 	.word	0x08008b98

08001204 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d903      	bls.n	8001224 <HAL_NVIC_SetPriority+0x20>
 800121c:	21a8      	movs	r1, #168	; 0xa8
 800121e:	480e      	ldr	r0, [pc, #56]	; (8001258 <HAL_NVIC_SetPriority+0x54>)
 8001220:	f7ff fd0b 	bl	8000c3a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	d903      	bls.n	8001232 <HAL_NVIC_SetPriority+0x2e>
 800122a:	21a9      	movs	r1, #169	; 0xa9
 800122c:	480a      	ldr	r0, [pc, #40]	; (8001258 <HAL_NVIC_SetPriority+0x54>)
 800122e:	f7ff fd04 	bl	8000c3a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001232:	f7ff ff1b 	bl	800106c <__NVIC_GetPriorityGrouping>
 8001236:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	68b9      	ldr	r1, [r7, #8]
 800123c:	6978      	ldr	r0, [r7, #20]
 800123e:	f7ff ff6b 	bl	8001118 <NVIC_EncodePriority>
 8001242:	4602      	mov	r2, r0
 8001244:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff3a 	bl	80010c4 <__NVIC_SetPriority>
}
 8001250:	bf00      	nop
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	08008b98 	.word	0x08008b98

0800125c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	da03      	bge.n	8001276 <HAL_NVIC_EnableIRQ+0x1a>
 800126e:	21bc      	movs	r1, #188	; 0xbc
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <HAL_NVIC_EnableIRQ+0x2c>)
 8001272:	f7ff fce2 	bl	8000c3a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff04 	bl	8001088 <__NVIC_EnableIRQ>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	08008b98 	.word	0x08008b98

0800128c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff73 	bl	8001180 <SysTick_Config>
 800129a:	4603      	mov	r3, r0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a33      	ldr	r2, [pc, #204]	; (800138c <HAL_GPIO_Init+0xe8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d017      	beq.n	80012f2 <HAL_GPIO_Init+0x4e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a32      	ldr	r2, [pc, #200]	; (8001390 <HAL_GPIO_Init+0xec>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d013      	beq.n	80012f2 <HAL_GPIO_Init+0x4e>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a31      	ldr	r2, [pc, #196]	; (8001394 <HAL_GPIO_Init+0xf0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d00f      	beq.n	80012f2 <HAL_GPIO_Init+0x4e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a30      	ldr	r2, [pc, #192]	; (8001398 <HAL_GPIO_Init+0xf4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d00b      	beq.n	80012f2 <HAL_GPIO_Init+0x4e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a2f      	ldr	r2, [pc, #188]	; (800139c <HAL_GPIO_Init+0xf8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d007      	beq.n	80012f2 <HAL_GPIO_Init+0x4e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a2e      	ldr	r2, [pc, #184]	; (80013a0 <HAL_GPIO_Init+0xfc>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x4e>
 80012ea:	21ac      	movs	r1, #172	; 0xac
 80012ec:	482d      	ldr	r0, [pc, #180]	; (80013a4 <HAL_GPIO_Init+0x100>)
 80012ee:	f7ff fca4 	bl	8000c3a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <HAL_GPIO_Init+0x64>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	0c1b      	lsrs	r3, r3, #16
 8001302:	041b      	lsls	r3, r3, #16
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x6c>
 8001308:	21ad      	movs	r1, #173	; 0xad
 800130a:	4826      	ldr	r0, [pc, #152]	; (80013a4 <HAL_GPIO_Init+0x100>)
 800130c:	f7ff fc95 	bl	8000c3a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d035      	beq.n	8001384 <HAL_GPIO_Init+0xe0>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d031      	beq.n	8001384 <HAL_GPIO_Init+0xe0>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b11      	cmp	r3, #17
 8001326:	d02d      	beq.n	8001384 <HAL_GPIO_Init+0xe0>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b02      	cmp	r3, #2
 800132e:	d029      	beq.n	8001384 <HAL_GPIO_Init+0xe0>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	2b12      	cmp	r3, #18
 8001336:	d025      	beq.n	8001384 <HAL_GPIO_Init+0xe0>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001340:	d020      	beq.n	8001384 <HAL_GPIO_Init+0xe0>
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800134a:	d01b      	beq.n	8001384 <HAL_GPIO_Init+0xe0>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001354:	d016      	beq.n	8001384 <HAL_GPIO_Init+0xe0>
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800135e:	d011      	beq.n	8001384 <HAL_GPIO_Init+0xe0>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001368:	d00c      	beq.n	8001384 <HAL_GPIO_Init+0xe0>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001372:	d007      	beq.n	8001384 <HAL_GPIO_Init+0xe0>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b03      	cmp	r3, #3
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0xe0>
 800137c:	21ae      	movs	r1, #174	; 0xae
 800137e:	4809      	ldr	r0, [pc, #36]	; (80013a4 <HAL_GPIO_Init+0x100>)
 8001380:	f7ff fc5b 	bl	8000c3a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
 8001388:	e20c      	b.n	80017a4 <HAL_GPIO_Init+0x500>
 800138a:	bf00      	nop
 800138c:	40020000 	.word	0x40020000
 8001390:	40020400 	.word	0x40020400
 8001394:	40020800 	.word	0x40020800
 8001398:	40020c00 	.word	0x40020c00
 800139c:	40021000 	.word	0x40021000
 80013a0:	40021c00 	.word	0x40021c00
 80013a4:	08008bd4 	.word	0x08008bd4
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013a8:	2201      	movs	r2, #1
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	f040 81ec 	bne.w	800179e <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d005      	beq.n	80013de <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d144      	bne.n	8001468 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00f      	beq.n	8001406 <HAL_GPIO_Init+0x162>
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d00b      	beq.n	8001406 <HAL_GPIO_Init+0x162>
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d007      	beq.n	8001406 <HAL_GPIO_Init+0x162>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x162>
 80013fe:	21c0      	movs	r1, #192	; 0xc0
 8001400:	4884      	ldr	r0, [pc, #528]	; (8001614 <HAL_GPIO_Init+0x370>)
 8001402:	f7ff fc1a 	bl	8000c3a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800143c:	2201      	movs	r2, #1
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	091b      	lsrs	r3, r3, #4
 8001452:	f003 0201 	and.w	r2, r3, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	2b03      	cmp	r3, #3
 8001472:	d027      	beq.n	80014c4 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00b      	beq.n	8001494 <HAL_GPIO_Init+0x1f0>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d007      	beq.n	8001494 <HAL_GPIO_Init+0x1f0>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x1f0>
 800148c:	21d1      	movs	r1, #209	; 0xd1
 800148e:	4861      	ldr	r0, [pc, #388]	; (8001614 <HAL_GPIO_Init+0x370>)
 8001490:	f7ff fbd3 	bl	8000c3a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	f040 80a3 	bne.w	8001618 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d077      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	2b09      	cmp	r3, #9
 80014e0:	d073      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d06f      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d06b      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d067      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d063      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d05f      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d05b      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d057      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d053      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d04f      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	2b04      	cmp	r3, #4
 8001530:	d04b      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	2b04      	cmp	r3, #4
 8001538:	d047      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	2b04      	cmp	r3, #4
 8001540:	d043      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	2b05      	cmp	r3, #5
 8001548:	d03f      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	2b05      	cmp	r3, #5
 8001550:	d03b      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b05      	cmp	r3, #5
 8001558:	d037      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	2b06      	cmp	r3, #6
 8001560:	d033      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	2b06      	cmp	r3, #6
 8001568:	d02f      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	2b05      	cmp	r3, #5
 8001570:	d02b      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	2b06      	cmp	r3, #6
 8001578:	d027      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	2b07      	cmp	r3, #7
 8001580:	d023      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	2b07      	cmp	r3, #7
 8001588:	d01f      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	2b07      	cmp	r3, #7
 8001590:	d01b      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	2b08      	cmp	r3, #8
 8001598:	d017      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	2b0a      	cmp	r3, #10
 80015a0:	d013      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	2b09      	cmp	r3, #9
 80015a8:	d00f      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	2b09      	cmp	r3, #9
 80015b0:	d00b      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	2b0c      	cmp	r3, #12
 80015b8:	d007      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	2b0f      	cmp	r3, #15
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x326>
 80015c2:	21de      	movs	r1, #222	; 0xde
 80015c4:	4813      	ldr	r0, [pc, #76]	; (8001614 <HAL_GPIO_Init+0x370>)
 80015c6:	f7ff fb38 	bl	8000c3a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	08da      	lsrs	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3208      	adds	r2, #8
 80015d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	220f      	movs	r2, #15
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	691a      	ldr	r2, [r3, #16]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	08da      	lsrs	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3208      	adds	r2, #8
 800160c:	69b9      	ldr	r1, [r7, #24]
 800160e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001612:	e001      	b.n	8001618 <HAL_GPIO_Init+0x374>
 8001614:	08008bd4 	.word	0x08008bd4
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0203 	and.w	r2, r3, #3
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80a2 	beq.w	800179e <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b56      	ldr	r3, [pc, #344]	; (80017b8 <HAL_GPIO_Init+0x514>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	4a55      	ldr	r2, [pc, #340]	; (80017b8 <HAL_GPIO_Init+0x514>)
 8001664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001668:	6453      	str	r3, [r2, #68]	; 0x44
 800166a:	4b53      	ldr	r3, [pc, #332]	; (80017b8 <HAL_GPIO_Init+0x514>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001676:	4a51      	ldr	r2, [pc, #324]	; (80017bc <HAL_GPIO_Init+0x518>)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	3302      	adds	r3, #2
 800167e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	220f      	movs	r2, #15
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a48      	ldr	r2, [pc, #288]	; (80017c0 <HAL_GPIO_Init+0x51c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d019      	beq.n	80016d6 <HAL_GPIO_Init+0x432>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a47      	ldr	r2, [pc, #284]	; (80017c4 <HAL_GPIO_Init+0x520>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d013      	beq.n	80016d2 <HAL_GPIO_Init+0x42e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a46      	ldr	r2, [pc, #280]	; (80017c8 <HAL_GPIO_Init+0x524>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d00d      	beq.n	80016ce <HAL_GPIO_Init+0x42a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a45      	ldr	r2, [pc, #276]	; (80017cc <HAL_GPIO_Init+0x528>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d007      	beq.n	80016ca <HAL_GPIO_Init+0x426>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a44      	ldr	r2, [pc, #272]	; (80017d0 <HAL_GPIO_Init+0x52c>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d101      	bne.n	80016c6 <HAL_GPIO_Init+0x422>
 80016c2:	2304      	movs	r3, #4
 80016c4:	e008      	b.n	80016d8 <HAL_GPIO_Init+0x434>
 80016c6:	2307      	movs	r3, #7
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x434>
 80016ca:	2303      	movs	r3, #3
 80016cc:	e004      	b.n	80016d8 <HAL_GPIO_Init+0x434>
 80016ce:	2302      	movs	r3, #2
 80016d0:	e002      	b.n	80016d8 <HAL_GPIO_Init+0x434>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <HAL_GPIO_Init+0x434>
 80016d6:	2300      	movs	r3, #0
 80016d8:	69fa      	ldr	r2, [r7, #28]
 80016da:	f002 0203 	and.w	r2, r2, #3
 80016de:	0092      	lsls	r2, r2, #2
 80016e0:	4093      	lsls	r3, r2
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016e8:	4934      	ldr	r1, [pc, #208]	; (80017bc <HAL_GPIO_Init+0x518>)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	089b      	lsrs	r3, r3, #2
 80016ee:	3302      	adds	r3, #2
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016f6:	4b37      	ldr	r3, [pc, #220]	; (80017d4 <HAL_GPIO_Init+0x530>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	43db      	mvns	r3, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4013      	ands	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800171a:	4a2e      	ldr	r2, [pc, #184]	; (80017d4 <HAL_GPIO_Init+0x530>)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001720:	4b2c      	ldr	r3, [pc, #176]	; (80017d4 <HAL_GPIO_Init+0x530>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001744:	4a23      	ldr	r2, [pc, #140]	; (80017d4 <HAL_GPIO_Init+0x530>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800174a:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <HAL_GPIO_Init+0x530>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800176e:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <HAL_GPIO_Init+0x530>)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_GPIO_Init+0x530>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001798:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_GPIO_Init+0x530>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3301      	adds	r3, #1
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	2b0f      	cmp	r3, #15
 80017a8:	f67f adfe 	bls.w	80013a8 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3720      	adds	r7, #32
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40013800 	.word	0x40013800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40020400 	.word	0x40020400
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020c00 	.word	0x40020c00
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40013c00 	.word	0x40013c00

080017d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d004      	beq.n	80017f4 <HAL_GPIO_ReadPin+0x1c>
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	0c1b      	lsrs	r3, r3, #16
 80017ee:	041b      	lsls	r3, r3, #16
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d004      	beq.n	80017fe <HAL_GPIO_ReadPin+0x26>
 80017f4:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80017f8:	4809      	ldr	r0, [pc, #36]	; (8001820 <HAL_GPIO_ReadPin+0x48>)
 80017fa:	f7ff fa1e 	bl	8000c3a <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691a      	ldr	r2, [r3, #16]
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	4013      	ands	r3, r2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 800180a:	2301      	movs	r3, #1
 800180c:	73fb      	strb	r3, [r7, #15]
 800180e:	e001      	b.n	8001814 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	08008bd4 	.word	0x08008bd4

08001824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
 8001830:	4613      	mov	r3, r2
 8001832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001834:	887b      	ldrh	r3, [r7, #2]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d004      	beq.n	8001844 <HAL_GPIO_WritePin+0x20>
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	0c1b      	lsrs	r3, r3, #16
 800183e:	041b      	lsls	r3, r3, #16
 8001840:	2b00      	cmp	r3, #0
 8001842:	d004      	beq.n	800184e <HAL_GPIO_WritePin+0x2a>
 8001844:	f240 119d 	movw	r1, #413	; 0x19d
 8001848:	480e      	ldr	r0, [pc, #56]	; (8001884 <HAL_GPIO_WritePin+0x60>)
 800184a:	f7ff f9f6 	bl	8000c3a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800184e:	787b      	ldrb	r3, [r7, #1]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d007      	beq.n	8001864 <HAL_GPIO_WritePin+0x40>
 8001854:	787b      	ldrb	r3, [r7, #1]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d004      	beq.n	8001864 <HAL_GPIO_WritePin+0x40>
 800185a:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800185e:	4809      	ldr	r0, [pc, #36]	; (8001884 <HAL_GPIO_WritePin+0x60>)
 8001860:	f7ff f9eb 	bl	8000c3a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001864:	787b      	ldrb	r3, [r7, #1]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001870:	e003      	b.n	800187a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	041a      	lsls	r2, r3, #16
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	619a      	str	r2, [r3, #24]
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	08008bd4 	.word	0x08008bd4

08001888 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	4013      	ands	r3, r2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d006      	beq.n	80018ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018a4:	88fb      	ldrh	r3, [r7, #6]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f806 	bl	80018b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40013c00 	.word	0x40013c00

080018b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80018d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d2:	b08f      	sub	sp, #60	; 0x3c
 80018d4:	af0a      	add	r7, sp, #40	; 0x28
 80018d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e05d      	b.n	800199e <HAL_HCD_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018ea:	d003      	beq.n	80018f4 <HAL_HCD_Init+0x24>
 80018ec:	2179      	movs	r1, #121	; 0x79
 80018ee:	482e      	ldr	r0, [pc, #184]	; (80019a8 <HAL_HCD_Init+0xd8>)
 80018f0:	f7ff f9a3 	bl	8000c3a <assert_failed>

  USBx = hhcd->Instance;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d106      	bne.n	8001914 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f006 fd40 	bl	8008394 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2203      	movs	r2, #3
 8001918:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001924:	2b00      	cmp	r3, #0
 8001926:	d102      	bne.n	800192e <HAL_HCD_Init+0x5e>
  {
    hhcd->Init.dma_enable = 0U;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f003 fd6c 	bl	8005410 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	687e      	ldr	r6, [r7, #4]
 8001940:	466d      	mov	r5, sp
 8001942:	f106 0410 	add.w	r4, r6, #16
 8001946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800194a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800194c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800194e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001952:	e885 0003 	stmia.w	r5, {r0, r1}
 8001956:	1d33      	adds	r3, r6, #4
 8001958:	cb0e      	ldmia	r3, {r1, r2, r3}
 800195a:	6838      	ldr	r0, [r7, #0]
 800195c:	f003 fce6 	bl	800532c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2101      	movs	r1, #1
 8001966:	4618      	mov	r0, r3
 8001968:	f003 fd63 	bl	8005432 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	687e      	ldr	r6, [r7, #4]
 8001974:	466d      	mov	r5, sp
 8001976:	f106 0410 	add.w	r4, r6, #16
 800197a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800197c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800197e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001982:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001986:	e885 0003 	stmia.w	r5, {r0, r1}
 800198a:	1d33      	adds	r3, r6, #4
 800198c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800198e:	6838      	ldr	r0, [r7, #0]
 8001990:	f003 feec 	bl	800576c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3714      	adds	r7, #20
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a6:	bf00      	nop
 80019a8:	08008c10 	.word	0x08008c10

080019ac <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af04      	add	r7, sp, #16
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	4608      	mov	r0, r1
 80019b6:	4611      	mov	r1, r2
 80019b8:	461a      	mov	r2, r3
 80019ba:	4603      	mov	r3, r0
 80019bc:	70fb      	strb	r3, [r7, #3]
 80019be:	460b      	mov	r3, r1
 80019c0:	70bb      	strb	r3, [r7, #2]
 80019c2:	4613      	mov	r3, r2
 80019c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <HAL_HCD_HC_Init+0x28>
 80019d0:	2302      	movs	r3, #2
 80019d2:	e076      	b.n	8001ac2 <HAL_HCD_HC_Init+0x116>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	212c      	movs	r1, #44	; 0x2c
 80019e2:	fb01 f303 	mul.w	r3, r1, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	333d      	adds	r3, #61	; 0x3d
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	212c      	movs	r1, #44	; 0x2c
 80019f4:	fb01 f303 	mul.w	r3, r1, r3
 80019f8:	4413      	add	r3, r2
 80019fa:	3338      	adds	r3, #56	; 0x38
 80019fc:	787a      	ldrb	r2, [r7, #1]
 80019fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	212c      	movs	r1, #44	; 0x2c
 8001a06:	fb01 f303 	mul.w	r3, r1, r3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3340      	adds	r3, #64	; 0x40
 8001a0e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a10:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a12:	78fb      	ldrb	r3, [r7, #3]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	212c      	movs	r1, #44	; 0x2c
 8001a18:	fb01 f303 	mul.w	r3, r1, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3339      	adds	r3, #57	; 0x39
 8001a20:	78fa      	ldrb	r2, [r7, #3]
 8001a22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001a24:	78fb      	ldrb	r3, [r7, #3]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	212c      	movs	r1, #44	; 0x2c
 8001a2a:	fb01 f303 	mul.w	r3, r1, r3
 8001a2e:	4413      	add	r3, r2
 8001a30:	333f      	adds	r3, #63	; 0x3f
 8001a32:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001a36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	78ba      	ldrb	r2, [r7, #2]
 8001a3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a40:	b2d0      	uxtb	r0, r2
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	212c      	movs	r1, #44	; 0x2c
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	333a      	adds	r3, #58	; 0x3a
 8001a4e:	4602      	mov	r2, r0
 8001a50:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a52:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	da09      	bge.n	8001a6e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	212c      	movs	r1, #44	; 0x2c
 8001a60:	fb01 f303 	mul.w	r3, r1, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	333b      	adds	r3, #59	; 0x3b
 8001a68:	2201      	movs	r2, #1
 8001a6a:	701a      	strb	r2, [r3, #0]
 8001a6c:	e008      	b.n	8001a80 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	212c      	movs	r1, #44	; 0x2c
 8001a74:	fb01 f303 	mul.w	r3, r1, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	333b      	adds	r3, #59	; 0x3b
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	212c      	movs	r1, #44	; 0x2c
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	333c      	adds	r3, #60	; 0x3c
 8001a8e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a92:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	787c      	ldrb	r4, [r7, #1]
 8001a9a:	78ba      	ldrb	r2, [r7, #2]
 8001a9c:	78f9      	ldrb	r1, [r7, #3]
 8001a9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001aa0:	9302      	str	r3, [sp, #8]
 8001aa2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	4623      	mov	r3, r4
 8001ab0:	f003 ffe2 	bl	8005a78 <USB_HC_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd90      	pop	{r4, r7, pc}

08001aca <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b084      	sub	sp, #16
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_HCD_HC_Halt+0x1e>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e00f      	b.n	8001b08 <HAL_HCD_HC_Halt+0x3e>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	78fa      	ldrb	r2, [r7, #3]
 8001af6:	4611      	mov	r1, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f004 fa32 	bl	8005f62 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	4608      	mov	r0, r1
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4603      	mov	r3, r0
 8001b20:	70fb      	strb	r3, [r7, #3]
 8001b22:	460b      	mov	r3, r1
 8001b24:	70bb      	strb	r3, [r7, #2]
 8001b26:	4613      	mov	r3, r2
 8001b28:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001b2a:	78fb      	ldrb	r3, [r7, #3]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	212c      	movs	r1, #44	; 0x2c
 8001b30:	fb01 f303 	mul.w	r3, r1, r3
 8001b34:	4413      	add	r3, r2
 8001b36:	333b      	adds	r3, #59	; 0x3b
 8001b38:	78ba      	ldrb	r2, [r7, #2]
 8001b3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	212c      	movs	r1, #44	; 0x2c
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	333f      	adds	r3, #63	; 0x3f
 8001b4a:	787a      	ldrb	r2, [r7, #1]
 8001b4c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b4e:	7c3b      	ldrb	r3, [r7, #16]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d112      	bne.n	8001b7a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	212c      	movs	r1, #44	; 0x2c
 8001b5a:	fb01 f303 	mul.w	r3, r1, r3
 8001b5e:	4413      	add	r3, r2
 8001b60:	3342      	adds	r3, #66	; 0x42
 8001b62:	2203      	movs	r2, #3
 8001b64:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	212c      	movs	r1, #44	; 0x2c
 8001b6c:	fb01 f303 	mul.w	r3, r1, r3
 8001b70:	4413      	add	r3, r2
 8001b72:	333d      	adds	r3, #61	; 0x3d
 8001b74:	7f3a      	ldrb	r2, [r7, #28]
 8001b76:	701a      	strb	r2, [r3, #0]
 8001b78:	e008      	b.n	8001b8c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	212c      	movs	r1, #44	; 0x2c
 8001b80:	fb01 f303 	mul.w	r3, r1, r3
 8001b84:	4413      	add	r3, r2
 8001b86:	3342      	adds	r3, #66	; 0x42
 8001b88:	2202      	movs	r2, #2
 8001b8a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b8c:	787b      	ldrb	r3, [r7, #1]
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	f200 80c6 	bhi.w	8001d20 <HAL_HCD_HC_SubmitRequest+0x210>
 8001b94:	a201      	add	r2, pc, #4	; (adr r2, 8001b9c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9a:	bf00      	nop
 8001b9c:	08001bad 	.word	0x08001bad
 8001ba0:	08001d0d 	.word	0x08001d0d
 8001ba4:	08001c11 	.word	0x08001c11
 8001ba8:	08001c8f 	.word	0x08001c8f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001bac:	7c3b      	ldrb	r3, [r7, #16]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	f040 80b8 	bne.w	8001d24 <HAL_HCD_HC_SubmitRequest+0x214>
 8001bb4:	78bb      	ldrb	r3, [r7, #2]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f040 80b4 	bne.w	8001d24 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001bbc:	8b3b      	ldrh	r3, [r7, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d108      	bne.n	8001bd4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	212c      	movs	r1, #44	; 0x2c
 8001bc8:	fb01 f303 	mul.w	r3, r1, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	3355      	adds	r3, #85	; 0x55
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	212c      	movs	r1, #44	; 0x2c
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	3355      	adds	r3, #85	; 0x55
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d109      	bne.n	8001bfc <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	212c      	movs	r1, #44	; 0x2c
 8001bee:	fb01 f303 	mul.w	r3, r1, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3342      	adds	r3, #66	; 0x42
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bfa:	e093      	b.n	8001d24 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	212c      	movs	r1, #44	; 0x2c
 8001c02:	fb01 f303 	mul.w	r3, r1, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	3342      	adds	r3, #66	; 0x42
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	701a      	strb	r2, [r3, #0]
      break;
 8001c0e:	e089      	b.n	8001d24 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c10:	78bb      	ldrb	r3, [r7, #2]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d11d      	bne.n	8001c52 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	212c      	movs	r1, #44	; 0x2c
 8001c1c:	fb01 f303 	mul.w	r3, r1, r3
 8001c20:	4413      	add	r3, r2
 8001c22:	3355      	adds	r3, #85	; 0x55
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d109      	bne.n	8001c3e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	212c      	movs	r1, #44	; 0x2c
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	3342      	adds	r3, #66	; 0x42
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c3c:	e073      	b.n	8001d26 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c3e:	78fb      	ldrb	r3, [r7, #3]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	212c      	movs	r1, #44	; 0x2c
 8001c44:	fb01 f303 	mul.w	r3, r1, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	3342      	adds	r3, #66	; 0x42
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	701a      	strb	r2, [r3, #0]
      break;
 8001c50:	e069      	b.n	8001d26 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	212c      	movs	r1, #44	; 0x2c
 8001c58:	fb01 f303 	mul.w	r3, r1, r3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3354      	adds	r3, #84	; 0x54
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	212c      	movs	r1, #44	; 0x2c
 8001c6c:	fb01 f303 	mul.w	r3, r1, r3
 8001c70:	4413      	add	r3, r2
 8001c72:	3342      	adds	r3, #66	; 0x42
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
      break;
 8001c78:	e055      	b.n	8001d26 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c7a:	78fb      	ldrb	r3, [r7, #3]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	212c      	movs	r1, #44	; 0x2c
 8001c80:	fb01 f303 	mul.w	r3, r1, r3
 8001c84:	4413      	add	r3, r2
 8001c86:	3342      	adds	r3, #66	; 0x42
 8001c88:	2202      	movs	r2, #2
 8001c8a:	701a      	strb	r2, [r3, #0]
      break;
 8001c8c:	e04b      	b.n	8001d26 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c8e:	78bb      	ldrb	r3, [r7, #2]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d11d      	bne.n	8001cd0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	212c      	movs	r1, #44	; 0x2c
 8001c9a:	fb01 f303 	mul.w	r3, r1, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3355      	adds	r3, #85	; 0x55
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d109      	bne.n	8001cbc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	212c      	movs	r1, #44	; 0x2c
 8001cae:	fb01 f303 	mul.w	r3, r1, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3342      	adds	r3, #66	; 0x42
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cba:	e034      	b.n	8001d26 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	212c      	movs	r1, #44	; 0x2c
 8001cc2:	fb01 f303 	mul.w	r3, r1, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3342      	adds	r3, #66	; 0x42
 8001cca:	2202      	movs	r2, #2
 8001ccc:	701a      	strb	r2, [r3, #0]
      break;
 8001cce:	e02a      	b.n	8001d26 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	212c      	movs	r1, #44	; 0x2c
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	3354      	adds	r3, #84	; 0x54
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d109      	bne.n	8001cf8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	212c      	movs	r1, #44	; 0x2c
 8001cea:	fb01 f303 	mul.w	r3, r1, r3
 8001cee:	4413      	add	r3, r2
 8001cf0:	3342      	adds	r3, #66	; 0x42
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
      break;
 8001cf6:	e016      	b.n	8001d26 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cf8:	78fb      	ldrb	r3, [r7, #3]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	212c      	movs	r1, #44	; 0x2c
 8001cfe:	fb01 f303 	mul.w	r3, r1, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	3342      	adds	r3, #66	; 0x42
 8001d06:	2202      	movs	r2, #2
 8001d08:	701a      	strb	r2, [r3, #0]
      break;
 8001d0a:	e00c      	b.n	8001d26 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	212c      	movs	r1, #44	; 0x2c
 8001d12:	fb01 f303 	mul.w	r3, r1, r3
 8001d16:	4413      	add	r3, r2
 8001d18:	3342      	adds	r3, #66	; 0x42
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
      break;
 8001d1e:	e002      	b.n	8001d26 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001d20:	bf00      	nop
 8001d22:	e000      	b.n	8001d26 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001d24:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d26:	78fb      	ldrb	r3, [r7, #3]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	212c      	movs	r1, #44	; 0x2c
 8001d2c:	fb01 f303 	mul.w	r3, r1, r3
 8001d30:	4413      	add	r3, r2
 8001d32:	3344      	adds	r3, #68	; 0x44
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	8b3a      	ldrh	r2, [r7, #24]
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	202c      	movs	r0, #44	; 0x2c
 8001d40:	fb00 f303 	mul.w	r3, r0, r3
 8001d44:	440b      	add	r3, r1
 8001d46:	334c      	adds	r3, #76	; 0x4c
 8001d48:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	212c      	movs	r1, #44	; 0x2c
 8001d50:	fb01 f303 	mul.w	r3, r1, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	3360      	adds	r3, #96	; 0x60
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d5c:	78fb      	ldrb	r3, [r7, #3]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	212c      	movs	r1, #44	; 0x2c
 8001d62:	fb01 f303 	mul.w	r3, r1, r3
 8001d66:	4413      	add	r3, r2
 8001d68:	3350      	adds	r3, #80	; 0x50
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	212c      	movs	r1, #44	; 0x2c
 8001d74:	fb01 f303 	mul.w	r3, r1, r3
 8001d78:	4413      	add	r3, r2
 8001d7a:	3339      	adds	r3, #57	; 0x39
 8001d7c:	78fa      	ldrb	r2, [r7, #3]
 8001d7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d80:	78fb      	ldrb	r3, [r7, #3]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	212c      	movs	r1, #44	; 0x2c
 8001d86:	fb01 f303 	mul.w	r3, r1, r3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3361      	adds	r3, #97	; 0x61
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	222c      	movs	r2, #44	; 0x2c
 8001d9a:	fb02 f303 	mul.w	r3, r2, r3
 8001d9e:	3338      	adds	r3, #56	; 0x38
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	18d1      	adds	r1, r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	f003 ff86 	bl	8005cbc <USB_HC_StartXfer>
 8001db0:	4603      	mov	r3, r0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop

08001dbc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 fc87 	bl	80056e6 <USB_GetMode>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	f040 80f6 	bne.w	8001fcc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f003 fc6b 	bl	80056c0 <USB_ReadInterrupts>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80ec 	beq.w	8001fca <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 fc62 	bl	80056c0 <USB_ReadInterrupts>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e06:	d104      	bne.n	8001e12 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e10:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 fc52 	bl	80056c0 <USB_ReadInterrupts>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e26:	d104      	bne.n	8001e32 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f003 fc42 	bl	80056c0 <USB_ReadInterrupts>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e46:	d104      	bne.n	8001e52 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f003 fc32 	bl	80056c0 <USB_ReadInterrupts>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d103      	bne.n	8001e6e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f003 fc24 	bl	80056c0 <USB_ReadInterrupts>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e82:	d11c      	bne.n	8001ebe <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e8c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10f      	bne.n	8001ebe <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e9e:	2110      	movs	r1, #16
 8001ea0:	6938      	ldr	r0, [r7, #16]
 8001ea2:	f003 fb13 	bl	80054cc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ea6:	6938      	ldr	r0, [r7, #16]
 8001ea8:	f003 fb44 	bl	8005534 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f003 fd1a 	bl	80058ec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f006 fae9 	bl	8008490 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 fbfc 	bl	80056c0 <USB_ReadInterrupts>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ece:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed2:	d102      	bne.n	8001eda <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f001 f89e 	bl	8003016 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f003 fbee 	bl	80056c0 <USB_ReadInterrupts>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d106      	bne.n	8001efc <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f006 fab2 	bl	8008458 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2208      	movs	r2, #8
 8001efa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f003 fbdd 	bl	80056c0 <USB_ReadInterrupts>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f003 0310 	and.w	r3, r3, #16
 8001f0c:	2b10      	cmp	r3, #16
 8001f0e:	d101      	bne.n	8001f14 <HAL_HCD_IRQHandler+0x158>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <HAL_HCD_IRQHandler+0x15a>
 8001f14:	2300      	movs	r3, #0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d012      	beq.n	8001f40 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699a      	ldr	r2, [r3, #24]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0210 	bic.w	r2, r2, #16
 8001f28:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 ffa1 	bl	8002e72 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699a      	ldr	r2, [r3, #24]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0210 	orr.w	r2, r2, #16
 8001f3e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f003 fbbb 	bl	80056c0 <USB_ReadInterrupts>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f54:	d13a      	bne.n	8001fcc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f003 fff0 	bl	8005f40 <USB_HC_ReadInterrupt>
 8001f60:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	e025      	b.n	8001fb4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	fa22 f303 	lsr.w	r3, r2, r3
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d018      	beq.n	8001fae <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f92:	d106      	bne.n	8001fa2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	4619      	mov	r1, r3
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f8ab 	bl	80020f6 <HCD_HC_IN_IRQHandler>
 8001fa0:	e005      	b.n	8001fae <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 fbf9 	bl	80027a0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d3d4      	bcc.n	8001f68 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fc6:	615a      	str	r2, [r3, #20]
 8001fc8:	e000      	b.n	8001fcc <HAL_HCD_IRQHandler+0x210>
      return;
 8001fca:	bf00      	nop
    }
  }
}
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_HCD_Start+0x16>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e013      	b.n	8002010 <HAL_HCD_Start+0x3e>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f003 fcdc 	bl	80059b4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f003 f9f4 	bl	80053ee <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_HCD_Stop+0x16>
 800202a:	2302      	movs	r3, #2
 800202c:	e00d      	b.n	800204a <HAL_HCD_Stop+0x32>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f004 f8ca 	bl	80061d4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f003 fc7e 	bl	8005960 <USB_ResetPort>
 8002064:	4603      	mov	r3, r0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	460b      	mov	r3, r1
 8002078:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	212c      	movs	r1, #44	; 0x2c
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	4413      	add	r3, r2
 8002086:	3360      	adds	r3, #96	; 0x60
 8002088:	781b      	ldrb	r3, [r3, #0]
}
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
 800209e:	460b      	mov	r3, r1
 80020a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	212c      	movs	r1, #44	; 0x2c
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	3350      	adds	r3, #80	; 0x50
 80020b0:	681b      	ldr	r3, [r3, #0]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f003 fcc2 	bl	8005a54 <USB_GetCurrentFrame>
 80020d0:	4603      	mov	r3, r0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f003 fc9d 	bl	8005a26 <USB_GetHostSpeed>
 80020ec:	4603      	mov	r3, r0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b086      	sub	sp, #24
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	460b      	mov	r3, r1
 8002100:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	015a      	lsls	r2, r3, #5
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4413      	add	r3, r2
 8002118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	2b04      	cmp	r3, #4
 8002124:	d11a      	bne.n	800215c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002132:	461a      	mov	r2, r3
 8002134:	2304      	movs	r3, #4
 8002136:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	212c      	movs	r1, #44	; 0x2c
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	4413      	add	r3, r2
 8002144:	3361      	adds	r3, #97	; 0x61
 8002146:	2206      	movs	r2, #6
 8002148:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f003 ff04 	bl	8005f62 <USB_HC_Halt>
 800215a:	e0af      	b.n	80022bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4413      	add	r3, r2
 8002164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002172:	d11b      	bne.n	80021ac <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4413      	add	r3, r2
 800217c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002180:	461a      	mov	r2, r3
 8002182:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002186:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	212c      	movs	r1, #44	; 0x2c
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	4413      	add	r3, r2
 8002194:	3361      	adds	r3, #97	; 0x61
 8002196:	2207      	movs	r2, #7
 8002198:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f003 fedc 	bl	8005f62 <USB_HC_Halt>
 80021aa:	e087      	b.n	80022bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0320 	and.w	r3, r3, #32
 80021be:	2b20      	cmp	r3, #32
 80021c0:	d109      	bne.n	80021d6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	015a      	lsls	r2, r3, #5
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ce:	461a      	mov	r2, r3
 80021d0:	2320      	movs	r3, #32
 80021d2:	6093      	str	r3, [r2, #8]
 80021d4:	e072      	b.n	80022bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d11a      	bne.n	8002222 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f8:	461a      	mov	r2, r3
 80021fa:	2308      	movs	r3, #8
 80021fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	212c      	movs	r1, #44	; 0x2c
 8002204:	fb01 f303 	mul.w	r3, r1, r3
 8002208:	4413      	add	r3, r2
 800220a:	3361      	adds	r3, #97	; 0x61
 800220c:	2205      	movs	r2, #5
 800220e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	4611      	mov	r1, r2
 800221a:	4618      	mov	r0, r3
 800221c:	f003 fea1 	bl	8005f62 <USB_HC_Halt>
 8002220:	e04c      	b.n	80022bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4413      	add	r3, r2
 800222a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002238:	d11b      	bne.n	8002272 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4413      	add	r3, r2
 8002242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002246:	461a      	mov	r2, r3
 8002248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800224c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	3361      	adds	r3, #97	; 0x61
 800225c:	2208      	movs	r2, #8
 800225e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	4611      	mov	r1, r2
 800226a:	4618      	mov	r0, r3
 800226c:	f003 fe79 	bl	8005f62 <USB_HC_Halt>
 8002270:	e024      	b.n	80022bc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	015a      	lsls	r2, r3, #5
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4413      	add	r3, r2
 800227a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002284:	2b80      	cmp	r3, #128	; 0x80
 8002286:	d119      	bne.n	80022bc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4413      	add	r3, r2
 8002290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002294:	461a      	mov	r2, r3
 8002296:	2380      	movs	r3, #128	; 0x80
 8002298:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	212c      	movs	r1, #44	; 0x2c
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	3361      	adds	r3, #97	; 0x61
 80022a8:	2206      	movs	r2, #6
 80022aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	b2d2      	uxtb	r2, r2
 80022b4:	4611      	mov	r1, r2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f003 fe53 	bl	8005f62 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022d2:	d112      	bne.n	80022fa <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	4611      	mov	r1, r2
 80022de:	4618      	mov	r0, r3
 80022e0:	f003 fe3f 	bl	8005f62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f0:	461a      	mov	r2, r3
 80022f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022f6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80022f8:	e24e      	b.n	8002798 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4413      	add	r3, r2
 8002302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	f040 80df 	bne.w	80024d0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d019      	beq.n	800234e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	3348      	adds	r3, #72	; 0x48
 8002328:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	0159      	lsls	r1, r3, #5
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	440b      	add	r3, r1
 8002332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800233c:	1ad2      	subs	r2, r2, r3
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	202c      	movs	r0, #44	; 0x2c
 8002344:	fb00 f303 	mul.w	r3, r0, r3
 8002348:	440b      	add	r3, r1
 800234a:	3350      	adds	r3, #80	; 0x50
 800234c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	212c      	movs	r1, #44	; 0x2c
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	4413      	add	r3, r2
 800235a:	3361      	adds	r3, #97	; 0x61
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	212c      	movs	r1, #44	; 0x2c
 8002366:	fb01 f303 	mul.w	r3, r1, r3
 800236a:	4413      	add	r3, r2
 800236c:	335c      	adds	r3, #92	; 0x5c
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	015a      	lsls	r2, r3, #5
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4413      	add	r3, r2
 800237a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237e:	461a      	mov	r2, r3
 8002380:	2301      	movs	r3, #1
 8002382:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	212c      	movs	r1, #44	; 0x2c
 800238a:	fb01 f303 	mul.w	r3, r1, r3
 800238e:	4413      	add	r3, r2
 8002390:	333f      	adds	r3, #63	; 0x3f
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d009      	beq.n	80023ac <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	212c      	movs	r1, #44	; 0x2c
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	4413      	add	r3, r2
 80023a4:	333f      	adds	r3, #63	; 0x3f
 80023a6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d111      	bne.n	80023d0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 fdd3 	bl	8005f62 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c8:	461a      	mov	r2, r3
 80023ca:	2310      	movs	r3, #16
 80023cc:	6093      	str	r3, [r2, #8]
 80023ce:	e03a      	b.n	8002446 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	212c      	movs	r1, #44	; 0x2c
 80023d6:	fb01 f303 	mul.w	r3, r1, r3
 80023da:	4413      	add	r3, r2
 80023dc:	333f      	adds	r3, #63	; 0x3f
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d009      	beq.n	80023f8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	212c      	movs	r1, #44	; 0x2c
 80023ea:	fb01 f303 	mul.w	r3, r1, r3
 80023ee:	4413      	add	r3, r2
 80023f0:	333f      	adds	r3, #63	; 0x3f
 80023f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d126      	bne.n	8002446 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	0151      	lsls	r1, r2, #5
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	440a      	add	r2, r1
 800240e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002412:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002416:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	3360      	adds	r3, #96	; 0x60
 8002426:	2201      	movs	r2, #1
 8002428:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	b2d9      	uxtb	r1, r3
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	202c      	movs	r0, #44	; 0x2c
 8002434:	fb00 f303 	mul.w	r3, r0, r3
 8002438:	4413      	add	r3, r2
 800243a:	3360      	adds	r3, #96	; 0x60
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f006 f833 	bl	80084ac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d12b      	bne.n	80024a6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	212c      	movs	r1, #44	; 0x2c
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	4413      	add	r3, r2
 800245a:	3348      	adds	r3, #72	; 0x48
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	202c      	movs	r0, #44	; 0x2c
 8002464:	fb00 f202 	mul.w	r2, r0, r2
 8002468:	440a      	add	r2, r1
 800246a:	3240      	adds	r2, #64	; 0x40
 800246c:	8812      	ldrh	r2, [r2, #0]
 800246e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 818e 	beq.w	8002798 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	212c      	movs	r1, #44	; 0x2c
 8002482:	fb01 f303 	mul.w	r3, r1, r3
 8002486:	4413      	add	r3, r2
 8002488:	3354      	adds	r3, #84	; 0x54
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	f083 0301 	eor.w	r3, r3, #1
 8002490:	b2d8      	uxtb	r0, r3
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	212c      	movs	r1, #44	; 0x2c
 8002498:	fb01 f303 	mul.w	r3, r1, r3
 800249c:	4413      	add	r3, r2
 800249e:	3354      	adds	r3, #84	; 0x54
 80024a0:	4602      	mov	r2, r0
 80024a2:	701a      	strb	r2, [r3, #0]
}
 80024a4:	e178      	b.n	8002798 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	212c      	movs	r1, #44	; 0x2c
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	3354      	adds	r3, #84	; 0x54
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	f083 0301 	eor.w	r3, r3, #1
 80024ba:	b2d8      	uxtb	r0, r3
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	212c      	movs	r1, #44	; 0x2c
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	3354      	adds	r3, #84	; 0x54
 80024ca:	4602      	mov	r2, r0
 80024cc:	701a      	strb	r2, [r3, #0]
}
 80024ce:	e163      	b.n	8002798 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	f040 80f6 	bne.w	80026d4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	212c      	movs	r1, #44	; 0x2c
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	3361      	adds	r3, #97	; 0x61
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d109      	bne.n	8002510 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	212c      	movs	r1, #44	; 0x2c
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	4413      	add	r3, r2
 8002508:	3360      	adds	r3, #96	; 0x60
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
 800250e:	e0c9      	b.n	80026a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	212c      	movs	r1, #44	; 0x2c
 8002516:	fb01 f303 	mul.w	r3, r1, r3
 800251a:	4413      	add	r3, r2
 800251c:	3361      	adds	r3, #97	; 0x61
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b05      	cmp	r3, #5
 8002522:	d109      	bne.n	8002538 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	212c      	movs	r1, #44	; 0x2c
 800252a:	fb01 f303 	mul.w	r3, r1, r3
 800252e:	4413      	add	r3, r2
 8002530:	3360      	adds	r3, #96	; 0x60
 8002532:	2205      	movs	r2, #5
 8002534:	701a      	strb	r2, [r3, #0]
 8002536:	e0b5      	b.n	80026a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	212c      	movs	r1, #44	; 0x2c
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	4413      	add	r3, r2
 8002544:	3361      	adds	r3, #97	; 0x61
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b06      	cmp	r3, #6
 800254a:	d009      	beq.n	8002560 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	212c      	movs	r1, #44	; 0x2c
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	4413      	add	r3, r2
 8002558:	3361      	adds	r3, #97	; 0x61
 800255a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800255c:	2b08      	cmp	r3, #8
 800255e:	d150      	bne.n	8002602 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	212c      	movs	r1, #44	; 0x2c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	335c      	adds	r3, #92	; 0x5c
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	202c      	movs	r0, #44	; 0x2c
 8002578:	fb00 f303 	mul.w	r3, r0, r3
 800257c:	440b      	add	r3, r1
 800257e:	335c      	adds	r3, #92	; 0x5c
 8002580:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	212c      	movs	r1, #44	; 0x2c
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	4413      	add	r3, r2
 800258e:	335c      	adds	r3, #92	; 0x5c
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d912      	bls.n	80025bc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	212c      	movs	r1, #44	; 0x2c
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	4413      	add	r3, r2
 80025a2:	335c      	adds	r3, #92	; 0x5c
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	3360      	adds	r3, #96	; 0x60
 80025b6:	2204      	movs	r2, #4
 80025b8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025ba:	e073      	b.n	80026a4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	212c      	movs	r1, #44	; 0x2c
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	3360      	adds	r3, #96	; 0x60
 80025ca:	2202      	movs	r2, #2
 80025cc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025e4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025ec:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fa:	461a      	mov	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002600:	e050      	b.n	80026a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	212c      	movs	r1, #44	; 0x2c
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	3361      	adds	r3, #97	; 0x61
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b03      	cmp	r3, #3
 8002614:	d122      	bne.n	800265c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	3360      	adds	r3, #96	; 0x60
 8002624:	2202      	movs	r2, #2
 8002626:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800263e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002646:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002654:	461a      	mov	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e023      	b.n	80026a4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	212c      	movs	r1, #44	; 0x2c
 8002662:	fb01 f303 	mul.w	r3, r1, r3
 8002666:	4413      	add	r3, r2
 8002668:	3361      	adds	r3, #97	; 0x61
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b07      	cmp	r3, #7
 800266e:	d119      	bne.n	80026a4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	212c      	movs	r1, #44	; 0x2c
 8002676:	fb01 f303 	mul.w	r3, r1, r3
 800267a:	4413      	add	r3, r2
 800267c:	335c      	adds	r3, #92	; 0x5c
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	202c      	movs	r0, #44	; 0x2c
 8002688:	fb00 f303 	mul.w	r3, r0, r3
 800268c:	440b      	add	r3, r1
 800268e:	335c      	adds	r3, #92	; 0x5c
 8002690:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	212c      	movs	r1, #44	; 0x2c
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	4413      	add	r3, r2
 800269e:	3360      	adds	r3, #96	; 0x60
 80026a0:	2204      	movs	r2, #4
 80026a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b0:	461a      	mov	r2, r3
 80026b2:	2302      	movs	r3, #2
 80026b4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	b2d9      	uxtb	r1, r3
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	202c      	movs	r0, #44	; 0x2c
 80026c0:	fb00 f303 	mul.w	r3, r0, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	3360      	adds	r3, #96	; 0x60
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f005 feed 	bl	80084ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80026d2:	e061      	b.n	8002798 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b10      	cmp	r3, #16
 80026e8:	d156      	bne.n	8002798 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	212c      	movs	r1, #44	; 0x2c
 80026f0:	fb01 f303 	mul.w	r3, r1, r3
 80026f4:	4413      	add	r3, r2
 80026f6:	333f      	adds	r3, #63	; 0x3f
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d111      	bne.n	8002722 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	212c      	movs	r1, #44	; 0x2c
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	4413      	add	r3, r2
 800270a:	335c      	adds	r3, #92	; 0x5c
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f003 fc21 	bl	8005f62 <USB_HC_Halt>
 8002720:	e031      	b.n	8002786 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	212c      	movs	r1, #44	; 0x2c
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	4413      	add	r3, r2
 800272e:	333f      	adds	r3, #63	; 0x3f
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d009      	beq.n	800274a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	333f      	adds	r3, #63	; 0x3f
 8002744:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002746:	2b02      	cmp	r3, #2
 8002748:	d11d      	bne.n	8002786 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	212c      	movs	r1, #44	; 0x2c
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	4413      	add	r3, r2
 8002756:	335c      	adds	r3, #92	; 0x5c
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d110      	bne.n	8002786 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	212c      	movs	r1, #44	; 0x2c
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	4413      	add	r3, r2
 8002770:	3361      	adds	r3, #97	; 0x61
 8002772:	2203      	movs	r2, #3
 8002774:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	4611      	mov	r1, r2
 8002780:	4618      	mov	r0, r3
 8002782:	f003 fbee 	bl	8005f62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4413      	add	r3, r2
 800278e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002792:	461a      	mov	r2, r3
 8002794:	2310      	movs	r3, #16
 8002796:	6093      	str	r3, [r2, #8]
}
 8002798:	bf00      	nop
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d11a      	bne.n	8002806 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027dc:	461a      	mov	r2, r3
 80027de:	2304      	movs	r3, #4
 80027e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	212c      	movs	r1, #44	; 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	3361      	adds	r3, #97	; 0x61
 80027f0:	2206      	movs	r2, #6
 80027f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	4611      	mov	r1, r2
 80027fe:	4618      	mov	r0, r3
 8002800:	f003 fbaf 	bl	8005f62 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002804:	e331      	b.n	8002e6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b20      	cmp	r3, #32
 800281a:	d12e      	bne.n	800287a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002828:	461a      	mov	r2, r3
 800282a:	2320      	movs	r3, #32
 800282c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	212c      	movs	r1, #44	; 0x2c
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	333d      	adds	r3, #61	; 0x3d
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b01      	cmp	r3, #1
 8002840:	f040 8313 	bne.w	8002e6a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	333d      	adds	r3, #61	; 0x3d
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	3360      	adds	r3, #96	; 0x60
 8002864:	2202      	movs	r2, #2
 8002866:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	4611      	mov	r1, r2
 8002872:	4618      	mov	r0, r3
 8002874:	f003 fb75 	bl	8005f62 <USB_HC_Halt>
}
 8002878:	e2f7      	b.n	8002e6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800288c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002890:	d112      	bne.n	80028b8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	4413      	add	r3, r2
 800289a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289e:	461a      	mov	r2, r3
 80028a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028a4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f003 fb56 	bl	8005f62 <USB_HC_Halt>
}
 80028b6:	e2d8      	b.n	8002e6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d140      	bne.n	8002950 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	212c      	movs	r1, #44	; 0x2c
 80028d4:	fb01 f303 	mul.w	r3, r1, r3
 80028d8:	4413      	add	r3, r2
 80028da:	335c      	adds	r3, #92	; 0x5c
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f2:	2b40      	cmp	r3, #64	; 0x40
 80028f4:	d111      	bne.n	800291a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	212c      	movs	r1, #44	; 0x2c
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	4413      	add	r3, r2
 8002902:	333d      	adds	r3, #61	; 0x3d
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	015a      	lsls	r2, r3, #5
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	4413      	add	r3, r2
 8002910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002914:	461a      	mov	r2, r3
 8002916:	2340      	movs	r3, #64	; 0x40
 8002918:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	015a      	lsls	r2, r3, #5
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	4413      	add	r3, r2
 8002922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002926:	461a      	mov	r2, r3
 8002928:	2301      	movs	r3, #1
 800292a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	3361      	adds	r3, #97	; 0x61
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f003 fb0a 	bl	8005f62 <USB_HC_Halt>
}
 800294e:	e28c      	b.n	8002e6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002962:	2b40      	cmp	r3, #64	; 0x40
 8002964:	d12c      	bne.n	80029c0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	212c      	movs	r1, #44	; 0x2c
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	4413      	add	r3, r2
 8002972:	3361      	adds	r3, #97	; 0x61
 8002974:	2204      	movs	r2, #4
 8002976:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	333d      	adds	r3, #61	; 0x3d
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	212c      	movs	r1, #44	; 0x2c
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	4413      	add	r3, r2
 8002996:	335c      	adds	r3, #92	; 0x5c
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f003 fadb 	bl	8005f62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b8:	461a      	mov	r2, r3
 80029ba:	2340      	movs	r3, #64	; 0x40
 80029bc:	6093      	str	r3, [r2, #8]
}
 80029be:	e254      	b.n	8002e6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d11a      	bne.n	8002a0c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	015a      	lsls	r2, r3, #5
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e2:	461a      	mov	r2, r3
 80029e4:	2308      	movs	r3, #8
 80029e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	3361      	adds	r3, #97	; 0x61
 80029f6:	2205      	movs	r2, #5
 80029f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f003 faac 	bl	8005f62 <USB_HC_Halt>
}
 8002a0a:	e22e      	b.n	8002e6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d140      	bne.n	8002aa4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	212c      	movs	r1, #44	; 0x2c
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	335c      	adds	r3, #92	; 0x5c
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3361      	adds	r3, #97	; 0x61
 8002a42:	2203      	movs	r2, #3
 8002a44:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	212c      	movs	r1, #44	; 0x2c
 8002a4c:	fb01 f303 	mul.w	r3, r1, r3
 8002a50:	4413      	add	r3, r2
 8002a52:	333d      	adds	r3, #61	; 0x3d
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d112      	bne.n	8002a80 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	333c      	adds	r3, #60	; 0x3c
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d108      	bne.n	8002a80 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	212c      	movs	r1, #44	; 0x2c
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	4413      	add	r3, r2
 8002a7a:	333d      	adds	r3, #61	; 0x3d
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	4611      	mov	r1, r2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f003 fa69 	bl	8005f62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	2310      	movs	r3, #16
 8002aa0:	6093      	str	r3, [r2, #8]
}
 8002aa2:	e1e2      	b.n	8002e6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab6:	2b80      	cmp	r3, #128	; 0x80
 8002ab8:	d164      	bne.n	8002b84 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d111      	bne.n	8002ae6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	3361      	adds	r3, #97	; 0x61
 8002ad0:	2206      	movs	r2, #6
 8002ad2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	4611      	mov	r1, r2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f003 fa3f 	bl	8005f62 <USB_HC_Halt>
 8002ae4:	e044      	b.n	8002b70 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	212c      	movs	r1, #44	; 0x2c
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	335c      	adds	r3, #92	; 0x5c
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	202c      	movs	r0, #44	; 0x2c
 8002afe:	fb00 f303 	mul.w	r3, r0, r3
 8002b02:	440b      	add	r3, r1
 8002b04:	335c      	adds	r3, #92	; 0x5c
 8002b06:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	335c      	adds	r3, #92	; 0x5c
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d920      	bls.n	8002b5e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	212c      	movs	r1, #44	; 0x2c
 8002b22:	fb01 f303 	mul.w	r3, r1, r3
 8002b26:	4413      	add	r3, r2
 8002b28:	335c      	adds	r3, #92	; 0x5c
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3360      	adds	r3, #96	; 0x60
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	b2d9      	uxtb	r1, r3
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	202c      	movs	r0, #44	; 0x2c
 8002b4a:	fb00 f303 	mul.w	r3, r0, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	3360      	adds	r3, #96	; 0x60
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f005 fca8 	bl	80084ac <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b5c:	e008      	b.n	8002b70 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	212c      	movs	r1, #44	; 0x2c
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	4413      	add	r3, r2
 8002b6a:	3360      	adds	r3, #96	; 0x60
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	6093      	str	r3, [r2, #8]
}
 8002b82:	e172      	b.n	8002e6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9a:	d11b      	bne.n	8002bd4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	212c      	movs	r1, #44	; 0x2c
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3361      	adds	r3, #97	; 0x61
 8002baa:	2208      	movs	r2, #8
 8002bac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f003 f9d2 	bl	8005f62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bd0:	6093      	str	r3, [r2, #8]
}
 8002bd2:	e14a      	b.n	8002e6a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	f040 813f 	bne.w	8002e6a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	212c      	movs	r1, #44	; 0x2c
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3361      	adds	r3, #97	; 0x61
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d17d      	bne.n	8002cfc <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	212c      	movs	r1, #44	; 0x2c
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3360      	adds	r3, #96	; 0x60
 8002c0e:	2201      	movs	r2, #1
 8002c10:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	333f      	adds	r3, #63	; 0x3f
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d00a      	beq.n	8002c3c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	212c      	movs	r1, #44	; 0x2c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	333f      	adds	r3, #63	; 0x3f
 8002c34:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	f040 8100 	bne.w	8002e3c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d113      	bne.n	8002c6c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	212c      	movs	r1, #44	; 0x2c
 8002c4a:	fb01 f303 	mul.w	r3, r1, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	3355      	adds	r3, #85	; 0x55
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	f083 0301 	eor.w	r3, r3, #1
 8002c58:	b2d8      	uxtb	r0, r3
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	212c      	movs	r1, #44	; 0x2c
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	3355      	adds	r3, #85	; 0x55
 8002c68:	4602      	mov	r2, r0
 8002c6a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	f040 80e3 	bne.w	8002e3c <HCD_HC_OUT_IRQHandler+0x69c>
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	212c      	movs	r1, #44	; 0x2c
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	334c      	adds	r3, #76	; 0x4c
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 80d8 	beq.w	8002e3c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	334c      	adds	r3, #76	; 0x4c
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	202c      	movs	r0, #44	; 0x2c
 8002ca2:	fb00 f202 	mul.w	r2, r0, r2
 8002ca6:	440a      	add	r2, r1
 8002ca8:	3240      	adds	r2, #64	; 0x40
 8002caa:	8812      	ldrh	r2, [r2, #0]
 8002cac:	4413      	add	r3, r2
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	202c      	movs	r0, #44	; 0x2c
 8002cb6:	fb00 f202 	mul.w	r2, r0, r2
 8002cba:	440a      	add	r2, r1
 8002cbc:	3240      	adds	r2, #64	; 0x40
 8002cbe:	8812      	ldrh	r2, [r2, #0]
 8002cc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80b5 	beq.w	8002e3c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	212c      	movs	r1, #44	; 0x2c
 8002cd8:	fb01 f303 	mul.w	r3, r1, r3
 8002cdc:	4413      	add	r3, r2
 8002cde:	3355      	adds	r3, #85	; 0x55
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	f083 0301 	eor.w	r3, r3, #1
 8002ce6:	b2d8      	uxtb	r0, r3
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	212c      	movs	r1, #44	; 0x2c
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3355      	adds	r3, #85	; 0x55
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	701a      	strb	r2, [r3, #0]
 8002cfa:	e09f      	b.n	8002e3c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	3361      	adds	r3, #97	; 0x61
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d109      	bne.n	8002d24 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	212c      	movs	r1, #44	; 0x2c
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3360      	adds	r3, #96	; 0x60
 8002d1e:	2202      	movs	r2, #2
 8002d20:	701a      	strb	r2, [r3, #0]
 8002d22:	e08b      	b.n	8002e3c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	212c      	movs	r1, #44	; 0x2c
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3361      	adds	r3, #97	; 0x61
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d109      	bne.n	8002d4c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3360      	adds	r3, #96	; 0x60
 8002d46:	2202      	movs	r2, #2
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	e077      	b.n	8002e3c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	212c      	movs	r1, #44	; 0x2c
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	3361      	adds	r3, #97	; 0x61
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b05      	cmp	r3, #5
 8002d5e:	d109      	bne.n	8002d74 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3360      	adds	r3, #96	; 0x60
 8002d6e:	2205      	movs	r2, #5
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	e063      	b.n	8002e3c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	3361      	adds	r3, #97	; 0x61
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b06      	cmp	r3, #6
 8002d86:	d009      	beq.n	8002d9c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	3361      	adds	r3, #97	; 0x61
 8002d96:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d14f      	bne.n	8002e3c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	335c      	adds	r3, #92	; 0x5c
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	202c      	movs	r0, #44	; 0x2c
 8002db4:	fb00 f303 	mul.w	r3, r0, r3
 8002db8:	440b      	add	r3, r1
 8002dba:	335c      	adds	r3, #92	; 0x5c
 8002dbc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	212c      	movs	r1, #44	; 0x2c
 8002dc4:	fb01 f303 	mul.w	r3, r1, r3
 8002dc8:	4413      	add	r3, r2
 8002dca:	335c      	adds	r3, #92	; 0x5c
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d912      	bls.n	8002df8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	212c      	movs	r1, #44	; 0x2c
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	4413      	add	r3, r2
 8002dde:	335c      	adds	r3, #92	; 0x5c
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	212c      	movs	r1, #44	; 0x2c
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	3360      	adds	r3, #96	; 0x60
 8002df2:	2204      	movs	r2, #4
 8002df4:	701a      	strb	r2, [r3, #0]
 8002df6:	e021      	b.n	8002e3c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	3360      	adds	r3, #96	; 0x60
 8002e06:	2202      	movs	r2, #2
 8002e08:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	015a      	lsls	r2, r3, #5
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e20:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e28:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e36:	461a      	mov	r2, r3
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	b2d9      	uxtb	r1, r3
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	202c      	movs	r0, #44	; 0x2c
 8002e58:	fb00 f303 	mul.w	r3, r0, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3360      	adds	r3, #96	; 0x60
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f005 fb21 	bl	80084ac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e6a:	bf00      	nop
 8002e6c:	3720      	adds	r7, #32
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b08a      	sub	sp, #40	; 0x28
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	0c5b      	lsrs	r3, r3, #17
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ea6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d004      	beq.n	8002eb8 <HCD_RXQLVL_IRQHandler+0x46>
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2b05      	cmp	r3, #5
 8002eb2:	f000 80a9 	beq.w	8003008 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002eb6:	e0aa      	b.n	800300e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 80a6 	beq.w	800300c <HCD_RXQLVL_IRQHandler+0x19a>
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	212c      	movs	r1, #44	; 0x2c
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	3344      	adds	r3, #68	; 0x44
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 809b 	beq.w	800300c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	212c      	movs	r1, #44	; 0x2c
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3350      	adds	r3, #80	; 0x50
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	441a      	add	r2, r3
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	202c      	movs	r0, #44	; 0x2c
 8002ef0:	fb00 f303 	mul.w	r3, r0, r3
 8002ef4:	440b      	add	r3, r1
 8002ef6:	334c      	adds	r3, #76	; 0x4c
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d87a      	bhi.n	8002ff4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	212c      	movs	r1, #44	; 0x2c
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3344      	adds	r3, #68	; 0x44
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	b292      	uxth	r2, r2
 8002f16:	4619      	mov	r1, r3
 8002f18:	f002 fb7a 	bl	8005610 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	212c      	movs	r1, #44	; 0x2c
 8002f22:	fb01 f303 	mul.w	r3, r1, r3
 8002f26:	4413      	add	r3, r2
 8002f28:	3344      	adds	r3, #68	; 0x44
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	441a      	add	r2, r3
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	202c      	movs	r0, #44	; 0x2c
 8002f36:	fb00 f303 	mul.w	r3, r0, r3
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3344      	adds	r3, #68	; 0x44
 8002f3e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	212c      	movs	r1, #44	; 0x2c
 8002f46:	fb01 f303 	mul.w	r3, r1, r3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3350      	adds	r3, #80	; 0x50
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	441a      	add	r2, r3
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	202c      	movs	r0, #44	; 0x2c
 8002f5a:	fb00 f303 	mul.w	r3, r0, r3
 8002f5e:	440b      	add	r3, r1
 8002f60:	3350      	adds	r3, #80	; 0x50
 8002f62:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	0cdb      	lsrs	r3, r3, #19
 8002f74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f78:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	212c      	movs	r1, #44	; 0x2c
 8002f80:	fb01 f303 	mul.w	r3, r1, r3
 8002f84:	4413      	add	r3, r2
 8002f86:	3340      	adds	r3, #64	; 0x40
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d13c      	bne.n	800300c <HCD_RXQLVL_IRQHandler+0x19a>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d039      	beq.n	800300c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fb6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	212c      	movs	r1, #44	; 0x2c
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3354      	adds	r3, #84	; 0x54
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	f083 0301 	eor.w	r3, r3, #1
 8002fde:	b2d8      	uxtb	r0, r3
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	212c      	movs	r1, #44	; 0x2c
 8002fe6:	fb01 f303 	mul.w	r3, r1, r3
 8002fea:	4413      	add	r3, r2
 8002fec:	3354      	adds	r3, #84	; 0x54
 8002fee:	4602      	mov	r2, r0
 8002ff0:	701a      	strb	r2, [r3, #0]
      break;
 8002ff2:	e00b      	b.n	800300c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	212c      	movs	r1, #44	; 0x2c
 8002ffa:	fb01 f303 	mul.w	r3, r1, r3
 8002ffe:	4413      	add	r3, r2
 8003000:	3360      	adds	r3, #96	; 0x60
 8003002:	2204      	movs	r2, #4
 8003004:	701a      	strb	r2, [r3, #0]
      break;
 8003006:	e001      	b.n	800300c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003008:	bf00      	nop
 800300a:	e000      	b.n	800300e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800300c:	bf00      	nop
  }
}
 800300e:	bf00      	nop
 8003010:	3728      	adds	r7, #40	; 0x28
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b086      	sub	sp, #24
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003042:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b02      	cmp	r3, #2
 800304c:	d10b      	bne.n	8003066 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b01      	cmp	r3, #1
 8003056:	d102      	bne.n	800305e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f005 fa0b 	bl	8008474 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f043 0302 	orr.w	r3, r3, #2
 8003064:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b08      	cmp	r3, #8
 800306e:	d132      	bne.n	80030d6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f043 0308 	orr.w	r3, r3, #8
 8003076:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	2b04      	cmp	r3, #4
 8003080:	d126      	bne.n	80030d0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d113      	bne.n	80030b2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003090:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003094:	d106      	bne.n	80030a4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2102      	movs	r1, #2
 800309c:	4618      	mov	r0, r3
 800309e:	f002 fc25 	bl	80058ec <USB_InitFSLSPClkSel>
 80030a2:	e011      	b.n	80030c8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2101      	movs	r1, #1
 80030aa:	4618      	mov	r0, r3
 80030ac:	f002 fc1e 	bl	80058ec <USB_InitFSLSPClkSel>
 80030b0:	e00a      	b.n	80030c8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d106      	bne.n	80030c8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030c0:	461a      	mov	r2, r3
 80030c2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80030c6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f005 f9fd 	bl	80084c8 <HAL_HCD_PortEnabled_Callback>
 80030ce:	e002      	b.n	80030d6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f005 fa07 	bl	80084e4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b20      	cmp	r3, #32
 80030de:	d103      	bne.n	80030e8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f043 0320 	orr.w	r3, r3, #32
 80030e6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030ee:	461a      	mov	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	6013      	str	r3, [r2, #0]
}
 80030f4:	bf00      	nop
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e1bd      	b.n	800348a <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a93      	ldr	r2, [pc, #588]	; (8003360 <HAL_I2C_Init+0x264>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00e      	beq.n	8003136 <HAL_I2C_Init+0x3a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a91      	ldr	r2, [pc, #580]	; (8003364 <HAL_I2C_Init+0x268>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d009      	beq.n	8003136 <HAL_I2C_Init+0x3a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a90      	ldr	r2, [pc, #576]	; (8003368 <HAL_I2C_Init+0x26c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d004      	beq.n	8003136 <HAL_I2C_Init+0x3a>
 800312c:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8003130:	488e      	ldr	r0, [pc, #568]	; (800336c <HAL_I2C_Init+0x270>)
 8003132:	f7fd fd82 	bl	8000c3a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d004      	beq.n	8003148 <HAL_I2C_Init+0x4c>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4a8b      	ldr	r2, [pc, #556]	; (8003370 <HAL_I2C_Init+0x274>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d904      	bls.n	8003152 <HAL_I2C_Init+0x56>
 8003148:	f240 11bf 	movw	r1, #447	; 0x1bf
 800314c:	4887      	ldr	r0, [pc, #540]	; (800336c <HAL_I2C_Init+0x270>)
 800314e:	f7fd fd74 	bl	8000c3a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d009      	beq.n	800316e <HAL_I2C_Init+0x72>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003162:	d004      	beq.n	800316e <HAL_I2C_Init+0x72>
 8003164:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003168:	4880      	ldr	r0, [pc, #512]	; (800336c <HAL_I2C_Init+0x270>)
 800316a:	f7fd fd66 	bl	8000c3a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003176:	f023 0303 	bic.w	r3, r3, #3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d004      	beq.n	8003188 <HAL_I2C_Init+0x8c>
 800317e:	f240 11c1 	movw	r1, #449	; 0x1c1
 8003182:	487a      	ldr	r0, [pc, #488]	; (800336c <HAL_I2C_Init+0x270>)
 8003184:	f7fd fd59 	bl	8000c3a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003190:	d009      	beq.n	80031a6 <HAL_I2C_Init+0xaa>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800319a:	d004      	beq.n	80031a6 <HAL_I2C_Init+0xaa>
 800319c:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80031a0:	4872      	ldr	r0, [pc, #456]	; (800336c <HAL_I2C_Init+0x270>)
 80031a2:	f7fd fd4a 	bl	8000c3a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d008      	beq.n	80031c0 <HAL_I2C_Init+0xc4>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d004      	beq.n	80031c0 <HAL_I2C_Init+0xc4>
 80031b6:	f240 11c3 	movw	r1, #451	; 0x1c3
 80031ba:	486c      	ldr	r0, [pc, #432]	; (800336c <HAL_I2C_Init+0x270>)
 80031bc:	f7fd fd3d 	bl	8000c3a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d004      	beq.n	80031d6 <HAL_I2C_Init+0xda>
 80031cc:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80031d0:	4866      	ldr	r0, [pc, #408]	; (800336c <HAL_I2C_Init+0x270>)
 80031d2:	f7fd fd32 	bl	8000c3a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d008      	beq.n	80031f0 <HAL_I2C_Init+0xf4>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	2b40      	cmp	r3, #64	; 0x40
 80031e4:	d004      	beq.n	80031f0 <HAL_I2C_Init+0xf4>
 80031e6:	f240 11c5 	movw	r1, #453	; 0x1c5
 80031ea:	4860      	ldr	r0, [pc, #384]	; (800336c <HAL_I2C_Init+0x270>)
 80031ec:	f7fd fd25 	bl	8000c3a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_I2C_Init+0x10e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	2b80      	cmp	r3, #128	; 0x80
 80031fe:	d004      	beq.n	800320a <HAL_I2C_Init+0x10e>
 8003200:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8003204:	4859      	ldr	r0, [pc, #356]	; (800336c <HAL_I2C_Init+0x270>)
 8003206:	f7fd fd18 	bl	8000c3a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fd fa8c 	bl	800073c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2224      	movs	r2, #36	; 0x24
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0201 	bic.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800324a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800325a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800325c:	f001 fc40 	bl	8004ae0 <HAL_RCC_GetPCLK1Freq>
 8003260:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4a43      	ldr	r2, [pc, #268]	; (8003374 <HAL_I2C_Init+0x278>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d807      	bhi.n	800327c <HAL_I2C_Init+0x180>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4a42      	ldr	r2, [pc, #264]	; (8003378 <HAL_I2C_Init+0x27c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	bf94      	ite	ls
 8003274:	2301      	movls	r3, #1
 8003276:	2300      	movhi	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e006      	b.n	800328a <HAL_I2C_Init+0x18e>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4a3f      	ldr	r2, [pc, #252]	; (800337c <HAL_I2C_Init+0x280>)
 8003280:	4293      	cmp	r3, r2
 8003282:	bf94      	ite	ls
 8003284:	2301      	movls	r3, #1
 8003286:	2300      	movhi	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e0fb      	b.n	800348a <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4a3a      	ldr	r2, [pc, #232]	; (8003380 <HAL_I2C_Init+0x284>)
 8003296:	fba2 2303 	umull	r2, r3, r2, r3
 800329a:	0c9b      	lsrs	r3, r3, #18
 800329c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4a2c      	ldr	r2, [pc, #176]	; (8003374 <HAL_I2C_Init+0x278>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d802      	bhi.n	80032cc <HAL_I2C_Init+0x1d0>
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	3301      	adds	r3, #1
 80032ca:	e009      	b.n	80032e0 <HAL_I2C_Init+0x1e4>
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032d2:	fb02 f303 	mul.w	r3, r2, r3
 80032d6:	4a2b      	ldr	r2, [pc, #172]	; (8003384 <HAL_I2C_Init+0x288>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	099b      	lsrs	r3, r3, #6
 80032de:	3301      	adds	r3, #1
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6812      	ldr	r2, [r2, #0]
 80032e4:	430b      	orrs	r3, r1
 80032e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	491e      	ldr	r1, [pc, #120]	; (8003374 <HAL_I2C_Init+0x278>)
 80032fc:	428b      	cmp	r3, r1
 80032fe:	d819      	bhi.n	8003334 <HAL_I2C_Init+0x238>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	1e59      	subs	r1, r3, #1
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	fbb1 f3f3 	udiv	r3, r1, r3
 800330e:	1c59      	adds	r1, r3, #1
 8003310:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003314:	400b      	ands	r3, r1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <HAL_I2C_Init+0x234>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1e59      	subs	r1, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	fbb1 f3f3 	udiv	r3, r1, r3
 8003328:	3301      	adds	r3, #1
 800332a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332e:	e065      	b.n	80033fc <HAL_I2C_Init+0x300>
 8003330:	2304      	movs	r3, #4
 8003332:	e063      	b.n	80033fc <HAL_I2C_Init+0x300>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d125      	bne.n	8003388 <HAL_I2C_Init+0x28c>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	1e58      	subs	r0, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6859      	ldr	r1, [r3, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	440b      	add	r3, r1
 800334a:	fbb0 f3f3 	udiv	r3, r0, r3
 800334e:	3301      	adds	r3, #1
 8003350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	e026      	b.n	80033ae <HAL_I2C_Init+0x2b2>
 8003360:	40005400 	.word	0x40005400
 8003364:	40005800 	.word	0x40005800
 8003368:	40005c00 	.word	0x40005c00
 800336c:	08008c48 	.word	0x08008c48
 8003370:	00061a80 	.word	0x00061a80
 8003374:	000186a0 	.word	0x000186a0
 8003378:	001e847f 	.word	0x001e847f
 800337c:	003d08ff 	.word	0x003d08ff
 8003380:	431bde83 	.word	0x431bde83
 8003384:	10624dd3 	.word	0x10624dd3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	1e58      	subs	r0, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6859      	ldr	r1, [r3, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	0099      	lsls	r1, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	fbb0 f3f3 	udiv	r3, r0, r3
 800339e:	3301      	adds	r3, #1
 80033a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf0c      	ite	eq
 80033a8:	2301      	moveq	r3, #1
 80033aa:	2300      	movne	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_I2C_Init+0x2ba>
 80033b2:	2301      	movs	r3, #1
 80033b4:	e022      	b.n	80033fc <HAL_I2C_Init+0x300>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10e      	bne.n	80033dc <HAL_I2C_Init+0x2e0>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1e58      	subs	r0, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6859      	ldr	r1, [r3, #4]
 80033c6:	460b      	mov	r3, r1
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	440b      	add	r3, r1
 80033cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d0:	3301      	adds	r3, #1
 80033d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033da:	e00f      	b.n	80033fc <HAL_I2C_Init+0x300>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	1e58      	subs	r0, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6859      	ldr	r1, [r3, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	0099      	lsls	r1, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f2:	3301      	adds	r3, #1
 80033f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	6809      	ldr	r1, [r1, #0]
 8003400:	4313      	orrs	r3, r2
 8003402:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69da      	ldr	r2, [r3, #28]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800342a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6911      	ldr	r1, [r2, #16]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	68d2      	ldr	r2, [r2, #12]
 8003436:	4311      	orrs	r1, r2
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6812      	ldr	r2, [r2, #0]
 800343c:	430b      	orrs	r3, r1
 800343e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695a      	ldr	r2, [r3, #20]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop

08003494 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e1e7      	b.n	8003876 <HAL_I2S_Init+0x3e2>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a92      	ldr	r2, [pc, #584]	; (80036f4 <HAL_I2S_Init+0x260>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d018      	beq.n	80034e2 <HAL_I2S_Init+0x4e>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a90      	ldr	r2, [pc, #576]	; (80036f8 <HAL_I2S_Init+0x264>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <HAL_I2S_Init+0x4e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a8f      	ldr	r2, [pc, #572]	; (80036fc <HAL_I2S_Init+0x268>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00e      	beq.n	80034e2 <HAL_I2S_Init+0x4e>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a8d      	ldr	r2, [pc, #564]	; (8003700 <HAL_I2S_Init+0x26c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d009      	beq.n	80034e2 <HAL_I2S_Init+0x4e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a8c      	ldr	r2, [pc, #560]	; (8003704 <HAL_I2S_Init+0x270>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d004      	beq.n	80034e2 <HAL_I2S_Init+0x4e>
 80034d8:	f240 111b 	movw	r1, #283	; 0x11b
 80034dc:	488a      	ldr	r0, [pc, #552]	; (8003708 <HAL_I2S_Init+0x274>)
 80034de:	f7fd fbac 	bl	8000c3a <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d013      	beq.n	8003512 <HAL_I2S_Init+0x7e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f2:	d00e      	beq.n	8003512 <HAL_I2S_Init+0x7e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034fc:	d009      	beq.n	8003512 <HAL_I2S_Init+0x7e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003506:	d004      	beq.n	8003512 <HAL_I2S_Init+0x7e>
 8003508:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800350c:	487e      	ldr	r0, [pc, #504]	; (8003708 <HAL_I2S_Init+0x274>)
 800350e:	f7fd fb94 	bl	8000c3a <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d014      	beq.n	8003544 <HAL_I2S_Init+0xb0>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b10      	cmp	r3, #16
 8003520:	d010      	beq.n	8003544 <HAL_I2S_Init+0xb0>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b20      	cmp	r3, #32
 8003528:	d00c      	beq.n	8003544 <HAL_I2S_Init+0xb0>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2b30      	cmp	r3, #48	; 0x30
 8003530:	d008      	beq.n	8003544 <HAL_I2S_Init+0xb0>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	2bb0      	cmp	r3, #176	; 0xb0
 8003538:	d004      	beq.n	8003544 <HAL_I2S_Init+0xb0>
 800353a:	f240 111d 	movw	r1, #285	; 0x11d
 800353e:	4872      	ldr	r0, [pc, #456]	; (8003708 <HAL_I2S_Init+0x274>)
 8003540:	f7fd fb7b 	bl	8000c3a <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d010      	beq.n	800356e <HAL_I2S_Init+0xda>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d00c      	beq.n	800356e <HAL_I2S_Init+0xda>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b03      	cmp	r3, #3
 800355a:	d008      	beq.n	800356e <HAL_I2S_Init+0xda>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	2b05      	cmp	r3, #5
 8003562:	d004      	beq.n	800356e <HAL_I2S_Init+0xda>
 8003564:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003568:	4867      	ldr	r0, [pc, #412]	; (8003708 <HAL_I2S_Init+0x274>)
 800356a:	f7fd fb66 	bl	8000c3a <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003576:	d008      	beq.n	800358a <HAL_I2S_Init+0xf6>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d004      	beq.n	800358a <HAL_I2S_Init+0xf6>
 8003580:	f240 111f 	movw	r1, #287	; 0x11f
 8003584:	4860      	ldr	r0, [pc, #384]	; (8003708 <HAL_I2S_Init+0x274>)
 8003586:	f7fd fb58 	bl	8000c3a <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003592:	d304      	bcc.n	800359e <HAL_I2S_Init+0x10a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	4a5c      	ldr	r2, [pc, #368]	; (800370c <HAL_I2S_Init+0x278>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d908      	bls.n	80035b0 <HAL_I2S_Init+0x11c>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d004      	beq.n	80035b0 <HAL_I2S_Init+0x11c>
 80035a6:	f44f 7190 	mov.w	r1, #288	; 0x120
 80035aa:	4857      	ldr	r0, [pc, #348]	; (8003708 <HAL_I2S_Init+0x274>)
 80035ac:	f7fd fb45 	bl	8000c3a <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_I2S_Init+0x136>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d004      	beq.n	80035ca <HAL_I2S_Init+0x136>
 80035c0:	f240 1121 	movw	r1, #289	; 0x121
 80035c4:	4850      	ldr	r0, [pc, #320]	; (8003708 <HAL_I2S_Init+0x274>)
 80035c6:	f7fd fb38 	bl	8000c3a <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d008      	beq.n	80035e4 <HAL_I2S_Init+0x150>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d004      	beq.n	80035e4 <HAL_I2S_Init+0x150>
 80035da:	f44f 7191 	mov.w	r1, #290	; 0x122
 80035de:	484a      	ldr	r0, [pc, #296]	; (8003708 <HAL_I2S_Init+0x274>)
 80035e0:	f7fd fb2b 	bl	8000c3a <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d109      	bne.n	8003604 <HAL_I2S_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a45      	ldr	r2, [pc, #276]	; (8003710 <HAL_I2S_Init+0x27c>)
 80035fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fd f942 	bl	8000888 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6812      	ldr	r2, [r2, #0]
 8003616:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800361a:	f023 030f 	bic.w	r3, r3, #15
 800361e:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2202      	movs	r2, #2
 8003626:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d073      	beq.n	8003718 <HAL_I2S_Init+0x284>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d102      	bne.n	800363e <HAL_I2S_Init+0x1aa>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003638:	2310      	movs	r3, #16
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	e001      	b.n	8003642 <HAL_I2S_Init+0x1ae>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800363e:	2320      	movs	r3, #32
 8003640:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b20      	cmp	r3, #32
 8003648:	d802      	bhi.n	8003650 <HAL_I2S_Init+0x1bc>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003650:	2001      	movs	r0, #1
 8003652:	f001 fc6f 	bl	8004f34 <HAL_RCCEx_GetPeriphCLKFreq>
 8003656:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003660:	d125      	bne.n	80036ae <HAL_I2S_Init+0x21a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d010      	beq.n	800368c <HAL_I2S_Init+0x1f8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	fbb2 f2f3 	udiv	r2, r2, r3
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	461a      	mov	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	fbb2 f3f3 	udiv	r3, r2, r3
 8003686:	3305      	adds	r3, #5
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	e01f      	b.n	80036cc <HAL_I2S_Init+0x238>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	fbb2 f2f3 	udiv	r2, r2, r3
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	461a      	mov	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a8:	3305      	adds	r3, #5
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	e00e      	b.n	80036cc <HAL_I2S_Init+0x238>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	461a      	mov	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c8:	3305      	adds	r3, #5
 80036ca:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4a11      	ldr	r2, [pc, #68]	; (8003714 <HAL_I2S_Init+0x280>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	08db      	lsrs	r3, r3, #3
 80036d6:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	085b      	lsrs	r3, r3, #1
 80036e8:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	61bb      	str	r3, [r7, #24]
 80036f0:	e016      	b.n	8003720 <HAL_I2S_Init+0x28c>
 80036f2:	bf00      	nop
 80036f4:	40013000 	.word	0x40013000
 80036f8:	40003800 	.word	0x40003800
 80036fc:	40003c00 	.word	0x40003c00
 8003700:	40013400 	.word	0x40013400
 8003704:	40015000 	.word	0x40015000
 8003708:	08008c80 	.word	0x08008c80
 800370c:	0002ee00 	.word	0x0002ee00
 8003710:	08003987 	.word	0x08003987
 8003714:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003718:	2302      	movs	r3, #2
 800371a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d902      	bls.n	800372c <HAL_I2S_Init+0x298>
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	2bff      	cmp	r3, #255	; 0xff
 800372a:	d907      	bls.n	800373c <HAL_I2S_Init+0x2a8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003730:	f043 0210 	orr.w	r2, r3, #16
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e09c      	b.n	8003876 <HAL_I2S_Init+0x3e2>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	ea42 0103 	orr.w	r1, r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69fa      	ldr	r2, [r7, #28]
 800374c:	430a      	orrs	r2, r1
 800374e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800375a:	f023 030f 	bic.w	r3, r3, #15
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6851      	ldr	r1, [r2, #4]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6892      	ldr	r2, [r2, #8]
 8003766:	4311      	orrs	r1, r2
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	68d2      	ldr	r2, [r2, #12]
 800376c:	4311      	orrs	r1, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6992      	ldr	r2, [r2, #24]
 8003772:	430a      	orrs	r2, r1
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800377e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_I2S_Init+0x306>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d004      	beq.n	800379a <HAL_I2S_Init+0x306>
 8003790:	f240 11bd 	movw	r1, #445	; 0x1bd
 8003794:	483a      	ldr	r0, [pc, #232]	; (8003880 <HAL_I2S_Init+0x3ec>)
 8003796:	f7fd fa50 	bl	8000c3a <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d161      	bne.n	8003866 <HAL_I2S_Init+0x3d2>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a37      	ldr	r2, [pc, #220]	; (8003884 <HAL_I2S_Init+0x3f0>)
 80037a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a36      	ldr	r2, [pc, #216]	; (8003888 <HAL_I2S_Init+0x3f4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d101      	bne.n	80037b6 <HAL_I2S_Init+0x322>
 80037b2:	4b36      	ldr	r3, [pc, #216]	; (800388c <HAL_I2S_Init+0x3f8>)
 80037b4:	e001      	b.n	80037ba <HAL_I2S_Init+0x326>
 80037b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6812      	ldr	r2, [r2, #0]
 80037c0:	4931      	ldr	r1, [pc, #196]	; (8003888 <HAL_I2S_Init+0x3f4>)
 80037c2:	428a      	cmp	r2, r1
 80037c4:	d101      	bne.n	80037ca <HAL_I2S_Init+0x336>
 80037c6:	4a31      	ldr	r2, [pc, #196]	; (800388c <HAL_I2S_Init+0x3f8>)
 80037c8:	e001      	b.n	80037ce <HAL_I2S_Init+0x33a>
 80037ca:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80037ce:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80037d2:	f023 030f 	bic.w	r3, r3, #15
 80037d6:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a2a      	ldr	r2, [pc, #168]	; (8003888 <HAL_I2S_Init+0x3f4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d101      	bne.n	80037e6 <HAL_I2S_Init+0x352>
 80037e2:	4b2a      	ldr	r3, [pc, #168]	; (800388c <HAL_I2S_Init+0x3f8>)
 80037e4:	e001      	b.n	80037ea <HAL_I2S_Init+0x356>
 80037e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037ea:	2202      	movs	r2, #2
 80037ec:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a25      	ldr	r2, [pc, #148]	; (8003888 <HAL_I2S_Init+0x3f4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d101      	bne.n	80037fc <HAL_I2S_Init+0x368>
 80037f8:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_I2S_Init+0x3f8>)
 80037fa:	e001      	b.n	8003800 <HAL_I2S_Init+0x36c>
 80037fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800380c:	d003      	beq.n	8003816 <HAL_I2S_Init+0x382>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d103      	bne.n	800381e <HAL_I2S_Init+0x38a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800381a:	613b      	str	r3, [r7, #16]
 800381c:	e001      	b.n	8003822 <HAL_I2S_Init+0x38e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800382c:	4313      	orrs	r3, r2
 800382e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003836:	4313      	orrs	r3, r2
 8003838:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003840:	4313      	orrs	r3, r2
 8003842:	b29a      	uxth	r2, r3
 8003844:	897b      	ldrh	r3, [r7, #10]
 8003846:	4313      	orrs	r3, r2
 8003848:	b29b      	uxth	r3, r3
 800384a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800384e:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a0c      	ldr	r2, [pc, #48]	; (8003888 <HAL_I2S_Init+0x3f4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d101      	bne.n	800385e <HAL_I2S_Init+0x3ca>
 800385a:	4b0c      	ldr	r3, [pc, #48]	; (800388c <HAL_I2S_Init+0x3f8>)
 800385c:	e001      	b.n	8003862 <HAL_I2S_Init+0x3ce>
 800385e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003862:	897a      	ldrh	r2, [r7, #10]
 8003864:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3720      	adds	r7, #32
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	08008c80 	.word	0x08008c80
 8003884:	08003a9d 	.word	0x08003a9d
 8003888:	40003800 	.word	0x40003800
 800388c:	40003400 	.word	0x40003400

08003890 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	881a      	ldrh	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	1c9a      	adds	r2, r3, #2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10e      	bne.n	8003920 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003910:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff ffb8 	bl	8003890 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393a:	b292      	uxth	r2, r2
 800393c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003942:	1c9a      	adds	r2, r3, #2
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10e      	bne.n	800397e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800396e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff ff93 	bl	80038a4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b086      	sub	sp, #24
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d13a      	bne.n	8003a18 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d109      	bne.n	80039c0 <I2S_IRQHandler+0x3a>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b6:	2b40      	cmp	r3, #64	; 0x40
 80039b8:	d102      	bne.n	80039c0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff ffb4 	bl	8003928 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	2b40      	cmp	r3, #64	; 0x40
 80039c8:	d126      	bne.n	8003a18 <I2S_IRQHandler+0x92>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 0320 	and.w	r3, r3, #32
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d11f      	bne.n	8003a18 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039e8:	2300      	movs	r3, #0
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	f043 0202 	orr.w	r2, r3, #2
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff ff50 	bl	80038b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d136      	bne.n	8003a92 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d109      	bne.n	8003a42 <I2S_IRQHandler+0xbc>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a38:	2b80      	cmp	r3, #128	; 0x80
 8003a3a:	d102      	bne.n	8003a42 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff ff45 	bl	80038cc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d122      	bne.n	8003a92 <I2S_IRQHandler+0x10c>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	2b20      	cmp	r3, #32
 8003a58:	d11b      	bne.n	8003a92 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a68:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a84:	f043 0204 	orr.w	r2, r3, #4
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff ff13 	bl	80038b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a92:	bf00      	nop
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a92      	ldr	r2, [pc, #584]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d101      	bne.n	8003aba <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003ab6:	4b92      	ldr	r3, [pc, #584]	; (8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ab8:	e001      	b.n	8003abe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003aba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a8b      	ldr	r2, [pc, #556]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d101      	bne.n	8003ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ad4:	4b8a      	ldr	r3, [pc, #552]	; (8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ad6:	e001      	b.n	8003adc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ad8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ae8:	d004      	beq.n	8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f040 8099 	bne.w	8003c26 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d107      	bne.n	8003b0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d002      	beq.n	8003b0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f925 	bl	8003d58 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d107      	bne.n	8003b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f9c8 	bl	8003eb8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2e:	2b40      	cmp	r3, #64	; 0x40
 8003b30:	d13a      	bne.n	8003ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d035      	beq.n	8003ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a6e      	ldr	r2, [pc, #440]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d101      	bne.n	8003b4a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003b46:	4b6e      	ldr	r3, [pc, #440]	; (8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b48:	e001      	b.n	8003b4e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003b4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4969      	ldr	r1, [pc, #420]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b56:	428b      	cmp	r3, r1
 8003b58:	d101      	bne.n	8003b5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003b5a:	4b69      	ldr	r3, [pc, #420]	; (8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b5c:	e001      	b.n	8003b62 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003b5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b66:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b76:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	f043 0202 	orr.w	r2, r3, #2
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff fe88 	bl	80038b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	f040 80c3 	bne.w	8003d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 80bd 	beq.w	8003d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a49      	ldr	r2, [pc, #292]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d101      	bne.n	8003bde <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003bda:	4b49      	ldr	r3, [pc, #292]	; (8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bdc:	e001      	b.n	8003be2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003bde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4944      	ldr	r1, [pc, #272]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bea:	428b      	cmp	r3, r1
 8003bec:	d101      	bne.n	8003bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003bee:	4b44      	ldr	r3, [pc, #272]	; (8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bf0:	e001      	b.n	8003bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003bf2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bf6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bfa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	60bb      	str	r3, [r7, #8]
 8003c08:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	f043 0204 	orr.w	r2, r3, #4
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff fe4a 	bl	80038b8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c24:	e089      	b.n	8003d3a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d107      	bne.n	8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f8be 	bl	8003dbc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d107      	bne.n	8003c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f8fd 	bl	8003e54 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	d12f      	bne.n	8003cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d02a      	beq.n	8003cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c7c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a1e      	ldr	r2, [pc, #120]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d101      	bne.n	8003c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003c88:	4b1d      	ldr	r3, [pc, #116]	; (8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c8a:	e001      	b.n	8003c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003c8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4919      	ldr	r1, [pc, #100]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c98:	428b      	cmp	r3, r1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003c9c:	4b18      	ldr	r3, [pc, #96]	; (8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c9e:	e001      	b.n	8003ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003ca0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ca4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ca8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	f043 0202 	orr.w	r2, r3, #2
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff fdfa 	bl	80038b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d136      	bne.n	8003d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d031      	beq.n	8003d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a07      	ldr	r2, [pc, #28]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d101      	bne.n	8003ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003ce2:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ce4:	e001      	b.n	8003cea <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003ce6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4902      	ldr	r1, [pc, #8]	; (8003cfc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cf2:	428b      	cmp	r3, r1
 8003cf4:	d106      	bne.n	8003d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003cf6:	4b02      	ldr	r3, [pc, #8]	; (8003d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cf8:	e006      	b.n	8003d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003cfa:	bf00      	nop
 8003cfc:	40003800 	.word	0x40003800
 8003d00:	40003400 	.word	0x40003400
 8003d04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d0c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	f043 0204 	orr.w	r2, r3, #4
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff fdc0 	bl	80038b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d38:	e000      	b.n	8003d3c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d3a:	bf00      	nop
}
 8003d3c:	bf00      	nop
 8003d3e:	3720      	adds	r7, #32
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	1c99      	adds	r1, r3, #2
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6251      	str	r1, [r2, #36]	; 0x24
 8003d6a:	881a      	ldrh	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d113      	bne.n	8003db2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d98:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d106      	bne.n	8003db2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff ffc9 	bl	8003d44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	1c99      	adds	r1, r3, #2
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6251      	str	r1, [r2, #36]	; 0x24
 8003dce:	8819      	ldrh	r1, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1d      	ldr	r2, [pc, #116]	; (8003e4c <I2SEx_TxISR_I2SExt+0x90>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d101      	bne.n	8003dde <I2SEx_TxISR_I2SExt+0x22>
 8003dda:	4b1d      	ldr	r3, [pc, #116]	; (8003e50 <I2SEx_TxISR_I2SExt+0x94>)
 8003ddc:	e001      	b.n	8003de2 <I2SEx_TxISR_I2SExt+0x26>
 8003dde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003de2:	460a      	mov	r2, r1
 8003de4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d121      	bne.n	8003e42 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a12      	ldr	r2, [pc, #72]	; (8003e4c <I2SEx_TxISR_I2SExt+0x90>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d101      	bne.n	8003e0c <I2SEx_TxISR_I2SExt+0x50>
 8003e08:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <I2SEx_TxISR_I2SExt+0x94>)
 8003e0a:	e001      	b.n	8003e10 <I2SEx_TxISR_I2SExt+0x54>
 8003e0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	490d      	ldr	r1, [pc, #52]	; (8003e4c <I2SEx_TxISR_I2SExt+0x90>)
 8003e18:	428b      	cmp	r3, r1
 8003e1a:	d101      	bne.n	8003e20 <I2SEx_TxISR_I2SExt+0x64>
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <I2SEx_TxISR_I2SExt+0x94>)
 8003e1e:	e001      	b.n	8003e24 <I2SEx_TxISR_I2SExt+0x68>
 8003e20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e28:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d106      	bne.n	8003e42 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7ff ff81 	bl	8003d44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40003800 	.word	0x40003800
 8003e50:	40003400 	.word	0x40003400

08003e54 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68d8      	ldr	r0, [r3, #12]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	1c99      	adds	r1, r3, #2
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e6c:	b282      	uxth	r2, r0
 8003e6e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d113      	bne.n	8003eb0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e96:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7ff ff4a 	bl	8003d44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a20      	ldr	r2, [pc, #128]	; (8003f48 <I2SEx_RxISR_I2SExt+0x90>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d101      	bne.n	8003ece <I2SEx_RxISR_I2SExt+0x16>
 8003eca:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <I2SEx_RxISR_I2SExt+0x94>)
 8003ecc:	e001      	b.n	8003ed2 <I2SEx_RxISR_I2SExt+0x1a>
 8003ece:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ed2:	68d8      	ldr	r0, [r3, #12]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	1c99      	adds	r1, r3, #2
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ede:	b282      	uxth	r2, r0
 8003ee0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d121      	bne.n	8003f3e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a12      	ldr	r2, [pc, #72]	; (8003f48 <I2SEx_RxISR_I2SExt+0x90>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d101      	bne.n	8003f08 <I2SEx_RxISR_I2SExt+0x50>
 8003f04:	4b11      	ldr	r3, [pc, #68]	; (8003f4c <I2SEx_RxISR_I2SExt+0x94>)
 8003f06:	e001      	b.n	8003f0c <I2SEx_RxISR_I2SExt+0x54>
 8003f08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	490d      	ldr	r1, [pc, #52]	; (8003f48 <I2SEx_RxISR_I2SExt+0x90>)
 8003f14:	428b      	cmp	r3, r1
 8003f16:	d101      	bne.n	8003f1c <I2SEx_RxISR_I2SExt+0x64>
 8003f18:	4b0c      	ldr	r3, [pc, #48]	; (8003f4c <I2SEx_RxISR_I2SExt+0x94>)
 8003f1a:	e001      	b.n	8003f20 <I2SEx_RxISR_I2SExt+0x68>
 8003f1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f20:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f24:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d106      	bne.n	8003f3e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff ff03 	bl	8003d44 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f3e:	bf00      	nop
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	40003800 	.word	0x40003800
 8003f4c:	40003400 	.word	0x40003400

08003f50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e314      	b.n	800458c <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b0f      	cmp	r3, #15
 8003f68:	d903      	bls.n	8003f72 <HAL_RCC_OscConfig+0x22>
 8003f6a:	21e6      	movs	r1, #230	; 0xe6
 8003f6c:	4897      	ldr	r0, [pc, #604]	; (80041cc <HAL_RCC_OscConfig+0x27c>)
 8003f6e:	f7fc fe64 	bl	8000c3a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 8088 	beq.w	8004090 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00d      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x54>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f90:	d008      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x54>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f9a:	d003      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x54>
 8003f9c:	21eb      	movs	r1, #235	; 0xeb
 8003f9e:	488b      	ldr	r0, [pc, #556]	; (80041cc <HAL_RCC_OscConfig+0x27c>)
 8003fa0:	f7fc fe4b 	bl	8000c3a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fa4:	4b8a      	ldr	r3, [pc, #552]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 030c 	and.w	r3, r3, #12
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d00c      	beq.n	8003fca <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb0:	4b87      	ldr	r3, [pc, #540]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d112      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fbc:	4b84      	ldr	r3, [pc, #528]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fc8:	d10b      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fca:	4b81      	ldr	r3, [pc, #516]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d05b      	beq.n	800408e <HAL_RCC_OscConfig+0x13e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d157      	bne.n	800408e <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e2d4      	b.n	800458c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fea:	d106      	bne.n	8003ffa <HAL_RCC_OscConfig+0xaa>
 8003fec:	4b78      	ldr	r3, [pc, #480]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a77      	ldr	r2, [pc, #476]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 8003ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	e01d      	b.n	8004036 <HAL_RCC_OscConfig+0xe6>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004002:	d10c      	bne.n	800401e <HAL_RCC_OscConfig+0xce>
 8004004:	4b72      	ldr	r3, [pc, #456]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a71      	ldr	r2, [pc, #452]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 800400a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	4b6f      	ldr	r3, [pc, #444]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a6e      	ldr	r2, [pc, #440]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 8004016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	e00b      	b.n	8004036 <HAL_RCC_OscConfig+0xe6>
 800401e:	4b6c      	ldr	r3, [pc, #432]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a6b      	ldr	r2, [pc, #428]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 8004024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	4b69      	ldr	r3, [pc, #420]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a68      	ldr	r2, [pc, #416]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 8004030:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004034:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d013      	beq.n	8004066 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403e:	f7fc ffc1 	bl	8000fc4 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004046:	f7fc ffbd 	bl	8000fc4 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b64      	cmp	r3, #100	; 0x64
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e299      	b.n	800458c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004058:	4b5d      	ldr	r3, [pc, #372]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0xf6>
 8004064:	e014      	b.n	8004090 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004066:	f7fc ffad 	bl	8000fc4 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800406e:	f7fc ffa9 	bl	8000fc4 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b64      	cmp	r3, #100	; 0x64
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e285      	b.n	800458c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004080:	4b53      	ldr	r3, [pc, #332]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f0      	bne.n	800406e <HAL_RCC_OscConfig+0x11e>
 800408c:	e000      	b.n	8004090 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800408e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d079      	beq.n	8004190 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <HAL_RCC_OscConfig+0x166>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d004      	beq.n	80040b6 <HAL_RCC_OscConfig+0x166>
 80040ac:	f240 111d 	movw	r1, #285	; 0x11d
 80040b0:	4846      	ldr	r0, [pc, #280]	; (80041cc <HAL_RCC_OscConfig+0x27c>)
 80040b2:	f7fc fdc2 	bl	8000c3a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b1f      	cmp	r3, #31
 80040bc:	d904      	bls.n	80040c8 <HAL_RCC_OscConfig+0x178>
 80040be:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80040c2:	4842      	ldr	r0, [pc, #264]	; (80041cc <HAL_RCC_OscConfig+0x27c>)
 80040c4:	f7fc fdb9 	bl	8000c3a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040c8:	4b41      	ldr	r3, [pc, #260]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 030c 	and.w	r3, r3, #12
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00b      	beq.n	80040ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040d4:	4b3e      	ldr	r3, [pc, #248]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d11c      	bne.n	800411a <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040e0:	4b3b      	ldr	r3, [pc, #236]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d116      	bne.n	800411a <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ec:	4b38      	ldr	r3, [pc, #224]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_OscConfig+0x1b4>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d001      	beq.n	8004104 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e243      	b.n	800458c <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004104:	4b32      	ldr	r3, [pc, #200]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	492f      	ldr	r1, [pc, #188]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 8004114:	4313      	orrs	r3, r2
 8004116:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004118:	e03a      	b.n	8004190 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d020      	beq.n	8004164 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004122:	4b2c      	ldr	r3, [pc, #176]	; (80041d4 <HAL_RCC_OscConfig+0x284>)
 8004124:	2201      	movs	r2, #1
 8004126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7fc ff4c 	bl	8000fc4 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004130:	f7fc ff48 	bl	8000fc4 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e224      	b.n	800458c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004142:	4b23      	ldr	r3, [pc, #140]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414e:	4b20      	ldr	r3, [pc, #128]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	491c      	ldr	r1, [pc, #112]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 800415e:	4313      	orrs	r3, r2
 8004160:	600b      	str	r3, [r1, #0]
 8004162:	e015      	b.n	8004190 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004164:	4b1b      	ldr	r3, [pc, #108]	; (80041d4 <HAL_RCC_OscConfig+0x284>)
 8004166:	2200      	movs	r2, #0
 8004168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416a:	f7fc ff2b 	bl	8000fc4 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004172:	f7fc ff27 	bl	8000fc4 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e203      	b.n	800458c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004184:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <HAL_RCC_OscConfig+0x280>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1f0      	bne.n	8004172 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d045      	beq.n	8004228 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d008      	beq.n	80041b6 <HAL_RCC_OscConfig+0x266>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d004      	beq.n	80041b6 <HAL_RCC_OscConfig+0x266>
 80041ac:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80041b0:	4806      	ldr	r0, [pc, #24]	; (80041cc <HAL_RCC_OscConfig+0x27c>)
 80041b2:	f7fc fd42 	bl	8000c3a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d01e      	beq.n	80041fc <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041be:	4b06      	ldr	r3, [pc, #24]	; (80041d8 <HAL_RCC_OscConfig+0x288>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c4:	f7fc fefe 	bl	8000fc4 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ca:	e010      	b.n	80041ee <HAL_RCC_OscConfig+0x29e>
 80041cc:	08008cb8 	.word	0x08008cb8
 80041d0:	40023800 	.word	0x40023800
 80041d4:	42470000 	.word	0x42470000
 80041d8:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041dc:	f7fc fef2 	bl	8000fc4 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e1ce      	b.n	800458c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ee:	4b5e      	ldr	r3, [pc, #376]	; (8004368 <HAL_RCC_OscConfig+0x418>)
 80041f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0x28c>
 80041fa:	e015      	b.n	8004228 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041fc:	4b5b      	ldr	r3, [pc, #364]	; (800436c <HAL_RCC_OscConfig+0x41c>)
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004202:	f7fc fedf 	bl	8000fc4 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800420a:	f7fc fedb 	bl	8000fc4 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e1b7      	b.n	800458c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800421c:	4b52      	ldr	r3, [pc, #328]	; (8004368 <HAL_RCC_OscConfig+0x418>)
 800421e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1f0      	bne.n	800420a <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80b0 	beq.w	8004396 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004236:	2300      	movs	r3, #0
 8004238:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00c      	beq.n	800425c <HAL_RCC_OscConfig+0x30c>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d008      	beq.n	800425c <HAL_RCC_OscConfig+0x30c>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b05      	cmp	r3, #5
 8004250:	d004      	beq.n	800425c <HAL_RCC_OscConfig+0x30c>
 8004252:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8004256:	4846      	ldr	r0, [pc, #280]	; (8004370 <HAL_RCC_OscConfig+0x420>)
 8004258:	f7fc fcef 	bl	8000c3a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800425c:	4b42      	ldr	r3, [pc, #264]	; (8004368 <HAL_RCC_OscConfig+0x418>)
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10f      	bne.n	8004288 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004268:	2300      	movs	r3, #0
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	4b3e      	ldr	r3, [pc, #248]	; (8004368 <HAL_RCC_OscConfig+0x418>)
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	4a3d      	ldr	r2, [pc, #244]	; (8004368 <HAL_RCC_OscConfig+0x418>)
 8004272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004276:	6413      	str	r3, [r2, #64]	; 0x40
 8004278:	4b3b      	ldr	r3, [pc, #236]	; (8004368 <HAL_RCC_OscConfig+0x418>)
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004284:	2301      	movs	r3, #1
 8004286:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004288:	4b3a      	ldr	r3, [pc, #232]	; (8004374 <HAL_RCC_OscConfig+0x424>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d118      	bne.n	80042c6 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004294:	4b37      	ldr	r3, [pc, #220]	; (8004374 <HAL_RCC_OscConfig+0x424>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a36      	ldr	r2, [pc, #216]	; (8004374 <HAL_RCC_OscConfig+0x424>)
 800429a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800429e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a0:	f7fc fe90 	bl	8000fc4 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a8:	f7fc fe8c 	bl	8000fc4 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e168      	b.n	800458c <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ba:	4b2e      	ldr	r3, [pc, #184]	; (8004374 <HAL_RCC_OscConfig+0x424>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0f0      	beq.n	80042a8 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d106      	bne.n	80042dc <HAL_RCC_OscConfig+0x38c>
 80042ce:	4b26      	ldr	r3, [pc, #152]	; (8004368 <HAL_RCC_OscConfig+0x418>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d2:	4a25      	ldr	r2, [pc, #148]	; (8004368 <HAL_RCC_OscConfig+0x418>)
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	6713      	str	r3, [r2, #112]	; 0x70
 80042da:	e01c      	b.n	8004316 <HAL_RCC_OscConfig+0x3c6>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2b05      	cmp	r3, #5
 80042e2:	d10c      	bne.n	80042fe <HAL_RCC_OscConfig+0x3ae>
 80042e4:	4b20      	ldr	r3, [pc, #128]	; (8004368 <HAL_RCC_OscConfig+0x418>)
 80042e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e8:	4a1f      	ldr	r2, [pc, #124]	; (8004368 <HAL_RCC_OscConfig+0x418>)
 80042ea:	f043 0304 	orr.w	r3, r3, #4
 80042ee:	6713      	str	r3, [r2, #112]	; 0x70
 80042f0:	4b1d      	ldr	r3, [pc, #116]	; (8004368 <HAL_RCC_OscConfig+0x418>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f4:	4a1c      	ldr	r2, [pc, #112]	; (8004368 <HAL_RCC_OscConfig+0x418>)
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	6713      	str	r3, [r2, #112]	; 0x70
 80042fc:	e00b      	b.n	8004316 <HAL_RCC_OscConfig+0x3c6>
 80042fe:	4b1a      	ldr	r3, [pc, #104]	; (8004368 <HAL_RCC_OscConfig+0x418>)
 8004300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004302:	4a19      	ldr	r2, [pc, #100]	; (8004368 <HAL_RCC_OscConfig+0x418>)
 8004304:	f023 0301 	bic.w	r3, r3, #1
 8004308:	6713      	str	r3, [r2, #112]	; 0x70
 800430a:	4b17      	ldr	r3, [pc, #92]	; (8004368 <HAL_RCC_OscConfig+0x418>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430e:	4a16      	ldr	r2, [pc, #88]	; (8004368 <HAL_RCC_OscConfig+0x418>)
 8004310:	f023 0304 	bic.w	r3, r3, #4
 8004314:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d015      	beq.n	800434a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431e:	f7fc fe51 	bl	8000fc4 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004324:	e00a      	b.n	800433c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004326:	f7fc fe4d 	bl	8000fc4 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	f241 3288 	movw	r2, #5000	; 0x1388
 8004334:	4293      	cmp	r3, r2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e127      	b.n	800458c <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800433c:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <HAL_RCC_OscConfig+0x418>)
 800433e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0ee      	beq.n	8004326 <HAL_RCC_OscConfig+0x3d6>
 8004348:	e01c      	b.n	8004384 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800434a:	f7fc fe3b 	bl	8000fc4 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004350:	e012      	b.n	8004378 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004352:	f7fc fe37 	bl	8000fc4 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004360:	4293      	cmp	r3, r2
 8004362:	d909      	bls.n	8004378 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e111      	b.n	800458c <HAL_RCC_OscConfig+0x63c>
 8004368:	40023800 	.word	0x40023800
 800436c:	42470e80 	.word	0x42470e80
 8004370:	08008cb8 	.word	0x08008cb8
 8004374:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004378:	4b86      	ldr	r3, [pc, #536]	; (8004594 <HAL_RCC_OscConfig+0x644>)
 800437a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e6      	bne.n	8004352 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004384:	7dfb      	ldrb	r3, [r7, #23]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d105      	bne.n	8004396 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800438a:	4b82      	ldr	r3, [pc, #520]	; (8004594 <HAL_RCC_OscConfig+0x644>)
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	4a81      	ldr	r2, [pc, #516]	; (8004594 <HAL_RCC_OscConfig+0x644>)
 8004390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004394:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00c      	beq.n	80043b8 <HAL_RCC_OscConfig+0x468>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d008      	beq.n	80043b8 <HAL_RCC_OscConfig+0x468>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d004      	beq.n	80043b8 <HAL_RCC_OscConfig+0x468>
 80043ae:	f240 11cd 	movw	r1, #461	; 0x1cd
 80043b2:	4879      	ldr	r0, [pc, #484]	; (8004598 <HAL_RCC_OscConfig+0x648>)
 80043b4:	f7fc fc41 	bl	8000c3a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80e4 	beq.w	800458a <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043c2:	4b74      	ldr	r3, [pc, #464]	; (8004594 <HAL_RCC_OscConfig+0x644>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	f000 80a5 	beq.w	800451a <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	f040 8089 	bne.w	80044ec <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <HAL_RCC_OscConfig+0x4a6>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ea:	d004      	beq.n	80043f6 <HAL_RCC_OscConfig+0x4a6>
 80043ec:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80043f0:	4869      	ldr	r0, [pc, #420]	; (8004598 <HAL_RCC_OscConfig+0x648>)
 80043f2:	f7fc fc22 	bl	8000c3a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	2b3f      	cmp	r3, #63	; 0x3f
 80043fc:	d904      	bls.n	8004408 <HAL_RCC_OscConfig+0x4b8>
 80043fe:	f240 11d7 	movw	r1, #471	; 0x1d7
 8004402:	4865      	ldr	r0, [pc, #404]	; (8004598 <HAL_RCC_OscConfig+0x648>)
 8004404:	f7fc fc19 	bl	8000c3a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	2b31      	cmp	r3, #49	; 0x31
 800440e:	d904      	bls.n	800441a <HAL_RCC_OscConfig+0x4ca>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004418:	d904      	bls.n	8004424 <HAL_RCC_OscConfig+0x4d4>
 800441a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800441e:	485e      	ldr	r0, [pc, #376]	; (8004598 <HAL_RCC_OscConfig+0x648>)
 8004420:	f7fc fc0b 	bl	8000c3a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004428:	2b02      	cmp	r3, #2
 800442a:	d010      	beq.n	800444e <HAL_RCC_OscConfig+0x4fe>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	2b04      	cmp	r3, #4
 8004432:	d00c      	beq.n	800444e <HAL_RCC_OscConfig+0x4fe>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004438:	2b06      	cmp	r3, #6
 800443a:	d008      	beq.n	800444e <HAL_RCC_OscConfig+0x4fe>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004440:	2b08      	cmp	r3, #8
 8004442:	d004      	beq.n	800444e <HAL_RCC_OscConfig+0x4fe>
 8004444:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004448:	4853      	ldr	r0, [pc, #332]	; (8004598 <HAL_RCC_OscConfig+0x648>)
 800444a:	f7fc fbf6 	bl	8000c3a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	2b01      	cmp	r3, #1
 8004454:	d903      	bls.n	800445e <HAL_RCC_OscConfig+0x50e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	2b0f      	cmp	r3, #15
 800445c:	d904      	bls.n	8004468 <HAL_RCC_OscConfig+0x518>
 800445e:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004462:	484d      	ldr	r0, [pc, #308]	; (8004598 <HAL_RCC_OscConfig+0x648>)
 8004464:	f7fc fbe9 	bl	8000c3a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004468:	4b4c      	ldr	r3, [pc, #304]	; (800459c <HAL_RCC_OscConfig+0x64c>)
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446e:	f7fc fda9 	bl	8000fc4 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004476:	f7fc fda5 	bl	8000fc4 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e081      	b.n	800458c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004488:	4b42      	ldr	r3, [pc, #264]	; (8004594 <HAL_RCC_OscConfig+0x644>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f0      	bne.n	8004476 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	69da      	ldr	r2, [r3, #28]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	019b      	lsls	r3, r3, #6
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044aa:	085b      	lsrs	r3, r3, #1
 80044ac:	3b01      	subs	r3, #1
 80044ae:	041b      	lsls	r3, r3, #16
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b6:	061b      	lsls	r3, r3, #24
 80044b8:	4936      	ldr	r1, [pc, #216]	; (8004594 <HAL_RCC_OscConfig+0x644>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044be:	4b37      	ldr	r3, [pc, #220]	; (800459c <HAL_RCC_OscConfig+0x64c>)
 80044c0:	2201      	movs	r2, #1
 80044c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c4:	f7fc fd7e 	bl	8000fc4 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044cc:	f7fc fd7a 	bl	8000fc4 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e056      	b.n	800458c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044de:	4b2d      	ldr	r3, [pc, #180]	; (8004594 <HAL_RCC_OscConfig+0x644>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCC_OscConfig+0x57c>
 80044ea:	e04e      	b.n	800458a <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ec:	4b2b      	ldr	r3, [pc, #172]	; (800459c <HAL_RCC_OscConfig+0x64c>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f2:	f7fc fd67 	bl	8000fc4 <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044fa:	f7fc fd63 	bl	8000fc4 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e03f      	b.n	800458c <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450c:	4b21      	ldr	r3, [pc, #132]	; (8004594 <HAL_RCC_OscConfig+0x644>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1f0      	bne.n	80044fa <HAL_RCC_OscConfig+0x5aa>
 8004518:	e037      	b.n	800458a <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d101      	bne.n	8004526 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e032      	b.n	800458c <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004526:	4b1b      	ldr	r3, [pc, #108]	; (8004594 <HAL_RCC_OscConfig+0x644>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d028      	beq.n	8004586 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800453e:	429a      	cmp	r2, r3
 8004540:	d121      	bne.n	8004586 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454c:	429a      	cmp	r2, r3
 800454e:	d11a      	bne.n	8004586 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004556:	4013      	ands	r3, r2
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800455c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800455e:	4293      	cmp	r3, r2
 8004560:	d111      	bne.n	8004586 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456c:	085b      	lsrs	r3, r3, #1
 800456e:	3b01      	subs	r3, #1
 8004570:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d107      	bne.n	8004586 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004582:	429a      	cmp	r2, r3
 8004584:	d001      	beq.n	800458a <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40023800 	.word	0x40023800
 8004598:	08008cb8 	.word	0x08008cb8
 800459c:	42470060 	.word	0x42470060

080045a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e174      	b.n	800489e <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x24>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b0f      	cmp	r3, #15
 80045c2:	d904      	bls.n	80045ce <HAL_RCC_ClockConfig+0x2e>
 80045c4:	f240 215a 	movw	r1, #602	; 0x25a
 80045c8:	487b      	ldr	r0, [pc, #492]	; (80047b8 <HAL_RCC_ClockConfig+0x218>)
 80045ca:	f7fc fb36 	bl	8000c3a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d019      	beq.n	8004608 <HAL_RCC_ClockConfig+0x68>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d016      	beq.n	8004608 <HAL_RCC_ClockConfig+0x68>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d013      	beq.n	8004608 <HAL_RCC_ClockConfig+0x68>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d010      	beq.n	8004608 <HAL_RCC_ClockConfig+0x68>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	d00d      	beq.n	8004608 <HAL_RCC_ClockConfig+0x68>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b05      	cmp	r3, #5
 80045f0:	d00a      	beq.n	8004608 <HAL_RCC_ClockConfig+0x68>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b06      	cmp	r3, #6
 80045f6:	d007      	beq.n	8004608 <HAL_RCC_ClockConfig+0x68>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b07      	cmp	r3, #7
 80045fc:	d004      	beq.n	8004608 <HAL_RCC_ClockConfig+0x68>
 80045fe:	f240 215b 	movw	r1, #603	; 0x25b
 8004602:	486d      	ldr	r0, [pc, #436]	; (80047b8 <HAL_RCC_ClockConfig+0x218>)
 8004604:	f7fc fb19 	bl	8000c3a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004608:	4b6c      	ldr	r3, [pc, #432]	; (80047bc <HAL_RCC_ClockConfig+0x21c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d90c      	bls.n	8004630 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004616:	4b69      	ldr	r3, [pc, #420]	; (80047bc <HAL_RCC_ClockConfig+0x21c>)
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800461e:	4b67      	ldr	r3, [pc, #412]	; (80047bc <HAL_RCC_ClockConfig+0x21c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0307 	and.w	r3, r3, #7
 8004626:	683a      	ldr	r2, [r7, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d001      	beq.n	8004630 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e136      	b.n	800489e <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d049      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004648:	4b5d      	ldr	r3, [pc, #372]	; (80047c0 <HAL_RCC_ClockConfig+0x220>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	4a5c      	ldr	r2, [pc, #368]	; (80047c0 <HAL_RCC_ClockConfig+0x220>)
 800464e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004652:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0308 	and.w	r3, r3, #8
 800465c:	2b00      	cmp	r3, #0
 800465e:	d005      	beq.n	800466c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004660:	4b57      	ldr	r3, [pc, #348]	; (80047c0 <HAL_RCC_ClockConfig+0x220>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	4a56      	ldr	r2, [pc, #344]	; (80047c0 <HAL_RCC_ClockConfig+0x220>)
 8004666:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800466a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d024      	beq.n	80046be <HAL_RCC_ClockConfig+0x11e>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b80      	cmp	r3, #128	; 0x80
 800467a:	d020      	beq.n	80046be <HAL_RCC_ClockConfig+0x11e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b90      	cmp	r3, #144	; 0x90
 8004682:	d01c      	beq.n	80046be <HAL_RCC_ClockConfig+0x11e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2ba0      	cmp	r3, #160	; 0xa0
 800468a:	d018      	beq.n	80046be <HAL_RCC_ClockConfig+0x11e>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2bb0      	cmp	r3, #176	; 0xb0
 8004692:	d014      	beq.n	80046be <HAL_RCC_ClockConfig+0x11e>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2bc0      	cmp	r3, #192	; 0xc0
 800469a:	d010      	beq.n	80046be <HAL_RCC_ClockConfig+0x11e>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2bd0      	cmp	r3, #208	; 0xd0
 80046a2:	d00c      	beq.n	80046be <HAL_RCC_ClockConfig+0x11e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	2be0      	cmp	r3, #224	; 0xe0
 80046aa:	d008      	beq.n	80046be <HAL_RCC_ClockConfig+0x11e>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2bf0      	cmp	r3, #240	; 0xf0
 80046b2:	d004      	beq.n	80046be <HAL_RCC_ClockConfig+0x11e>
 80046b4:	f240 217e 	movw	r1, #638	; 0x27e
 80046b8:	483f      	ldr	r0, [pc, #252]	; (80047b8 <HAL_RCC_ClockConfig+0x218>)
 80046ba:	f7fc fabe 	bl	8000c3a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046be:	4b40      	ldr	r3, [pc, #256]	; (80047c0 <HAL_RCC_ClockConfig+0x220>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	493d      	ldr	r1, [pc, #244]	; (80047c0 <HAL_RCC_ClockConfig+0x220>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d059      	beq.n	8004790 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d010      	beq.n	8004706 <HAL_RCC_ClockConfig+0x166>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d00c      	beq.n	8004706 <HAL_RCC_ClockConfig+0x166>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d008      	beq.n	8004706 <HAL_RCC_ClockConfig+0x166>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d004      	beq.n	8004706 <HAL_RCC_ClockConfig+0x166>
 80046fc:	f240 2185 	movw	r1, #645	; 0x285
 8004700:	482d      	ldr	r0, [pc, #180]	; (80047b8 <HAL_RCC_ClockConfig+0x218>)
 8004702:	f7fc fa9a 	bl	8000c3a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d107      	bne.n	800471e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470e:	4b2c      	ldr	r3, [pc, #176]	; (80047c0 <HAL_RCC_ClockConfig+0x220>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d119      	bne.n	800474e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e0bf      	b.n	800489e <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d003      	beq.n	800472e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800472a:	2b03      	cmp	r3, #3
 800472c:	d107      	bne.n	800473e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800472e:	4b24      	ldr	r3, [pc, #144]	; (80047c0 <HAL_RCC_ClockConfig+0x220>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e0af      	b.n	800489e <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800473e:	4b20      	ldr	r3, [pc, #128]	; (80047c0 <HAL_RCC_ClockConfig+0x220>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e0a7      	b.n	800489e <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800474e:	4b1c      	ldr	r3, [pc, #112]	; (80047c0 <HAL_RCC_ClockConfig+0x220>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f023 0203 	bic.w	r2, r3, #3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4919      	ldr	r1, [pc, #100]	; (80047c0 <HAL_RCC_ClockConfig+0x220>)
 800475c:	4313      	orrs	r3, r2
 800475e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004760:	f7fc fc30 	bl	8000fc4 <HAL_GetTick>
 8004764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004766:	e00a      	b.n	800477e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004768:	f7fc fc2c 	bl	8000fc4 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	f241 3288 	movw	r2, #5000	; 0x1388
 8004776:	4293      	cmp	r3, r2
 8004778:	d901      	bls.n	800477e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e08f      	b.n	800489e <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477e:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <HAL_RCC_ClockConfig+0x220>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 020c 	and.w	r2, r3, #12
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	429a      	cmp	r2, r3
 800478e:	d1eb      	bne.n	8004768 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004790:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <HAL_RCC_ClockConfig+0x21c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d212      	bcs.n	80047c4 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479e:	4b07      	ldr	r3, [pc, #28]	; (80047bc <HAL_RCC_ClockConfig+0x21c>)
 80047a0:	683a      	ldr	r2, [r7, #0]
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a6:	4b05      	ldr	r3, [pc, #20]	; (80047bc <HAL_RCC_ClockConfig+0x21c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d007      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e072      	b.n	800489e <HAL_RCC_ClockConfig+0x2fe>
 80047b8:	08008cb8 	.word	0x08008cb8
 80047bc:	40023c00 	.word	0x40023c00
 80047c0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d025      	beq.n	800481c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d018      	beq.n	800480a <HAL_RCC_ClockConfig+0x26a>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e0:	d013      	beq.n	800480a <HAL_RCC_ClockConfig+0x26a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047ea:	d00e      	beq.n	800480a <HAL_RCC_ClockConfig+0x26a>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80047f4:	d009      	beq.n	800480a <HAL_RCC_ClockConfig+0x26a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80047fe:	d004      	beq.n	800480a <HAL_RCC_ClockConfig+0x26a>
 8004800:	f240 21c3 	movw	r1, #707	; 0x2c3
 8004804:	4828      	ldr	r0, [pc, #160]	; (80048a8 <HAL_RCC_ClockConfig+0x308>)
 8004806:	f7fc fa18 	bl	8000c3a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800480a:	4b28      	ldr	r3, [pc, #160]	; (80048ac <HAL_RCC_ClockConfig+0x30c>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	4925      	ldr	r1, [pc, #148]	; (80048ac <HAL_RCC_ClockConfig+0x30c>)
 8004818:	4313      	orrs	r3, r2
 800481a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d026      	beq.n	8004876 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d018      	beq.n	8004862 <HAL_RCC_ClockConfig+0x2c2>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004838:	d013      	beq.n	8004862 <HAL_RCC_ClockConfig+0x2c2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004842:	d00e      	beq.n	8004862 <HAL_RCC_ClockConfig+0x2c2>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800484c:	d009      	beq.n	8004862 <HAL_RCC_ClockConfig+0x2c2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004856:	d004      	beq.n	8004862 <HAL_RCC_ClockConfig+0x2c2>
 8004858:	f240 21ca 	movw	r1, #714	; 0x2ca
 800485c:	4812      	ldr	r0, [pc, #72]	; (80048a8 <HAL_RCC_ClockConfig+0x308>)
 800485e:	f7fc f9ec 	bl	8000c3a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004862:	4b12      	ldr	r3, [pc, #72]	; (80048ac <HAL_RCC_ClockConfig+0x30c>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	490e      	ldr	r1, [pc, #56]	; (80048ac <HAL_RCC_ClockConfig+0x30c>)
 8004872:	4313      	orrs	r3, r2
 8004874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004876:	f000 f821 	bl	80048bc <HAL_RCC_GetSysClockFreq>
 800487a:	4602      	mov	r2, r0
 800487c:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <HAL_RCC_ClockConfig+0x30c>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	091b      	lsrs	r3, r3, #4
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	490a      	ldr	r1, [pc, #40]	; (80048b0 <HAL_RCC_ClockConfig+0x310>)
 8004888:	5ccb      	ldrb	r3, [r1, r3]
 800488a:	fa22 f303 	lsr.w	r3, r2, r3
 800488e:	4a09      	ldr	r2, [pc, #36]	; (80048b4 <HAL_RCC_ClockConfig+0x314>)
 8004890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004892:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <HAL_RCC_ClockConfig+0x318>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f7fc fb50 	bl	8000f3c <HAL_InitTick>

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	08008cb8 	.word	0x08008cb8
 80048ac:	40023800 	.word	0x40023800
 80048b0:	08008d68 	.word	0x08008d68
 80048b4:	20000000 	.word	0x20000000
 80048b8:	20000004 	.word	0x20000004

080048bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048c0:	b094      	sub	sp, #80	; 0x50
 80048c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	647b      	str	r3, [r7, #68]	; 0x44
 80048c8:	2300      	movs	r3, #0
 80048ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048cc:	2300      	movs	r3, #0
 80048ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048d4:	4b79      	ldr	r3, [pc, #484]	; (8004abc <HAL_RCC_GetSysClockFreq+0x200>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 030c 	and.w	r3, r3, #12
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d00d      	beq.n	80048fc <HAL_RCC_GetSysClockFreq+0x40>
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	f200 80e1 	bhi.w	8004aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <HAL_RCC_GetSysClockFreq+0x34>
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d003      	beq.n	80048f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ee:	e0db      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048f0:	4b73      	ldr	r3, [pc, #460]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 80048f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80048f4:	e0db      	b.n	8004aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048f6:	4b73      	ldr	r3, [pc, #460]	; (8004ac4 <HAL_RCC_GetSysClockFreq+0x208>)
 80048f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048fa:	e0d8      	b.n	8004aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048fc:	4b6f      	ldr	r3, [pc, #444]	; (8004abc <HAL_RCC_GetSysClockFreq+0x200>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004904:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004906:	4b6d      	ldr	r3, [pc, #436]	; (8004abc <HAL_RCC_GetSysClockFreq+0x200>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d063      	beq.n	80049da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004912:	4b6a      	ldr	r3, [pc, #424]	; (8004abc <HAL_RCC_GetSysClockFreq+0x200>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	099b      	lsrs	r3, r3, #6
 8004918:	2200      	movs	r2, #0
 800491a:	63bb      	str	r3, [r7, #56]	; 0x38
 800491c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800491e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004924:	633b      	str	r3, [r7, #48]	; 0x30
 8004926:	2300      	movs	r3, #0
 8004928:	637b      	str	r3, [r7, #52]	; 0x34
 800492a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800492e:	4622      	mov	r2, r4
 8004930:	462b      	mov	r3, r5
 8004932:	f04f 0000 	mov.w	r0, #0
 8004936:	f04f 0100 	mov.w	r1, #0
 800493a:	0159      	lsls	r1, r3, #5
 800493c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004940:	0150      	lsls	r0, r2, #5
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4621      	mov	r1, r4
 8004948:	1a51      	subs	r1, r2, r1
 800494a:	6139      	str	r1, [r7, #16]
 800494c:	4629      	mov	r1, r5
 800494e:	eb63 0301 	sbc.w	r3, r3, r1
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004960:	4659      	mov	r1, fp
 8004962:	018b      	lsls	r3, r1, #6
 8004964:	4651      	mov	r1, sl
 8004966:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800496a:	4651      	mov	r1, sl
 800496c:	018a      	lsls	r2, r1, #6
 800496e:	4651      	mov	r1, sl
 8004970:	ebb2 0801 	subs.w	r8, r2, r1
 8004974:	4659      	mov	r1, fp
 8004976:	eb63 0901 	sbc.w	r9, r3, r1
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800498a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800498e:	4690      	mov	r8, r2
 8004990:	4699      	mov	r9, r3
 8004992:	4623      	mov	r3, r4
 8004994:	eb18 0303 	adds.w	r3, r8, r3
 8004998:	60bb      	str	r3, [r7, #8]
 800499a:	462b      	mov	r3, r5
 800499c:	eb49 0303 	adc.w	r3, r9, r3
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	f04f 0300 	mov.w	r3, #0
 80049aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049ae:	4629      	mov	r1, r5
 80049b0:	024b      	lsls	r3, r1, #9
 80049b2:	4621      	mov	r1, r4
 80049b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049b8:	4621      	mov	r1, r4
 80049ba:	024a      	lsls	r2, r1, #9
 80049bc:	4610      	mov	r0, r2
 80049be:	4619      	mov	r1, r3
 80049c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049c2:	2200      	movs	r2, #0
 80049c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80049c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049cc:	f7fb fc04 	bl	80001d8 <__aeabi_uldivmod>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4613      	mov	r3, r2
 80049d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049d8:	e058      	b.n	8004a8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049da:	4b38      	ldr	r3, [pc, #224]	; (8004abc <HAL_RCC_GetSysClockFreq+0x200>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	099b      	lsrs	r3, r3, #6
 80049e0:	2200      	movs	r2, #0
 80049e2:	4618      	mov	r0, r3
 80049e4:	4611      	mov	r1, r2
 80049e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049ea:	623b      	str	r3, [r7, #32]
 80049ec:	2300      	movs	r3, #0
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
 80049f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049f4:	4642      	mov	r2, r8
 80049f6:	464b      	mov	r3, r9
 80049f8:	f04f 0000 	mov.w	r0, #0
 80049fc:	f04f 0100 	mov.w	r1, #0
 8004a00:	0159      	lsls	r1, r3, #5
 8004a02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a06:	0150      	lsls	r0, r2, #5
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4641      	mov	r1, r8
 8004a0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a12:	4649      	mov	r1, r9
 8004a14:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a2c:	ebb2 040a 	subs.w	r4, r2, sl
 8004a30:	eb63 050b 	sbc.w	r5, r3, fp
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	00eb      	lsls	r3, r5, #3
 8004a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a42:	00e2      	lsls	r2, r4, #3
 8004a44:	4614      	mov	r4, r2
 8004a46:	461d      	mov	r5, r3
 8004a48:	4643      	mov	r3, r8
 8004a4a:	18e3      	adds	r3, r4, r3
 8004a4c:	603b      	str	r3, [r7, #0]
 8004a4e:	464b      	mov	r3, r9
 8004a50:	eb45 0303 	adc.w	r3, r5, r3
 8004a54:	607b      	str	r3, [r7, #4]
 8004a56:	f04f 0200 	mov.w	r2, #0
 8004a5a:	f04f 0300 	mov.w	r3, #0
 8004a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a62:	4629      	mov	r1, r5
 8004a64:	028b      	lsls	r3, r1, #10
 8004a66:	4621      	mov	r1, r4
 8004a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a6c:	4621      	mov	r1, r4
 8004a6e:	028a      	lsls	r2, r1, #10
 8004a70:	4610      	mov	r0, r2
 8004a72:	4619      	mov	r1, r3
 8004a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a76:	2200      	movs	r2, #0
 8004a78:	61bb      	str	r3, [r7, #24]
 8004a7a:	61fa      	str	r2, [r7, #28]
 8004a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a80:	f7fb fbaa 	bl	80001d8 <__aeabi_uldivmod>
 8004a84:	4602      	mov	r2, r0
 8004a86:	460b      	mov	r3, r1
 8004a88:	4613      	mov	r3, r2
 8004a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a8c:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <HAL_RCC_GetSysClockFreq+0x200>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	0c1b      	lsrs	r3, r3, #16
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	3301      	adds	r3, #1
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004aa6:	e002      	b.n	8004aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004aa8:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004aaa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3750      	adds	r7, #80	; 0x50
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aba:	bf00      	nop
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	00f42400 	.word	0x00f42400
 8004ac4:	007a1200 	.word	0x007a1200

08004ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004acc:	4b03      	ldr	r3, [pc, #12]	; (8004adc <HAL_RCC_GetHCLKFreq+0x14>)
 8004ace:	681b      	ldr	r3, [r3, #0]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	20000000 	.word	0x20000000

08004ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ae4:	f7ff fff0 	bl	8004ac8 <HAL_RCC_GetHCLKFreq>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	0a9b      	lsrs	r3, r3, #10
 8004af0:	f003 0307 	and.w	r3, r3, #7
 8004af4:	4903      	ldr	r1, [pc, #12]	; (8004b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004af6:	5ccb      	ldrb	r3, [r1, r3]
 8004af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40023800 	.word	0x40023800
 8004b04:	08008d78 	.word	0x08008d78

08004b08 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b14:	2300      	movs	r3, #0
 8004b16:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b0f      	cmp	r3, #15
 8004b26:	d904      	bls.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8004b28:	f640 11d7 	movw	r1, #2519	; 0x9d7
 8004b2c:	4834      	ldr	r0, [pc, #208]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004b2e:	f7fc f884 	bl	8000c3a <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d105      	bne.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d066      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d903      	bls.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	2b07      	cmp	r3, #7
 8004b58:	d904      	bls.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004b5a:	f640 11de 	movw	r1, #2526	; 0x9de
 8004b5e:	4828      	ldr	r0, [pc, #160]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004b60:	f7fc f86b 	bl	8000c3a <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	2b31      	cmp	r3, #49	; 0x31
 8004b6a:	d904      	bls.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004b74:	d904      	bls.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004b76:	f640 11df 	movw	r1, #2527	; 0x9df
 8004b7a:	4821      	ldr	r0, [pc, #132]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004b7c:	f7fc f85d 	bl	8000c3a <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d903      	bls.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b3f      	cmp	r3, #63	; 0x3f
 8004b8e:	d904      	bls.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x92>
 8004b90:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8004b94:	481a      	ldr	r0, [pc, #104]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004b96:	f7fc f850 	bl	8000c3a <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b9a:	4b1a      	ldr	r3, [pc, #104]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ba0:	f7fc fa10 	bl	8000fc4 <HAL_GetTick>
 8004ba4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ba8:	f7fc fa0c 	bl	8000fc4 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e1b3      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bba:	4b13      	ldr	r3, [pc, #76]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f0      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	019b      	lsls	r3, r3, #6
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	071b      	lsls	r3, r3, #28
 8004bd8:	490b      	ldr	r1, [pc, #44]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004be0:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8004be2:	2201      	movs	r2, #1
 8004be4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004be6:	f7fc f9ed 	bl	8000fc4 <HAL_GetTick>
 8004bea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bec:	e00e      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bee:	f7fc f9e9 	bl	8000fc4 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d907      	bls.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e190      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004c00:	08008cf0 	.word	0x08008cf0
 8004c04:	42470068 	.word	0x42470068
 8004c08:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c0c:	4b88      	ldr	r3, [pc, #544]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0ea      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 8173 	beq.w	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c2e:	f000 80a6 	beq.w	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c3a:	f000 80a0 	beq.w	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	4a7c      	ldr	r2, [pc, #496]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	f000 809a 	beq.w	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	4a7a      	ldr	r2, [pc, #488]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	f000 8094 	beq.w	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	4a78      	ldr	r2, [pc, #480]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	f000 808e 	beq.w	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	4a76      	ldr	r2, [pc, #472]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	f000 8088 	beq.w	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	4a74      	ldr	r2, [pc, #464]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	f000 8082 	beq.w	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	4a72      	ldr	r2, [pc, #456]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d07c      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	4a70      	ldr	r2, [pc, #448]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d077      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	4a6f      	ldr	r2, [pc, #444]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d072      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	4a6d      	ldr	r2, [pc, #436]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d06d      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	4a6c      	ldr	r2, [pc, #432]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d068      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	4a6a      	ldr	r2, [pc, #424]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d063      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	4a69      	ldr	r2, [pc, #420]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d05e      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	4a67      	ldr	r2, [pc, #412]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d059      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	4a66      	ldr	r2, [pc, #408]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d054      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	4a64      	ldr	r2, [pc, #400]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d04f      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	4a63      	ldr	r2, [pc, #396]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d04a      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	4a61      	ldr	r2, [pc, #388]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d045      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	4a60      	ldr	r2, [pc, #384]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d040      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	4a5e      	ldr	r2, [pc, #376]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d03b      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	4a5d      	ldr	r2, [pc, #372]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d036      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	4a5b      	ldr	r2, [pc, #364]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d031      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	4a5a      	ldr	r2, [pc, #360]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d02c      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	4a58      	ldr	r2, [pc, #352]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d027      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	4a57      	ldr	r2, [pc, #348]	; (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d022      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	4a55      	ldr	r2, [pc, #340]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01d      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	4a54      	ldr	r2, [pc, #336]	; (8004e98 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d018      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	4a52      	ldr	r2, [pc, #328]	; (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	4a51      	ldr	r2, [pc, #324]	; (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00e      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	4a4f      	ldr	r2, [pc, #316]	; (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d009      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	4a4e      	ldr	r2, [pc, #312]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d74:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 8004d78:	484c      	ldr	r0, [pc, #304]	; (8004eac <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8004d7a:	f7fb ff5e 	bl	8000c3a <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	4b2b      	ldr	r3, [pc, #172]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	4a2a      	ldr	r2, [pc, #168]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d8e:	4b28      	ldr	r3, [pc, #160]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d9a:	4b45      	ldr	r3, [pc, #276]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a44      	ldr	r2, [pc, #272]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004da6:	f7fc f90d 	bl	8000fc4 <HAL_GetTick>
 8004daa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004dae:	f7fc f909 	bl	8000fc4 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e0b0      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004dc0:	4b3b      	ldr	r3, [pc, #236]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d0f0      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dcc:	4b18      	ldr	r3, [pc, #96]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dd4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d073      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d06c      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dea:	4b11      	ldr	r3, [pc, #68]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004df2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004df4:	4b2f      	ldr	r3, [pc, #188]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8004df6:	2201      	movs	r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dfa:	4b2e      	ldr	r3, [pc, #184]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e00:	4a0b      	ldr	r2, [pc, #44]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e06:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d158      	bne.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e12:	f7fc f8d7 	bl	8000fc4 <HAL_GetTick>
 8004e16:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e18:	e04e      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e1a:	f7fc f8d3 	bl	8000fc4 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d945      	bls.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e078      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004e30:	40023800 	.word	0x40023800
 8004e34:	00020300 	.word	0x00020300
 8004e38:	00030300 	.word	0x00030300
 8004e3c:	00040300 	.word	0x00040300
 8004e40:	00050300 	.word	0x00050300
 8004e44:	00060300 	.word	0x00060300
 8004e48:	00070300 	.word	0x00070300
 8004e4c:	00080300 	.word	0x00080300
 8004e50:	00090300 	.word	0x00090300
 8004e54:	000a0300 	.word	0x000a0300
 8004e58:	000b0300 	.word	0x000b0300
 8004e5c:	000c0300 	.word	0x000c0300
 8004e60:	000d0300 	.word	0x000d0300
 8004e64:	000e0300 	.word	0x000e0300
 8004e68:	000f0300 	.word	0x000f0300
 8004e6c:	00100300 	.word	0x00100300
 8004e70:	00110300 	.word	0x00110300
 8004e74:	00120300 	.word	0x00120300
 8004e78:	00130300 	.word	0x00130300
 8004e7c:	00140300 	.word	0x00140300
 8004e80:	00150300 	.word	0x00150300
 8004e84:	00160300 	.word	0x00160300
 8004e88:	00170300 	.word	0x00170300
 8004e8c:	00180300 	.word	0x00180300
 8004e90:	00190300 	.word	0x00190300
 8004e94:	001a0300 	.word	0x001a0300
 8004e98:	001b0300 	.word	0x001b0300
 8004e9c:	001c0300 	.word	0x001c0300
 8004ea0:	001d0300 	.word	0x001d0300
 8004ea4:	001e0300 	.word	0x001e0300
 8004ea8:	001f0300 	.word	0x001f0300
 8004eac:	08008cf0 	.word	0x08008cf0
 8004eb0:	40007000 	.word	0x40007000
 8004eb4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb8:	4b1c      	ldr	r3, [pc, #112]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0aa      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ecc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ed0:	d10d      	bne.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004ed2:	4b16      	ldr	r3, [pc, #88]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee6:	4911      	ldr	r1, [pc, #68]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	608b      	str	r3, [r1, #8]
 8004eec:	e005      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004eee:	4b0f      	ldr	r3, [pc, #60]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	4a0e      	ldr	r2, [pc, #56]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004ef4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ef8:	6093      	str	r3, [r2, #8]
 8004efa:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004efc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f06:	4909      	ldr	r1, [pc, #36]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0308 	and.w	r3, r3, #8
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	7d1a      	ldrb	r2, [r3, #20]
 8004f1c:	4b04      	ldr	r3, [pc, #16]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8004f1e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	424711e0 	.word	0x424711e0

08004f34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d140      	bne.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004f52:	4b24      	ldr	r3, [pc, #144]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d131      	bne.n	8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f68:	4b1f      	ldr	r3, [pc, #124]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004f6a:	617b      	str	r3, [r7, #20]
          break;
 8004f6c:	e031      	b.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004f6e:	4b1d      	ldr	r3, [pc, #116]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f7a:	d109      	bne.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004f7c:	4b19      	ldr	r3, [pc, #100]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f86:	4a19      	ldr	r2, [pc, #100]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004f90:	4b14      	ldr	r3, [pc, #80]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f9a:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa0:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004fa2:	4b10      	ldr	r3, [pc, #64]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa8:	099b      	lsrs	r3, r3, #6
 8004faa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	fb02 f303 	mul.w	r3, r2, r3
 8004fb4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004fb6:	4b0b      	ldr	r3, [pc, #44]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fbc:	0f1b      	lsrs	r3, r3, #28
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc8:	617b      	str	r3, [r7, #20]
          break;
 8004fca:	e002      	b.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]
          break;
 8004fd0:	bf00      	nop
        }
      }
      break;
 8004fd2:	bf00      	nop
    }
  }
  return frequency;
 8004fd4:	697b      	ldr	r3, [r7, #20]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	371c      	adds	r7, #28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	00bb8000 	.word	0x00bb8000
 8004fec:	007a1200 	.word	0x007a1200
 8004ff0:	00f42400 	.word	0x00f42400

08004ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e18c      	b.n	8005320 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a75      	ldr	r2, [pc, #468]	; (80051e0 <HAL_SPI_Init+0x1ec>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d018      	beq.n	8005042 <HAL_SPI_Init+0x4e>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a73      	ldr	r2, [pc, #460]	; (80051e4 <HAL_SPI_Init+0x1f0>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d013      	beq.n	8005042 <HAL_SPI_Init+0x4e>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a72      	ldr	r2, [pc, #456]	; (80051e8 <HAL_SPI_Init+0x1f4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00e      	beq.n	8005042 <HAL_SPI_Init+0x4e>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a70      	ldr	r2, [pc, #448]	; (80051ec <HAL_SPI_Init+0x1f8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d009      	beq.n	8005042 <HAL_SPI_Init+0x4e>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a6f      	ldr	r2, [pc, #444]	; (80051f0 <HAL_SPI_Init+0x1fc>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d004      	beq.n	8005042 <HAL_SPI_Init+0x4e>
 8005038:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800503c:	486d      	ldr	r0, [pc, #436]	; (80051f4 <HAL_SPI_Init+0x200>)
 800503e:	f7fb fdfc 	bl	8000c3a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d009      	beq.n	800505e <HAL_SPI_Init+0x6a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005052:	d004      	beq.n	800505e <HAL_SPI_Init+0x6a>
 8005054:	f240 1141 	movw	r1, #321	; 0x141
 8005058:	4866      	ldr	r0, [pc, #408]	; (80051f4 <HAL_SPI_Init+0x200>)
 800505a:	f7fb fdee 	bl	8000c3a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00e      	beq.n	8005084 <HAL_SPI_Init+0x90>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506e:	d009      	beq.n	8005084 <HAL_SPI_Init+0x90>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005078:	d004      	beq.n	8005084 <HAL_SPI_Init+0x90>
 800507a:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800507e:	485d      	ldr	r0, [pc, #372]	; (80051f4 <HAL_SPI_Init+0x200>)
 8005080:	f7fb fddb 	bl	8000c3a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800508c:	d008      	beq.n	80050a0 <HAL_SPI_Init+0xac>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d004      	beq.n	80050a0 <HAL_SPI_Init+0xac>
 8005096:	f240 1143 	movw	r1, #323	; 0x143
 800509a:	4856      	ldr	r0, [pc, #344]	; (80051f4 <HAL_SPI_Init+0x200>)
 800509c:	f7fb fdcd 	bl	8000c3a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050a8:	d00d      	beq.n	80050c6 <HAL_SPI_Init+0xd2>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d009      	beq.n	80050c6 <HAL_SPI_Init+0xd2>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050ba:	d004      	beq.n	80050c6 <HAL_SPI_Init+0xd2>
 80050bc:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80050c0:	484c      	ldr	r0, [pc, #304]	; (80051f4 <HAL_SPI_Init+0x200>)
 80050c2:	f7fb fdba 	bl	8000c3a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d020      	beq.n	8005110 <HAL_SPI_Init+0x11c>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d01c      	beq.n	8005110 <HAL_SPI_Init+0x11c>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	2b10      	cmp	r3, #16
 80050dc:	d018      	beq.n	8005110 <HAL_SPI_Init+0x11c>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	2b18      	cmp	r3, #24
 80050e4:	d014      	beq.n	8005110 <HAL_SPI_Init+0x11c>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	d010      	beq.n	8005110 <HAL_SPI_Init+0x11c>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	2b28      	cmp	r3, #40	; 0x28
 80050f4:	d00c      	beq.n	8005110 <HAL_SPI_Init+0x11c>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	2b30      	cmp	r3, #48	; 0x30
 80050fc:	d008      	beq.n	8005110 <HAL_SPI_Init+0x11c>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	2b38      	cmp	r3, #56	; 0x38
 8005104:	d004      	beq.n	8005110 <HAL_SPI_Init+0x11c>
 8005106:	f240 1145 	movw	r1, #325	; 0x145
 800510a:	483a      	ldr	r0, [pc, #232]	; (80051f4 <HAL_SPI_Init+0x200>)
 800510c:	f7fb fd95 	bl	8000c3a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d008      	beq.n	800512a <HAL_SPI_Init+0x136>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	2b80      	cmp	r3, #128	; 0x80
 800511e:	d004      	beq.n	800512a <HAL_SPI_Init+0x136>
 8005120:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8005124:	4833      	ldr	r0, [pc, #204]	; (80051f4 <HAL_SPI_Init+0x200>)
 8005126:	f7fb fd88 	bl	8000c3a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	2b00      	cmp	r3, #0
 8005130:	d008      	beq.n	8005144 <HAL_SPI_Init+0x150>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	2b10      	cmp	r3, #16
 8005138:	d004      	beq.n	8005144 <HAL_SPI_Init+0x150>
 800513a:	f240 1147 	movw	r1, #327	; 0x147
 800513e:	482d      	ldr	r0, [pc, #180]	; (80051f4 <HAL_SPI_Init+0x200>)
 8005140:	f7fb fd7b 	bl	8000c3a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	2b00      	cmp	r3, #0
 800514a:	d155      	bne.n	80051f8 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d008      	beq.n	8005166 <HAL_SPI_Init+0x172>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d004      	beq.n	8005166 <HAL_SPI_Init+0x172>
 800515c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8005160:	4824      	ldr	r0, [pc, #144]	; (80051f4 <HAL_SPI_Init+0x200>)
 8005162:	f7fb fd6a 	bl	8000c3a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d008      	beq.n	8005180 <HAL_SPI_Init+0x18c>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d004      	beq.n	8005180 <HAL_SPI_Init+0x18c>
 8005176:	f240 114b 	movw	r1, #331	; 0x14b
 800517a:	481e      	ldr	r0, [pc, #120]	; (80051f4 <HAL_SPI_Init+0x200>)
 800517c:	f7fb fd5d 	bl	8000c3a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005188:	d125      	bne.n	80051d6 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d05d      	beq.n	800524e <HAL_SPI_Init+0x25a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	2b08      	cmp	r3, #8
 8005198:	d059      	beq.n	800524e <HAL_SPI_Init+0x25a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	2b10      	cmp	r3, #16
 80051a0:	d055      	beq.n	800524e <HAL_SPI_Init+0x25a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	2b18      	cmp	r3, #24
 80051a8:	d051      	beq.n	800524e <HAL_SPI_Init+0x25a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	d04d      	beq.n	800524e <HAL_SPI_Init+0x25a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	2b28      	cmp	r3, #40	; 0x28
 80051b8:	d049      	beq.n	800524e <HAL_SPI_Init+0x25a>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	2b30      	cmp	r3, #48	; 0x30
 80051c0:	d045      	beq.n	800524e <HAL_SPI_Init+0x25a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	2b38      	cmp	r3, #56	; 0x38
 80051c8:	d041      	beq.n	800524e <HAL_SPI_Init+0x25a>
 80051ca:	f240 114f 	movw	r1, #335	; 0x14f
 80051ce:	4809      	ldr	r0, [pc, #36]	; (80051f4 <HAL_SPI_Init+0x200>)
 80051d0:	f7fb fd33 	bl	8000c3a <assert_failed>
 80051d4:	e03b      	b.n	800524e <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	61da      	str	r2, [r3, #28]
 80051dc:	e037      	b.n	800524e <HAL_SPI_Init+0x25a>
 80051de:	bf00      	nop
 80051e0:	40013000 	.word	0x40013000
 80051e4:	40003800 	.word	0x40003800
 80051e8:	40003c00 	.word	0x40003c00
 80051ec:	40013400 	.word	0x40013400
 80051f0:	40015000 	.word	0x40015000
 80051f4:	08008d2c 	.word	0x08008d2c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d020      	beq.n	8005242 <HAL_SPI_Init+0x24e>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	2b08      	cmp	r3, #8
 8005206:	d01c      	beq.n	8005242 <HAL_SPI_Init+0x24e>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	2b10      	cmp	r3, #16
 800520e:	d018      	beq.n	8005242 <HAL_SPI_Init+0x24e>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	2b18      	cmp	r3, #24
 8005216:	d014      	beq.n	8005242 <HAL_SPI_Init+0x24e>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	2b20      	cmp	r3, #32
 800521e:	d010      	beq.n	8005242 <HAL_SPI_Init+0x24e>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	2b28      	cmp	r3, #40	; 0x28
 8005226:	d00c      	beq.n	8005242 <HAL_SPI_Init+0x24e>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	2b30      	cmp	r3, #48	; 0x30
 800522e:	d008      	beq.n	8005242 <HAL_SPI_Init+0x24e>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	2b38      	cmp	r3, #56	; 0x38
 8005236:	d004      	beq.n	8005242 <HAL_SPI_Init+0x24e>
 8005238:	f240 1159 	movw	r1, #345	; 0x159
 800523c:	483a      	ldr	r0, [pc, #232]	; (8005328 <HAL_SPI_Init+0x334>)
 800523e:	f7fb fcfc 	bl	8000c3a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d106      	bne.n	800526e <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7fb fd27 	bl	8000cbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2202      	movs	r2, #2
 8005272:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005284:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052a0:	431a      	orrs	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	431a      	orrs	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052c8:	431a      	orrs	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d2:	ea42 0103 	orr.w	r1, r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	0c1b      	lsrs	r3, r3, #16
 80052ec:	f003 0104 	and.w	r1, r3, #4
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	f003 0210 	and.w	r2, r3, #16
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	69da      	ldr	r2, [r3, #28]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800530e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	08008d2c 	.word	0x08008d2c

0800532c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800532c:	b084      	sub	sp, #16
 800532e:	b580      	push	{r7, lr}
 8005330:	b084      	sub	sp, #16
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
 8005336:	f107 001c 	add.w	r0, r7, #28
 800533a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800533e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005340:	2b01      	cmp	r3, #1
 8005342:	d122      	bne.n	800538a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800536c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800536e:	2b01      	cmp	r3, #1
 8005370:	d105      	bne.n	800537e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f9c0 	bl	8005704 <USB_CoreReset>
 8005384:	4603      	mov	r3, r0
 8005386:	73fb      	strb	r3, [r7, #15]
 8005388:	e01a      	b.n	80053c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f9b4 	bl	8005704 <USB_CoreReset>
 800539c:	4603      	mov	r3, r0
 800539e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d106      	bne.n	80053b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	639a      	str	r2, [r3, #56]	; 0x38
 80053b2:	e005      	b.n	80053c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80053c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d10b      	bne.n	80053de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f043 0206 	orr.w	r2, r3, #6
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f043 0220 	orr.w	r2, r3, #32
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80053de:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053ea:	b004      	add	sp, #16
 80053ec:	4770      	bx	lr

080053ee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b083      	sub	sp, #12
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f043 0201 	orr.w	r2, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f023 0201 	bic.w	r2, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b084      	sub	sp, #16
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	460b      	mov	r3, r1
 800543c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800544e:	78fb      	ldrb	r3, [r7, #3]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d115      	bne.n	8005480 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005460:	2001      	movs	r0, #1
 8005462:	f7fb fdbb 	bl	8000fdc <HAL_Delay>
      ms++;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	3301      	adds	r3, #1
 800546a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f93a 	bl	80056e6 <USB_GetMode>
 8005472:	4603      	mov	r3, r0
 8005474:	2b01      	cmp	r3, #1
 8005476:	d01e      	beq.n	80054b6 <USB_SetCurrentMode+0x84>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b31      	cmp	r3, #49	; 0x31
 800547c:	d9f0      	bls.n	8005460 <USB_SetCurrentMode+0x2e>
 800547e:	e01a      	b.n	80054b6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005480:	78fb      	ldrb	r3, [r7, #3]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d115      	bne.n	80054b2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005492:	2001      	movs	r0, #1
 8005494:	f7fb fda2 	bl	8000fdc <HAL_Delay>
      ms++;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3301      	adds	r3, #1
 800549c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f921 	bl	80056e6 <USB_GetMode>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d005      	beq.n	80054b6 <USB_SetCurrentMode+0x84>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b31      	cmp	r3, #49	; 0x31
 80054ae:	d9f0      	bls.n	8005492 <USB_SetCurrentMode+0x60>
 80054b0:	e001      	b.n	80054b6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e005      	b.n	80054c2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b32      	cmp	r3, #50	; 0x32
 80054ba:	d101      	bne.n	80054c0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e000      	b.n	80054c2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	3301      	adds	r3, #1
 80054de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4a13      	ldr	r2, [pc, #76]	; (8005530 <USB_FlushTxFifo+0x64>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d901      	bls.n	80054ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e01b      	b.n	8005524 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	daf2      	bge.n	80054da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	019b      	lsls	r3, r3, #6
 80054fc:	f043 0220 	orr.w	r2, r3, #32
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3301      	adds	r3, #1
 8005508:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4a08      	ldr	r2, [pc, #32]	; (8005530 <USB_FlushTxFifo+0x64>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d901      	bls.n	8005516 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e006      	b.n	8005524 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f003 0320 	and.w	r3, r3, #32
 800551e:	2b20      	cmp	r3, #32
 8005520:	d0f0      	beq.n	8005504 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	00030d40 	.word	0x00030d40

08005534 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	3301      	adds	r3, #1
 8005544:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4a11      	ldr	r2, [pc, #68]	; (8005590 <USB_FlushRxFifo+0x5c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d901      	bls.n	8005552 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e018      	b.n	8005584 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	2b00      	cmp	r3, #0
 8005558:	daf2      	bge.n	8005540 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2210      	movs	r2, #16
 8005562:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3301      	adds	r3, #1
 8005568:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	4a08      	ldr	r2, [pc, #32]	; (8005590 <USB_FlushRxFifo+0x5c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e006      	b.n	8005584 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f003 0310 	and.w	r3, r3, #16
 800557e:	2b10      	cmp	r3, #16
 8005580:	d0f0      	beq.n	8005564 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	00030d40 	.word	0x00030d40

08005594 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005594:	b480      	push	{r7}
 8005596:	b089      	sub	sp, #36	; 0x24
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	4611      	mov	r1, r2
 80055a0:	461a      	mov	r2, r3
 80055a2:	460b      	mov	r3, r1
 80055a4:	71fb      	strb	r3, [r7, #7]
 80055a6:	4613      	mov	r3, r2
 80055a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80055b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d123      	bne.n	8005602 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055ba:	88bb      	ldrh	r3, [r7, #4]
 80055bc:	3303      	adds	r3, #3
 80055be:	089b      	lsrs	r3, r3, #2
 80055c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055c2:	2300      	movs	r3, #0
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	e018      	b.n	80055fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	031a      	lsls	r2, r3, #12
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d4:	461a      	mov	r2, r3
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	3301      	adds	r3, #1
 80055e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	3301      	adds	r3, #1
 80055e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	3301      	adds	r3, #1
 80055ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	3301      	adds	r3, #1
 80055f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	3301      	adds	r3, #1
 80055f8:	61bb      	str	r3, [r7, #24]
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d3e2      	bcc.n	80055c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3724      	adds	r7, #36	; 0x24
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005610:	b480      	push	{r7}
 8005612:	b08b      	sub	sp, #44	; 0x2c
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	4613      	mov	r3, r2
 800561c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005626:	88fb      	ldrh	r3, [r7, #6]
 8005628:	089b      	lsrs	r3, r3, #2
 800562a:	b29b      	uxth	r3, r3
 800562c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	f003 0303 	and.w	r3, r3, #3
 8005634:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005636:	2300      	movs	r3, #0
 8005638:	623b      	str	r3, [r7, #32]
 800563a:	e014      	b.n	8005666 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	601a      	str	r2, [r3, #0]
    pDest++;
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	3301      	adds	r3, #1
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	3301      	adds	r3, #1
 8005652:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	3301      	adds	r3, #1
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	3301      	adds	r3, #1
 800565e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	3301      	adds	r3, #1
 8005664:	623b      	str	r3, [r7, #32]
 8005666:	6a3a      	ldr	r2, [r7, #32]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	429a      	cmp	r2, r3
 800566c:	d3e6      	bcc.n	800563c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800566e:	8bfb      	ldrh	r3, [r7, #30]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d01e      	beq.n	80056b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800567e:	461a      	mov	r2, r3
 8005680:	f107 0310 	add.w	r3, r7, #16
 8005684:	6812      	ldr	r2, [r2, #0]
 8005686:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
 8005694:	b2da      	uxtb	r2, r3
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	701a      	strb	r2, [r3, #0]
      i++;
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	3301      	adds	r3, #1
 800569e:	623b      	str	r3, [r7, #32]
      pDest++;
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	3301      	adds	r3, #1
 80056a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80056a6:	8bfb      	ldrh	r3, [r7, #30]
 80056a8:	3b01      	subs	r3, #1
 80056aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80056ac:	8bfb      	ldrh	r3, [r7, #30]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1ea      	bne.n	8005688 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	372c      	adds	r7, #44	; 0x2c
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4013      	ands	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80056d8:	68fb      	ldr	r3, [r7, #12]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	f003 0301 	and.w	r3, r3, #1
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
	...

08005704 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800570c:	2300      	movs	r3, #0
 800570e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3301      	adds	r3, #1
 8005714:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4a13      	ldr	r2, [pc, #76]	; (8005768 <USB_CoreReset+0x64>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d901      	bls.n	8005722 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e01b      	b.n	800575a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	2b00      	cmp	r3, #0
 8005728:	daf2      	bge.n	8005710 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	f043 0201 	orr.w	r2, r3, #1
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3301      	adds	r3, #1
 800573e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4a09      	ldr	r2, [pc, #36]	; (8005768 <USB_CoreReset+0x64>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d901      	bls.n	800574c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e006      	b.n	800575a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b01      	cmp	r3, #1
 8005756:	d0f0      	beq.n	800573a <USB_CoreReset+0x36>

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	00030d40 	.word	0x00030d40

0800576c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800576c:	b084      	sub	sp, #16
 800576e:	b580      	push	{r7, lr}
 8005770:	b086      	sub	sp, #24
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800577a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800578c:	461a      	mov	r2, r3
 800578e:	2300      	movs	r3, #0
 8005790:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005796:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d018      	beq.n	80057f4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80057c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d10a      	bne.n	80057de <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057d6:	f043 0304 	orr.w	r3, r3, #4
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	e014      	b.n	8005808 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057ec:	f023 0304 	bic.w	r3, r3, #4
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	e009      	b.n	8005808 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005802:	f023 0304 	bic.w	r3, r3, #4
 8005806:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005808:	2110      	movs	r1, #16
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff fe5e 	bl	80054cc <USB_FlushTxFifo>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f7ff fe8a 	bl	8005534 <USB_FlushRxFifo>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800582a:	2300      	movs	r3, #0
 800582c:	613b      	str	r3, [r7, #16]
 800582e:	e015      	b.n	800585c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4413      	add	r3, r2
 8005838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583c:	461a      	mov	r2, r3
 800583e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005842:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4413      	add	r3, r2
 800584c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005850:	461a      	mov	r2, r3
 8005852:	2300      	movs	r3, #0
 8005854:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	3301      	adds	r3, #1
 800585a:	613b      	str	r3, [r7, #16]
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	429a      	cmp	r2, r3
 8005862:	d3e5      	bcc.n	8005830 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005870:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00b      	beq.n	8005896 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005884:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a13      	ldr	r2, [pc, #76]	; (80058d8 <USB_HostInit+0x16c>)
 800588a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a13      	ldr	r2, [pc, #76]	; (80058dc <USB_HostInit+0x170>)
 8005890:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005894:	e009      	b.n	80058aa <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2280      	movs	r2, #128	; 0x80
 800589a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a10      	ldr	r2, [pc, #64]	; (80058e0 <USB_HostInit+0x174>)
 80058a0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a0f      	ldr	r2, [pc, #60]	; (80058e4 <USB_HostInit+0x178>)
 80058a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d105      	bne.n	80058bc <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	f043 0210 	orr.w	r2, r3, #16
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699a      	ldr	r2, [r3, #24]
 80058c0:	4b09      	ldr	r3, [pc, #36]	; (80058e8 <USB_HostInit+0x17c>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80058c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3718      	adds	r7, #24
 80058ce:	46bd      	mov	sp, r7
 80058d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058d4:	b004      	add	sp, #16
 80058d6:	4770      	bx	lr
 80058d8:	01000200 	.word	0x01000200
 80058dc:	00e00300 	.word	0x00e00300
 80058e0:	00600080 	.word	0x00600080
 80058e4:	004000e0 	.word	0x004000e0
 80058e8:	a3200008 	.word	0xa3200008

080058ec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	460b      	mov	r3, r1
 80058f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800590a:	f023 0303 	bic.w	r3, r3, #3
 800590e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	f003 0303 	and.w	r3, r3, #3
 800591e:	68f9      	ldr	r1, [r7, #12]
 8005920:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005924:	4313      	orrs	r3, r2
 8005926:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d107      	bne.n	800593e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005934:	461a      	mov	r2, r3
 8005936:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800593a:	6053      	str	r3, [r2, #4]
 800593c:	e009      	b.n	8005952 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800593e:	78fb      	ldrb	r3, [r7, #3]
 8005940:	2b02      	cmp	r3, #2
 8005942:	d106      	bne.n	8005952 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800594a:	461a      	mov	r2, r3
 800594c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005950:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005980:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800598a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800598e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005990:	2064      	movs	r0, #100	; 0x64
 8005992:	f7fb fb23 	bl	8000fdc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800599e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059a2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80059a4:	200a      	movs	r0, #10
 80059a6:	f7fb fb19 	bl	8000fdc <HAL_Delay>

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80059d8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d109      	bne.n	80059f8 <USB_DriveVbus+0x44>
 80059e4:	78fb      	ldrb	r3, [r7, #3]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d106      	bne.n	80059f8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80059f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80059f6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a02:	d109      	bne.n	8005a18 <USB_DriveVbus+0x64>
 8005a04:	78fb      	ldrb	r3, [r7, #3]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d106      	bne.n	8005a18 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005a12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a16:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b085      	sub	sp, #20
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	0c5b      	lsrs	r3, r3, #17
 8005a44:	f003 0303 	and.w	r3, r3, #3
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	b29b      	uxth	r3, r3
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
	...

08005a78 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	4608      	mov	r0, r1
 8005a82:	4611      	mov	r1, r2
 8005a84:	461a      	mov	r2, r3
 8005a86:	4603      	mov	r3, r0
 8005a88:	70fb      	strb	r3, [r7, #3]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	70bb      	strb	r3, [r7, #2]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005a9a:	78fb      	ldrb	r3, [r7, #3]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005aac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005aae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d87e      	bhi.n	8005bb4 <USB_HC_Init+0x13c>
 8005ab6:	a201      	add	r2, pc, #4	; (adr r2, 8005abc <USB_HC_Init+0x44>)
 8005ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abc:	08005acd 	.word	0x08005acd
 8005ac0:	08005b77 	.word	0x08005b77
 8005ac4:	08005acd 	.word	0x08005acd
 8005ac8:	08005b39 	.word	0x08005b39
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad8:	461a      	mov	r2, r3
 8005ada:	f240 439d 	movw	r3, #1181	; 0x49d
 8005ade:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ae0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	da10      	bge.n	8005b0a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ae8:	78fb      	ldrb	r3, [r7, #3]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	78fa      	ldrb	r2, [r7, #3]
 8005af8:	0151      	lsls	r1, r2, #5
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	440a      	add	r2, r1
 8005afe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b06:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005b08:	e057      	b.n	8005bba <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d051      	beq.n	8005bba <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005b16:	78fb      	ldrb	r3, [r7, #3]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	78fa      	ldrb	r2, [r7, #3]
 8005b26:	0151      	lsls	r1, r2, #5
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	440a      	add	r2, r1
 8005b2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b30:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005b34:	60d3      	str	r3, [r2, #12]
      break;
 8005b36:	e040      	b.n	8005bba <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b38:	78fb      	ldrb	r3, [r7, #3]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b44:	461a      	mov	r2, r3
 8005b46:	f240 639d 	movw	r3, #1693	; 0x69d
 8005b4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	da34      	bge.n	8005bbe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b54:	78fb      	ldrb	r3, [r7, #3]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	78fa      	ldrb	r2, [r7, #3]
 8005b64:	0151      	lsls	r1, r2, #5
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	440a      	add	r2, r1
 8005b6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b72:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005b74:	e023      	b.n	8005bbe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b76:	78fb      	ldrb	r3, [r7, #3]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b82:	461a      	mov	r2, r3
 8005b84:	f240 2325 	movw	r3, #549	; 0x225
 8005b88:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	da17      	bge.n	8005bc2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005b92:	78fb      	ldrb	r3, [r7, #3]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	78fa      	ldrb	r2, [r7, #3]
 8005ba2:	0151      	lsls	r1, r2, #5
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bac:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005bb0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005bb2:	e006      	b.n	8005bc2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	77fb      	strb	r3, [r7, #31]
      break;
 8005bb8:	e004      	b.n	8005bc4 <USB_HC_Init+0x14c>
      break;
 8005bba:	bf00      	nop
 8005bbc:	e002      	b.n	8005bc4 <USB_HC_Init+0x14c>
      break;
 8005bbe:	bf00      	nop
 8005bc0:	e000      	b.n	8005bc4 <USB_HC_Init+0x14c>
      break;
 8005bc2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005bc4:	78fb      	ldrb	r3, [r7, #3]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	78fa      	ldrb	r2, [r7, #3]
 8005bd4:	0151      	lsls	r1, r2, #5
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	440a      	add	r2, r1
 8005bda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bde:	f043 0302 	orr.w	r3, r3, #2
 8005be2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bea:	699a      	ldr	r2, [r3, #24]
 8005bec:	78fb      	ldrb	r3, [r7, #3]
 8005bee:	f003 030f 	and.w	r3, r3, #15
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf8:	6939      	ldr	r1, [r7, #16]
 8005bfa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005c0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	da03      	bge.n	8005c1e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c1a:	61bb      	str	r3, [r7, #24]
 8005c1c:	e001      	b.n	8005c22 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff feff 	bl	8005a26 <USB_GetHostSpeed>
 8005c28:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005c2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d106      	bne.n	8005c40 <USB_HC_Init+0x1c8>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d003      	beq.n	8005c40 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005c38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	e001      	b.n	8005c44 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c44:	787b      	ldrb	r3, [r7, #1]
 8005c46:	059b      	lsls	r3, r3, #22
 8005c48:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c4c:	78bb      	ldrb	r3, [r7, #2]
 8005c4e:	02db      	lsls	r3, r3, #11
 8005c50:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c54:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c5a:	049b      	lsls	r3, r3, #18
 8005c5c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c60:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c62:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005c64:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c68:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c6e:	78fb      	ldrb	r3, [r7, #3]
 8005c70:	0159      	lsls	r1, r3, #5
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	440b      	add	r3, r1
 8005c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c7a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c80:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005c82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d003      	beq.n	8005c92 <USB_HC_Init+0x21a>
 8005c8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d10f      	bne.n	8005cb2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005c92:	78fb      	ldrb	r3, [r7, #3]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	78fa      	ldrb	r2, [r7, #3]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cb0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005cb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3720      	adds	r7, #32
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b08c      	sub	sp, #48	; 0x30
 8005cc0:	af02      	add	r7, sp, #8
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	785b      	ldrb	r3, [r3, #1]
 8005cd2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cd8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d02d      	beq.n	8005d42 <USB_HC_StartXfer+0x86>
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	791b      	ldrb	r3, [r3, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d129      	bne.n	8005d42 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005cee:	79fb      	ldrb	r3, [r7, #7]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d117      	bne.n	8005d24 <USB_HC_StartXfer+0x68>
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	79db      	ldrb	r3, [r3, #7]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <USB_HC_StartXfer+0x48>
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	79db      	ldrb	r3, [r3, #7]
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d10f      	bne.n	8005d24 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	69fa      	ldr	r2, [r7, #28]
 8005d14:	0151      	lsls	r1, r2, #5
 8005d16:	6a3a      	ldr	r2, [r7, #32]
 8005d18:	440a      	add	r2, r1
 8005d1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d22:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005d24:	79fb      	ldrb	r3, [r7, #7]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10b      	bne.n	8005d42 <USB_HC_StartXfer+0x86>
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	795b      	ldrb	r3, [r3, #5]
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d107      	bne.n	8005d42 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	785b      	ldrb	r3, [r3, #1]
 8005d36:	4619      	mov	r1, r3
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 fa0f 	bl	800615c <USB_DoPing>
      return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	e0f8      	b.n	8005f34 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d018      	beq.n	8005d7c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	8912      	ldrh	r2, [r2, #8]
 8005d52:	4413      	add	r3, r2
 8005d54:	3b01      	subs	r3, #1
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	8912      	ldrh	r2, [r2, #8]
 8005d5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d5e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005d60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005d62:	8b7b      	ldrh	r3, [r7, #26]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d90b      	bls.n	8005d80 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005d68:	8b7b      	ldrh	r3, [r7, #26]
 8005d6a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	8912      	ldrh	r2, [r2, #8]
 8005d72:	fb03 f202 	mul.w	r2, r3, r2
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	611a      	str	r2, [r3, #16]
 8005d7a:	e001      	b.n	8005d80 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	78db      	ldrb	r3, [r3, #3]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d007      	beq.n	8005d98 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	8912      	ldrh	r2, [r2, #8]
 8005d8e:	fb03 f202 	mul.w	r2, r3, r2
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	611a      	str	r2, [r3, #16]
 8005d96:	e003      	b.n	8005da0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	695a      	ldr	r2, [r3, #20]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005da8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005daa:	04d9      	lsls	r1, r3, #19
 8005dac:	4b63      	ldr	r3, [pc, #396]	; (8005f3c <USB_HC_StartXfer+0x280>)
 8005dae:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005db0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	7a9b      	ldrb	r3, [r3, #10]
 8005db6:	075b      	lsls	r3, r3, #29
 8005db8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005dbc:	69f9      	ldr	r1, [r7, #28]
 8005dbe:	0148      	lsls	r0, r1, #5
 8005dc0:	6a39      	ldr	r1, [r7, #32]
 8005dc2:	4401      	add	r1, r0
 8005dc4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005dc8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005dca:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005dcc:	79fb      	ldrb	r3, [r7, #7]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d009      	beq.n	8005de6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	68d9      	ldr	r1, [r3, #12]
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de2:	460a      	mov	r2, r1
 8005de4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	bf0c      	ite	eq
 8005df6:	2301      	moveq	r3, #1
 8005df8:	2300      	movne	r3, #0
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	0151      	lsls	r1, r2, #5
 8005e10:	6a3a      	ldr	r2, [r7, #32]
 8005e12:	440a      	add	r2, r1
 8005e14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e1c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	7e7b      	ldrb	r3, [r7, #25]
 8005e2e:	075b      	lsls	r3, r3, #29
 8005e30:	69f9      	ldr	r1, [r7, #28]
 8005e32:	0148      	lsls	r0, r1, #5
 8005e34:	6a39      	ldr	r1, [r7, #32]
 8005e36:	4401      	add	r1, r0
 8005e38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e56:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	78db      	ldrb	r3, [r3, #3]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d004      	beq.n	8005e6a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e66:	613b      	str	r3, [r7, #16]
 8005e68:	e003      	b.n	8005e72 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e70:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e78:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e86:	461a      	mov	r2, r3
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005e8c:	79fb      	ldrb	r3, [r7, #7]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	e04e      	b.n	8005f34 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	78db      	ldrb	r3, [r3, #3]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d149      	bne.n	8005f32 <USB_HC_StartXfer+0x276>
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d045      	beq.n	8005f32 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	79db      	ldrb	r3, [r3, #7]
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d830      	bhi.n	8005f10 <USB_HC_StartXfer+0x254>
 8005eae:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <USB_HC_StartXfer+0x1f8>)
 8005eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb4:	08005ec5 	.word	0x08005ec5
 8005eb8:	08005ee9 	.word	0x08005ee9
 8005ebc:	08005ec5 	.word	0x08005ec5
 8005ec0:	08005ee9 	.word	0x08005ee9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	3303      	adds	r3, #3
 8005eca:	089b      	lsrs	r3, r3, #2
 8005ecc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005ece:	8afa      	ldrh	r2, [r7, #22]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d91c      	bls.n	8005f14 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	f043 0220 	orr.w	r2, r3, #32
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	619a      	str	r2, [r3, #24]
        }
        break;
 8005ee6:	e015      	b.n	8005f14 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	3303      	adds	r3, #3
 8005eee:	089b      	lsrs	r3, r3, #2
 8005ef0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005ef2:	8afa      	ldrh	r2, [r7, #22]
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d90a      	bls.n	8005f18 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005f0e:	e003      	b.n	8005f18 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005f10:	bf00      	nop
 8005f12:	e002      	b.n	8005f1a <USB_HC_StartXfer+0x25e>
        break;
 8005f14:	bf00      	nop
 8005f16:	e000      	b.n	8005f1a <USB_HC_StartXfer+0x25e>
        break;
 8005f18:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	68d9      	ldr	r1, [r3, #12]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	785a      	ldrb	r2, [r3, #1]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	2000      	movs	r0, #0
 8005f2a:	9000      	str	r0, [sp, #0]
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f7ff fb31 	bl	8005594 <USB_WritePacket>
  }

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3728      	adds	r7, #40	; 0x28
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	1ff80000 	.word	0x1ff80000

08005f40 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	b29b      	uxth	r3, r3
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b089      	sub	sp, #36	; 0x24
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005f72:	78fb      	ldrb	r3, [r7, #3]
 8005f74:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	0c9b      	lsrs	r3, r3, #18
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	0fdb      	lsrs	r3, r3, #31
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f003 0320 	and.w	r3, r3, #32
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	d104      	bne.n	8005fbc <USB_HC_Halt+0x5a>
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	e0c8      	b.n	800614e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d002      	beq.n	8005fc8 <USB_HC_Halt+0x66>
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d163      	bne.n	8006090 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	69fa      	ldr	r2, [r7, #28]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fe2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fe6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f003 0320 	and.w	r3, r3, #32
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f040 80ab 	bne.w	800614c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d133      	bne.n	800606a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	4413      	add	r3, r2
 800600a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	0151      	lsls	r1, r2, #5
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	440a      	add	r2, r1
 8006018:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800601c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006020:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	4413      	add	r3, r2
 800602a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	0151      	lsls	r1, r2, #5
 8006034:	69fa      	ldr	r2, [r7, #28]
 8006036:	440a      	add	r2, r1
 8006038:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800603c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006040:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3301      	adds	r3, #1
 8006046:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800604e:	d81d      	bhi.n	800608c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	4413      	add	r3, r2
 8006058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006062:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006066:	d0ec      	beq.n	8006042 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006068:	e070      	b.n	800614c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	4413      	add	r3, r2
 8006072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	0151      	lsls	r1, r2, #5
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	440a      	add	r2, r1
 8006080:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006084:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006088:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800608a:	e05f      	b.n	800614c <USB_HC_Halt+0x1ea>
            break;
 800608c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800608e:	e05d      	b.n	800614c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	4413      	add	r3, r2
 8006098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	0151      	lsls	r1, r2, #5
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	440a      	add	r2, r1
 80060a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060ae:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d133      	bne.n	8006128 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	015a      	lsls	r2, r3, #5
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	4413      	add	r3, r2
 80060c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	0151      	lsls	r1, r2, #5
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	440a      	add	r2, r1
 80060d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	0151      	lsls	r1, r2, #5
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	440a      	add	r2, r1
 80060f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060fe:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3301      	adds	r3, #1
 8006104:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800610c:	d81d      	bhi.n	800614a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	4413      	add	r3, r2
 8006116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006124:	d0ec      	beq.n	8006100 <USB_HC_Halt+0x19e>
 8006126:	e011      	b.n	800614c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	4413      	add	r3, r2
 8006130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	0151      	lsls	r1, r2, #5
 800613a:	69fa      	ldr	r2, [r7, #28]
 800613c:	440a      	add	r2, r1
 800613e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006142:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	e000      	b.n	800614c <USB_HC_Halt+0x1ea>
          break;
 800614a:	bf00      	nop
    }
  }

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3724      	adds	r7, #36	; 0x24
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
	...

0800615c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006170:	2301      	movs	r3, #1
 8006172:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	04da      	lsls	r2, r3, #19
 8006178:	4b15      	ldr	r3, [pc, #84]	; (80061d0 <USB_DoPing+0x74>)
 800617a:	4013      	ands	r3, r2
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	0151      	lsls	r1, r2, #5
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	440a      	add	r2, r1
 8006184:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800618c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	4413      	add	r3, r2
 8006196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80061a4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061ac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ba:	461a      	mov	r2, r3
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	371c      	adds	r7, #28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	1ff80000 	.word	0x1ff80000

080061d4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b088      	sub	sp, #32
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80061dc:	2300      	movs	r3, #0
 80061de:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff f911 	bl	8005410 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061ee:	2110      	movs	r1, #16
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7ff f96b 	bl	80054cc <USB_FlushTxFifo>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f7ff f997 	bl	8005534 <USB_FlushRxFifo>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006210:	2300      	movs	r3, #0
 8006212:	61bb      	str	r3, [r7, #24]
 8006214:	e01f      	b.n	8006256 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	4413      	add	r3, r2
 800621e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800622c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006234:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800623c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	4413      	add	r3, r2
 8006246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800624a:	461a      	mov	r2, r3
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	3301      	adds	r3, #1
 8006254:	61bb      	str	r3, [r7, #24]
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	2b0f      	cmp	r3, #15
 800625a:	d9dc      	bls.n	8006216 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800625c:	2300      	movs	r3, #0
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	e034      	b.n	80062cc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	4413      	add	r3, r2
 800626a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006278:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006280:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006288:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	4413      	add	r3, r2
 8006292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006296:	461a      	mov	r2, r3
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3301      	adds	r3, #1
 80062a0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062a8:	d80c      	bhi.n	80062c4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062c0:	d0ec      	beq.n	800629c <USB_StopHost+0xc8>
 80062c2:	e000      	b.n	80062c6 <USB_StopHost+0xf2>
        break;
 80062c4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	3301      	adds	r3, #1
 80062ca:	61bb      	str	r3, [r7, #24]
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	2b0f      	cmp	r3, #15
 80062d0:	d9c7      	bls.n	8006262 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062d8:	461a      	mov	r2, r3
 80062da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062de:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062e6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7ff f880 	bl	80053ee <USB_EnableGlobalInt>

  return ret;
 80062ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3720      	adds	r7, #32
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80062f8:	b590      	push	{r4, r7, lr}
 80062fa:	b089      	sub	sp, #36	; 0x24
 80062fc:	af04      	add	r7, sp, #16
 80062fe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006300:	2301      	movs	r3, #1
 8006302:	2202      	movs	r2, #2
 8006304:	2102      	movs	r1, #2
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fc66 	bl	8006bd8 <USBH_FindInterface>
 800630c:	4603      	mov	r3, r0
 800630e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006310:	7bfb      	ldrb	r3, [r7, #15]
 8006312:	2bff      	cmp	r3, #255	; 0xff
 8006314:	d002      	beq.n	800631c <USBH_CDC_InterfaceInit+0x24>
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d901      	bls.n	8006320 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800631c:	2302      	movs	r3, #2
 800631e:	e13d      	b.n	800659c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	4619      	mov	r1, r3
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 fc3b 	bl	8006ba0 <USBH_SelectInterface>
 800632a:	4603      	mov	r3, r0
 800632c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800632e:	7bbb      	ldrb	r3, [r7, #14]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006334:	2302      	movs	r3, #2
 8006336:	e131      	b.n	800659c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800633e:	2050      	movs	r0, #80	; 0x50
 8006340:	f002 fad2 	bl	80088e8 <malloc>
 8006344:	4603      	mov	r3, r0
 8006346:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006358:	2302      	movs	r3, #2
 800635a:	e11f      	b.n	800659c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800635c:	2250      	movs	r2, #80	; 0x50
 800635e:	2100      	movs	r1, #0
 8006360:	68b8      	ldr	r0, [r7, #8]
 8006362:	f002 fb7d 	bl	8008a60 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	211a      	movs	r1, #26
 800636c:	fb01 f303 	mul.w	r3, r1, r3
 8006370:	4413      	add	r3, r2
 8006372:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	b25b      	sxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	da15      	bge.n	80063aa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800637e:	7bfb      	ldrb	r3, [r7, #15]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	211a      	movs	r1, #26
 8006384:	fb01 f303 	mul.w	r3, r1, r3
 8006388:	4413      	add	r3, r2
 800638a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800638e:	781a      	ldrb	r2, [r3, #0]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006394:	7bfb      	ldrb	r3, [r7, #15]
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	211a      	movs	r1, #26
 800639a:	fb01 f303 	mul.w	r3, r1, r3
 800639e:	4413      	add	r3, r2
 80063a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80063a4:	881a      	ldrh	r2, [r3, #0]
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	785b      	ldrb	r3, [r3, #1]
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f001 ff2e 	bl	8008212 <USBH_AllocPipe>
 80063b6:	4603      	mov	r3, r0
 80063b8:	461a      	mov	r2, r3
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	7819      	ldrb	r1, [r3, #0]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	7858      	ldrb	r0, [r3, #1]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	8952      	ldrh	r2, [r2, #10]
 80063d6:	9202      	str	r2, [sp, #8]
 80063d8:	2203      	movs	r2, #3
 80063da:	9201      	str	r2, [sp, #4]
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	4623      	mov	r3, r4
 80063e0:	4602      	mov	r2, r0
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f001 fee6 	bl	80081b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2200      	movs	r2, #0
 80063ee:	4619      	mov	r1, r3
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f002 f9f5 	bl	80087e0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80063f6:	2300      	movs	r3, #0
 80063f8:	2200      	movs	r2, #0
 80063fa:	210a      	movs	r1, #10
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 fbeb 	bl	8006bd8 <USBH_FindInterface>
 8006402:	4603      	mov	r3, r0
 8006404:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006406:	7bfb      	ldrb	r3, [r7, #15]
 8006408:	2bff      	cmp	r3, #255	; 0xff
 800640a:	d002      	beq.n	8006412 <USBH_CDC_InterfaceInit+0x11a>
 800640c:	7bfb      	ldrb	r3, [r7, #15]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d901      	bls.n	8006416 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006412:	2302      	movs	r3, #2
 8006414:	e0c2      	b.n	800659c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	211a      	movs	r1, #26
 800641c:	fb01 f303 	mul.w	r3, r1, r3
 8006420:	4413      	add	r3, r2
 8006422:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	b25b      	sxtb	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	da16      	bge.n	800645c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800642e:	7bfb      	ldrb	r3, [r7, #15]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	211a      	movs	r1, #26
 8006434:	fb01 f303 	mul.w	r3, r1, r3
 8006438:	4413      	add	r3, r2
 800643a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800643e:	781a      	ldrb	r2, [r3, #0]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	211a      	movs	r1, #26
 800644a:	fb01 f303 	mul.w	r3, r1, r3
 800644e:	4413      	add	r3, r2
 8006450:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006454:	881a      	ldrh	r2, [r3, #0]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	835a      	strh	r2, [r3, #26]
 800645a:	e015      	b.n	8006488 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	211a      	movs	r1, #26
 8006462:	fb01 f303 	mul.w	r3, r1, r3
 8006466:	4413      	add	r3, r2
 8006468:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800646c:	781a      	ldrb	r2, [r3, #0]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006472:	7bfb      	ldrb	r3, [r7, #15]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	211a      	movs	r1, #26
 8006478:	fb01 f303 	mul.w	r3, r1, r3
 800647c:	4413      	add	r3, r2
 800647e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006482:	881a      	ldrh	r2, [r3, #0]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006488:	7bfb      	ldrb	r3, [r7, #15]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	211a      	movs	r1, #26
 800648e:	fb01 f303 	mul.w	r3, r1, r3
 8006492:	4413      	add	r3, r2
 8006494:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	b25b      	sxtb	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	da16      	bge.n	80064ce <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	211a      	movs	r1, #26
 80064a6:	fb01 f303 	mul.w	r3, r1, r3
 80064aa:	4413      	add	r3, r2
 80064ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 80064b0:	781a      	ldrb	r2, [r3, #0]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80064b6:	7bfb      	ldrb	r3, [r7, #15]
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	211a      	movs	r1, #26
 80064bc:	fb01 f303 	mul.w	r3, r1, r3
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80064c6:	881a      	ldrh	r2, [r3, #0]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	835a      	strh	r2, [r3, #26]
 80064cc:	e015      	b.n	80064fa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	211a      	movs	r1, #26
 80064d4:	fb01 f303 	mul.w	r3, r1, r3
 80064d8:	4413      	add	r3, r2
 80064da:	f203 3356 	addw	r3, r3, #854	; 0x356
 80064de:	781a      	ldrb	r2, [r3, #0]
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	211a      	movs	r1, #26
 80064ea:	fb01 f303 	mul.w	r3, r1, r3
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80064f4:	881a      	ldrh	r2, [r3, #0]
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	7b9b      	ldrb	r3, [r3, #14]
 80064fe:	4619      	mov	r1, r3
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f001 fe86 	bl	8008212 <USBH_AllocPipe>
 8006506:	4603      	mov	r3, r0
 8006508:	461a      	mov	r2, r3
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	7bdb      	ldrb	r3, [r3, #15]
 8006512:	4619      	mov	r1, r3
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f001 fe7c 	bl	8008212 <USBH_AllocPipe>
 800651a:	4603      	mov	r3, r0
 800651c:	461a      	mov	r2, r3
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	7b59      	ldrb	r1, [r3, #13]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	7b98      	ldrb	r0, [r3, #14]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	8b12      	ldrh	r2, [r2, #24]
 800653a:	9202      	str	r2, [sp, #8]
 800653c:	2202      	movs	r2, #2
 800653e:	9201      	str	r2, [sp, #4]
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	4623      	mov	r3, r4
 8006544:	4602      	mov	r2, r0
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f001 fe34 	bl	80081b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	7b19      	ldrb	r1, [r3, #12]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	7bd8      	ldrb	r0, [r3, #15]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	8b52      	ldrh	r2, [r2, #26]
 8006564:	9202      	str	r2, [sp, #8]
 8006566:	2202      	movs	r2, #2
 8006568:	9201      	str	r2, [sp, #4]
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	4623      	mov	r3, r4
 800656e:	4602      	mov	r2, r0
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f001 fe1f 	bl	80081b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	7b5b      	ldrb	r3, [r3, #13]
 8006582:	2200      	movs	r2, #0
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f002 f92a 	bl	80087e0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	7b1b      	ldrb	r3, [r3, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	4619      	mov	r1, r3
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f002 f923 	bl	80087e0 <USBH_LL_SetToggle>

  return USBH_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd90      	pop	{r4, r7, pc}

080065a4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065b2:	69db      	ldr	r3, [r3, #28]
 80065b4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00e      	beq.n	80065dc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	4619      	mov	r1, r3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f001 fe14 	bl	80081f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f001 fe3f 	bl	8008254 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	7b1b      	ldrb	r3, [r3, #12]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00e      	beq.n	8006602 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	7b1b      	ldrb	r3, [r3, #12]
 80065e8:	4619      	mov	r1, r3
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f001 fe01 	bl	80081f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	7b1b      	ldrb	r3, [r3, #12]
 80065f4:	4619      	mov	r1, r3
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f001 fe2c 	bl	8008254 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	7b5b      	ldrb	r3, [r3, #13]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00e      	beq.n	8006628 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	7b5b      	ldrb	r3, [r3, #13]
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f001 fdee 	bl	80081f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	7b5b      	ldrb	r3, [r3, #13]
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f001 fe19 	bl	8008254 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00b      	beq.n	800664c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	4618      	mov	r0, r3
 800663e:	f002 f95b 	bl	80088f8 <free>
    phost->pActiveClass->pData = 0U;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006648:	2200      	movs	r2, #0
 800664a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b084      	sub	sp, #16
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	3340      	adds	r3, #64	; 0x40
 800666c:	4619      	mov	r1, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f8b1 	bl	80067d6 <GetLineCoding>
 8006674:	4603      	mov	r3, r0
 8006676:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006678:	7afb      	ldrb	r3, [r7, #11]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d105      	bne.n	800668a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006684:	2102      	movs	r1, #2
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800668a:	7afb      	ldrb	r3, [r7, #11]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800669c:	2301      	movs	r3, #1
 800669e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d877      	bhi.n	80067a8 <USBH_CDC_Process+0x114>
 80066b8:	a201      	add	r2, pc, #4	; (adr r2, 80066c0 <USBH_CDC_Process+0x2c>)
 80066ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066be:	bf00      	nop
 80066c0:	080066d5 	.word	0x080066d5
 80066c4:	080066db 	.word	0x080066db
 80066c8:	0800670b 	.word	0x0800670b
 80066cc:	0800677f 	.word	0x0800677f
 80066d0:	0800678d 	.word	0x0800678d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	73fb      	strb	r3, [r7, #15]
      break;
 80066d8:	e06d      	b.n	80067b6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f897 	bl	8006814 <SetLineCoding>
 80066e6:	4603      	mov	r3, r0
 80066e8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d104      	bne.n	80066fa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80066f8:	e058      	b.n	80067ac <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d055      	beq.n	80067ac <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2204      	movs	r2, #4
 8006704:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006708:	e050      	b.n	80067ac <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	3340      	adds	r3, #64	; 0x40
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f860 	bl	80067d6 <GetLineCoding>
 8006716:	4603      	mov	r3, r0
 8006718:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800671a:	7bbb      	ldrb	r3, [r7, #14]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d126      	bne.n	800676e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006732:	791b      	ldrb	r3, [r3, #4]
 8006734:	429a      	cmp	r2, r3
 8006736:	d13b      	bne.n	80067b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006742:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006744:	429a      	cmp	r2, r3
 8006746:	d133      	bne.n	80067b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006752:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006754:	429a      	cmp	r2, r3
 8006756:	d12b      	bne.n	80067b0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006760:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006762:	429a      	cmp	r2, r3
 8006764:	d124      	bne.n	80067b0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 f958 	bl	8006a1c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800676c:	e020      	b.n	80067b0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800676e:	7bbb      	ldrb	r3, [r7, #14]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d01d      	beq.n	80067b0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2204      	movs	r2, #4
 8006778:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800677c:	e018      	b.n	80067b0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f867 	bl	8006852 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f8da 	bl	800693e <CDC_ProcessReception>
      break;
 800678a:	e014      	b.n	80067b6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800678c:	2100      	movs	r1, #0
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 ffef 	bl	8007772 <USBH_ClrFeature>
 8006794:	4603      	mov	r3, r0
 8006796:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006798:	7bbb      	ldrb	r3, [r7, #14]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10a      	bne.n	80067b4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80067a6:	e005      	b.n	80067b4 <USBH_CDC_Process+0x120>

    default:
      break;
 80067a8:	bf00      	nop
 80067aa:	e004      	b.n	80067b6 <USBH_CDC_Process+0x122>
      break;
 80067ac:	bf00      	nop
 80067ae:	e002      	b.n	80067b6 <USBH_CDC_Process+0x122>
      break;
 80067b0:	bf00      	nop
 80067b2:	e000      	b.n	80067b6 <USBH_CDC_Process+0x122>
      break;
 80067b4:	bf00      	nop

  }

  return status;
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b082      	sub	sp, #8
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	22a1      	movs	r2, #161	; 0xa1
 80067e4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2221      	movs	r2, #33	; 0x21
 80067ea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2207      	movs	r2, #7
 80067fc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2207      	movs	r2, #7
 8006802:	4619      	mov	r1, r3
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f001 fa83 	bl	8007d10 <USBH_CtlReq>
 800680a:	4603      	mov	r3, r0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2221      	movs	r2, #33	; 0x21
 8006822:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2220      	movs	r2, #32
 8006828:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2207      	movs	r2, #7
 800683a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	2207      	movs	r2, #7
 8006840:	4619      	mov	r1, r3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f001 fa64 	bl	8007d10 <USBH_CtlReq>
 8006848:	4603      	mov	r3, r0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b086      	sub	sp, #24
 8006856:	af02      	add	r7, sp, #8
 8006858:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006864:	2300      	movs	r3, #0
 8006866:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800686e:	2b01      	cmp	r3, #1
 8006870:	d002      	beq.n	8006878 <CDC_ProcessTransmission+0x26>
 8006872:	2b02      	cmp	r3, #2
 8006874:	d023      	beq.n	80068be <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006876:	e05e      	b.n	8006936 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	8b12      	ldrh	r2, [r2, #24]
 8006880:	4293      	cmp	r3, r2
 8006882:	d90b      	bls.n	800689c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	69d9      	ldr	r1, [r3, #28]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8b1a      	ldrh	r2, [r3, #24]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	7b5b      	ldrb	r3, [r3, #13]
 8006890:	2001      	movs	r0, #1
 8006892:	9000      	str	r0, [sp, #0]
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f001 fc4a 	bl	800812e <USBH_BulkSendData>
 800689a:	e00b      	b.n	80068b4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	7b5b      	ldrb	r3, [r3, #13]
 80068aa:	2001      	movs	r0, #1
 80068ac:	9000      	str	r0, [sp, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f001 fc3d 	bl	800812e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2202      	movs	r2, #2
 80068b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80068bc:	e03b      	b.n	8006936 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	7b5b      	ldrb	r3, [r3, #13]
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 ff61 	bl	800878c <USBH_LL_GetURBState>
 80068ca:	4603      	mov	r3, r0
 80068cc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80068ce:	7afb      	ldrb	r3, [r7, #11]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d128      	bne.n	8006926 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	8b12      	ldrh	r2, [r2, #24]
 80068dc:	4293      	cmp	r3, r2
 80068de:	d90e      	bls.n	80068fe <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	8b12      	ldrh	r2, [r2, #24]
 80068e8:	1a9a      	subs	r2, r3, r2
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	8b12      	ldrh	r2, [r2, #24]
 80068f6:	441a      	add	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	61da      	str	r2, [r3, #28]
 80068fc:	e002      	b.n	8006904 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	2b00      	cmp	r3, #0
 800690a:	d004      	beq.n	8006916 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006914:	e00e      	b.n	8006934 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f868 	bl	80069f4 <USBH_CDC_TransmitCallback>
      break;
 8006924:	e006      	b.n	8006934 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006926:	7afb      	ldrb	r3, [r7, #11]
 8006928:	2b02      	cmp	r3, #2
 800692a:	d103      	bne.n	8006934 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006934:	bf00      	nop
  }
}
 8006936:	bf00      	nop
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b086      	sub	sp, #24
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006950:	2300      	movs	r3, #0
 8006952:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800695a:	2b03      	cmp	r3, #3
 800695c:	d002      	beq.n	8006964 <CDC_ProcessReception+0x26>
 800695e:	2b04      	cmp	r3, #4
 8006960:	d00e      	beq.n	8006980 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006962:	e043      	b.n	80069ec <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	6a19      	ldr	r1, [r3, #32]
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	8b5a      	ldrh	r2, [r3, #26]
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	7b1b      	ldrb	r3, [r3, #12]
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f001 fc01 	bl	8008178 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2204      	movs	r2, #4
 800697a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800697e:	e035      	b.n	80069ec <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	7b1b      	ldrb	r3, [r3, #12]
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f001 ff00 	bl	800878c <USBH_LL_GetURBState>
 800698c:	4603      	mov	r3, r0
 800698e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006990:	7cfb      	ldrb	r3, [r7, #19]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d129      	bne.n	80069ea <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	7b1b      	ldrb	r3, [r3, #12]
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f001 fe63 	bl	8008668 <USBH_LL_GetLastXferSize>
 80069a2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d016      	beq.n	80069dc <CDC_ProcessReception+0x9e>
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	8b5b      	ldrh	r3, [r3, #26]
 80069b2:	461a      	mov	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d910      	bls.n	80069dc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	1ad2      	subs	r2, r2, r3
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	6a1a      	ldr	r2, [r3, #32]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	441a      	add	r2, r3
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2203      	movs	r2, #3
 80069d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80069da:	e006      	b.n	80069ea <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f80f 	bl	8006a08 <USBH_CDC_ReceiveCallback>
      break;
 80069ea:	bf00      	nop
  }
}
 80069ec:	bf00      	nop
 80069ee:	3718      	adds	r7, #24
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006a44:	2302      	movs	r3, #2
 8006a46:	e029      	b.n	8006a9c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	79fa      	ldrb	r2, [r7, #7]
 8006a4c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 f81f 	bl	8006aa4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f001 fd33 	bl	8008500 <USBH_LL_Init>

  return USBH_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	e009      	b.n	8006aca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	33e0      	adds	r3, #224	; 0xe0
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2b0f      	cmp	r3, #15
 8006ace:	d9f2      	bls.n	8006ab6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	e009      	b.n	8006aea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006af0:	d3f1      	bcc.n	8006ad6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2240      	movs	r2, #64	; 0x40
 8006b16:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d016      	beq.n	8006b8e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10e      	bne.n	8006b88 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006b70:	1c59      	adds	r1, r3, #1
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	33de      	adds	r3, #222	; 0xde
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	73fb      	strb	r3, [r7, #15]
 8006b86:	e004      	b.n	8006b92 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006b88:	2302      	movs	r3, #2
 8006b8a:	73fb      	strb	r3, [r7, #15]
 8006b8c:	e001      	b.n	8006b92 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006b8e:	2302      	movs	r3, #2
 8006b90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006bb6:	78fa      	ldrb	r2, [r7, #3]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d204      	bcs.n	8006bc6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	78fa      	ldrb	r2, [r7, #3]
 8006bc0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006bc4:	e001      	b.n	8006bca <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	4608      	mov	r0, r1
 8006be2:	4611      	mov	r1, r2
 8006be4:	461a      	mov	r2, r3
 8006be6:	4603      	mov	r3, r0
 8006be8:	70fb      	strb	r3, [r7, #3]
 8006bea:	460b      	mov	r3, r1
 8006bec:	70bb      	strb	r3, [r7, #2]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006c00:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c02:	e025      	b.n	8006c50 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006c04:	7dfb      	ldrb	r3, [r7, #23]
 8006c06:	221a      	movs	r2, #26
 8006c08:	fb02 f303 	mul.w	r3, r2, r3
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	4413      	add	r3, r2
 8006c12:	3302      	adds	r3, #2
 8006c14:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	795b      	ldrb	r3, [r3, #5]
 8006c1a:	78fa      	ldrb	r2, [r7, #3]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d002      	beq.n	8006c26 <USBH_FindInterface+0x4e>
 8006c20:	78fb      	ldrb	r3, [r7, #3]
 8006c22:	2bff      	cmp	r3, #255	; 0xff
 8006c24:	d111      	bne.n	8006c4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c2a:	78ba      	ldrb	r2, [r7, #2]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d002      	beq.n	8006c36 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c30:	78bb      	ldrb	r3, [r7, #2]
 8006c32:	2bff      	cmp	r3, #255	; 0xff
 8006c34:	d109      	bne.n	8006c4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c3a:	787a      	ldrb	r2, [r7, #1]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d002      	beq.n	8006c46 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c40:	787b      	ldrb	r3, [r7, #1]
 8006c42:	2bff      	cmp	r3, #255	; 0xff
 8006c44:	d101      	bne.n	8006c4a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006c46:	7dfb      	ldrb	r3, [r7, #23]
 8006c48:	e006      	b.n	8006c58 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c50:	7dfb      	ldrb	r3, [r7, #23]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d9d6      	bls.n	8006c04 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006c56:	23ff      	movs	r3, #255	; 0xff
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	371c      	adds	r7, #28
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f001 fc83 	bl	8008578 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006c72:	2101      	movs	r1, #1
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 fd9c 	bl	80087b2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af04      	add	r7, sp, #16
 8006c8a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006c90:	2300      	movs	r3, #0
 8006c92:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d102      	bne.n	8006ca6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2203      	movs	r2, #3
 8006ca4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b0b      	cmp	r3, #11
 8006cae:	f200 81be 	bhi.w	800702e <USBH_Process+0x3aa>
 8006cb2:	a201      	add	r2, pc, #4	; (adr r2, 8006cb8 <USBH_Process+0x34>)
 8006cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb8:	08006ce9 	.word	0x08006ce9
 8006cbc:	08006d1b 	.word	0x08006d1b
 8006cc0:	08006d83 	.word	0x08006d83
 8006cc4:	08006fc9 	.word	0x08006fc9
 8006cc8:	0800702f 	.word	0x0800702f
 8006ccc:	08006e27 	.word	0x08006e27
 8006cd0:	08006f6f 	.word	0x08006f6f
 8006cd4:	08006e5d 	.word	0x08006e5d
 8006cd8:	08006e7d 	.word	0x08006e7d
 8006cdc:	08006e9d 	.word	0x08006e9d
 8006ce0:	08006ee1 	.word	0x08006ee1
 8006ce4:	08006fb1 	.word	0x08006fb1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 819e 	beq.w	8007032 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006cfc:	20c8      	movs	r0, #200	; 0xc8
 8006cfe:	f001 fd9f 	bl	8008840 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f001 fc95 	bl	8008632 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d18:	e18b      	b.n	8007032 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d107      	bne.n	8006d34 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2202      	movs	r2, #2
 8006d30:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d32:	e18d      	b.n	8007050 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006d3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d3e:	d914      	bls.n	8006d6a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006d46:	3301      	adds	r3, #1
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d903      	bls.n	8006d62 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	220d      	movs	r2, #13
 8006d5e:	701a      	strb	r2, [r3, #0]
      break;
 8006d60:	e176      	b.n	8007050 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	701a      	strb	r2, [r3, #0]
      break;
 8006d68:	e172      	b.n	8007050 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006d70:	f103 020a 	add.w	r2, r3, #10
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006d7a:	200a      	movs	r0, #10
 8006d7c:	f001 fd60 	bl	8008840 <USBH_Delay>
      break;
 8006d80:	e166      	b.n	8007050 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d005      	beq.n	8006d98 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d92:	2104      	movs	r1, #4
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006d98:	2064      	movs	r0, #100	; 0x64
 8006d9a:	f001 fd51 	bl	8008840 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f001 fc20 	bl	80085e4 <USBH_LL_GetSpeed>
 8006da4:	4603      	mov	r3, r0
 8006da6:	461a      	mov	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2205      	movs	r2, #5
 8006db2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006db4:	2100      	movs	r1, #0
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f001 fa2b 	bl	8008212 <USBH_AllocPipe>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006dc4:	2180      	movs	r1, #128	; 0x80
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f001 fa23 	bl	8008212 <USBH_AllocPipe>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	461a      	mov	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	7919      	ldrb	r1, [r3, #4]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006de8:	b292      	uxth	r2, r2
 8006dea:	9202      	str	r2, [sp, #8]
 8006dec:	2200      	movs	r2, #0
 8006dee:	9201      	str	r2, [sp, #4]
 8006df0:	9300      	str	r3, [sp, #0]
 8006df2:	4603      	mov	r3, r0
 8006df4:	2280      	movs	r2, #128	; 0x80
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f001 f9dc 	bl	80081b4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	7959      	ldrb	r1, [r3, #5]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e10:	b292      	uxth	r2, r2
 8006e12:	9202      	str	r2, [sp, #8]
 8006e14:	2200      	movs	r2, #0
 8006e16:	9201      	str	r2, [sp, #4]
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f001 f9c8 	bl	80081b4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e24:	e114      	b.n	8007050 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f918 	bl	800705c <USBH_HandleEnum>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006e30:	7bbb      	ldrb	r3, [r7, #14]
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f040 80fe 	bne.w	8007036 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d103      	bne.n	8006e54 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2208      	movs	r2, #8
 8006e50:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e52:	e0f0      	b.n	8007036 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2207      	movs	r2, #7
 8006e58:	701a      	strb	r2, [r3, #0]
      break;
 8006e5a:	e0ec      	b.n	8007036 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 80e9 	beq.w	800703a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e6e:	2101      	movs	r1, #1
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2208      	movs	r2, #8
 8006e78:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006e7a:	e0de      	b.n	800703a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fc2c 	bl	80076e4 <USBH_SetCfg>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f040 80d5 	bne.w	800703e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2209      	movs	r2, #9
 8006e98:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e9a:	e0d0      	b.n	800703e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006ea2:	f003 0320 	and.w	r3, r3, #32
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d016      	beq.n	8006ed8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006eaa:	2101      	movs	r1, #1
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fc3c 	bl	800772a <USBH_SetFeature>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006eb6:	7bbb      	ldrb	r3, [r7, #14]
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d103      	bne.n	8006ec6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	220a      	movs	r2, #10
 8006ec2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ec4:	e0bd      	b.n	8007042 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006ec6:	7bbb      	ldrb	r3, [r7, #14]
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	f040 80b9 	bne.w	8007042 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	220a      	movs	r2, #10
 8006ed4:	701a      	strb	r2, [r3, #0]
      break;
 8006ed6:	e0b4      	b.n	8007042 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	220a      	movs	r2, #10
 8006edc:	701a      	strb	r2, [r3, #0]
      break;
 8006ede:	e0b0      	b.n	8007042 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	f000 80ad 	beq.w	8007046 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	73fb      	strb	r3, [r7, #15]
 8006ef8:	e016      	b.n	8006f28 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006efa:	7bfa      	ldrb	r2, [r7, #15]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	32de      	adds	r2, #222	; 0xde
 8006f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f04:	791a      	ldrb	r2, [r3, #4]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d108      	bne.n	8006f22 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006f10:	7bfa      	ldrb	r2, [r7, #15]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	32de      	adds	r2, #222	; 0xde
 8006f16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006f20:	e005      	b.n	8006f2e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
 8006f24:	3301      	adds	r3, #1
 8006f26:	73fb      	strb	r3, [r7, #15]
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d0e5      	beq.n	8006efa <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d016      	beq.n	8006f66 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	4798      	blx	r3
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d109      	bne.n	8006f5e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2206      	movs	r2, #6
 8006f4e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f56:	2103      	movs	r1, #3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f5c:	e073      	b.n	8007046 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	220d      	movs	r2, #13
 8006f62:	701a      	strb	r2, [r3, #0]
      break;
 8006f64:	e06f      	b.n	8007046 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	220d      	movs	r2, #13
 8006f6a:	701a      	strb	r2, [r3, #0]
      break;
 8006f6c:	e06b      	b.n	8007046 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d017      	beq.n	8006fa8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	4798      	blx	r3
 8006f84:	4603      	mov	r3, r0
 8006f86:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006f88:	7bbb      	ldrb	r3, [r7, #14]
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d103      	bne.n	8006f98 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	220b      	movs	r2, #11
 8006f94:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f96:	e058      	b.n	800704a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006f98:	7bbb      	ldrb	r3, [r7, #14]
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d154      	bne.n	800704a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	220d      	movs	r2, #13
 8006fa4:	701a      	strb	r2, [r3, #0]
      break;
 8006fa6:	e050      	b.n	800704a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	220d      	movs	r2, #13
 8006fac:	701a      	strb	r2, [r3, #0]
      break;
 8006fae:	e04c      	b.n	800704a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d049      	beq.n	800704e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	4798      	blx	r3
      }
      break;
 8006fc6:	e042      	b.n	800704e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f7ff fd67 	bl	8006aa4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d009      	beq.n	8006ff4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d005      	beq.n	800700a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007004:	2105      	movs	r1, #5
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007010:	b2db      	uxtb	r3, r3
 8007012:	2b01      	cmp	r3, #1
 8007014:	d107      	bne.n	8007026 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff fe20 	bl	8006c64 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007024:	e014      	b.n	8007050 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f001 faa6 	bl	8008578 <USBH_LL_Start>
      break;
 800702c:	e010      	b.n	8007050 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800702e:	bf00      	nop
 8007030:	e00e      	b.n	8007050 <USBH_Process+0x3cc>
      break;
 8007032:	bf00      	nop
 8007034:	e00c      	b.n	8007050 <USBH_Process+0x3cc>
      break;
 8007036:	bf00      	nop
 8007038:	e00a      	b.n	8007050 <USBH_Process+0x3cc>
    break;
 800703a:	bf00      	nop
 800703c:	e008      	b.n	8007050 <USBH_Process+0x3cc>
      break;
 800703e:	bf00      	nop
 8007040:	e006      	b.n	8007050 <USBH_Process+0x3cc>
      break;
 8007042:	bf00      	nop
 8007044:	e004      	b.n	8007050 <USBH_Process+0x3cc>
      break;
 8007046:	bf00      	nop
 8007048:	e002      	b.n	8007050 <USBH_Process+0x3cc>
      break;
 800704a:	bf00      	nop
 800704c:	e000      	b.n	8007050 <USBH_Process+0x3cc>
      break;
 800704e:	bf00      	nop
  }
  return USBH_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop

0800705c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b088      	sub	sp, #32
 8007060:	af04      	add	r7, sp, #16
 8007062:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007064:	2301      	movs	r3, #1
 8007066:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007068:	2301      	movs	r3, #1
 800706a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	785b      	ldrb	r3, [r3, #1]
 8007070:	2b07      	cmp	r3, #7
 8007072:	f200 81c1 	bhi.w	80073f8 <USBH_HandleEnum+0x39c>
 8007076:	a201      	add	r2, pc, #4	; (adr r2, 800707c <USBH_HandleEnum+0x20>)
 8007078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707c:	0800709d 	.word	0x0800709d
 8007080:	0800715b 	.word	0x0800715b
 8007084:	080071c5 	.word	0x080071c5
 8007088:	08007253 	.word	0x08007253
 800708c:	080072bd 	.word	0x080072bd
 8007090:	0800732d 	.word	0x0800732d
 8007094:	08007373 	.word	0x08007373
 8007098:	080073b9 	.word	0x080073b9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800709c:	2108      	movs	r1, #8
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fa50 	bl	8007544 <USBH_Get_DevDesc>
 80070a4:	4603      	mov	r3, r0
 80070a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d130      	bne.n	8007110 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	7919      	ldrb	r1, [r3, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80070d2:	b292      	uxth	r2, r2
 80070d4:	9202      	str	r2, [sp, #8]
 80070d6:	2200      	movs	r2, #0
 80070d8:	9201      	str	r2, [sp, #4]
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	4603      	mov	r3, r0
 80070de:	2280      	movs	r2, #128	; 0x80
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f001 f867 	bl	80081b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	7959      	ldrb	r1, [r3, #5]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070fa:	b292      	uxth	r2, r2
 80070fc:	9202      	str	r2, [sp, #8]
 80070fe:	2200      	movs	r2, #0
 8007100:	9201      	str	r2, [sp, #4]
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	4603      	mov	r3, r0
 8007106:	2200      	movs	r2, #0
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f001 f853 	bl	80081b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800710e:	e175      	b.n	80073fc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	2b03      	cmp	r3, #3
 8007114:	f040 8172 	bne.w	80073fc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800711e:	3301      	adds	r3, #1
 8007120:	b2da      	uxtb	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800712e:	2b03      	cmp	r3, #3
 8007130:	d903      	bls.n	800713a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	220d      	movs	r2, #13
 8007136:	701a      	strb	r2, [r3, #0]
      break;
 8007138:	e160      	b.n	80073fc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	795b      	ldrb	r3, [r3, #5]
 800713e:	4619      	mov	r1, r3
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f001 f887 	bl	8008254 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	791b      	ldrb	r3, [r3, #4]
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f001 f881 	bl	8008254 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	701a      	strb	r2, [r3, #0]
      break;
 8007158:	e150      	b.n	80073fc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800715a:	2112      	movs	r1, #18
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f9f1 	bl	8007544 <USBH_Get_DevDesc>
 8007162:	4603      	mov	r3, r0
 8007164:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007166:	7bbb      	ldrb	r3, [r7, #14]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d103      	bne.n	8007174 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007172:	e145      	b.n	8007400 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007174:	7bbb      	ldrb	r3, [r7, #14]
 8007176:	2b03      	cmp	r3, #3
 8007178:	f040 8142 	bne.w	8007400 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007182:	3301      	adds	r3, #1
 8007184:	b2da      	uxtb	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007192:	2b03      	cmp	r3, #3
 8007194:	d903      	bls.n	800719e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	220d      	movs	r2, #13
 800719a:	701a      	strb	r2, [r3, #0]
      break;
 800719c:	e130      	b.n	8007400 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	795b      	ldrb	r3, [r3, #5]
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 f855 	bl	8008254 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	791b      	ldrb	r3, [r3, #4]
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f001 f84f 	bl	8008254 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	701a      	strb	r2, [r3, #0]
      break;
 80071c2:	e11d      	b.n	8007400 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80071c4:	2101      	movs	r1, #1
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fa68 	bl	800769c <USBH_SetAddress>
 80071cc:	4603      	mov	r3, r0
 80071ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071d0:	7bbb      	ldrb	r3, [r7, #14]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d132      	bne.n	800723c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80071d6:	2002      	movs	r0, #2
 80071d8:	f001 fb32 	bl	8008840 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2203      	movs	r2, #3
 80071e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	7919      	ldrb	r1, [r3, #4]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80071fe:	b292      	uxth	r2, r2
 8007200:	9202      	str	r2, [sp, #8]
 8007202:	2200      	movs	r2, #0
 8007204:	9201      	str	r2, [sp, #4]
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	4603      	mov	r3, r0
 800720a:	2280      	movs	r2, #128	; 0x80
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 ffd1 	bl	80081b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	7959      	ldrb	r1, [r3, #5]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007226:	b292      	uxth	r2, r2
 8007228:	9202      	str	r2, [sp, #8]
 800722a:	2200      	movs	r2, #0
 800722c:	9201      	str	r2, [sp, #4]
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	4603      	mov	r3, r0
 8007232:	2200      	movs	r2, #0
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 ffbd 	bl	80081b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800723a:	e0e3      	b.n	8007404 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800723c:	7bbb      	ldrb	r3, [r7, #14]
 800723e:	2b03      	cmp	r3, #3
 8007240:	f040 80e0 	bne.w	8007404 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	220d      	movs	r2, #13
 8007248:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	705a      	strb	r2, [r3, #1]
      break;
 8007250:	e0d8      	b.n	8007404 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007252:	2109      	movs	r1, #9
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f99d 	bl	8007594 <USBH_Get_CfgDesc>
 800725a:	4603      	mov	r3, r0
 800725c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800725e:	7bbb      	ldrb	r3, [r7, #14]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d103      	bne.n	800726c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2204      	movs	r2, #4
 8007268:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800726a:	e0cd      	b.n	8007408 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800726c:	7bbb      	ldrb	r3, [r7, #14]
 800726e:	2b03      	cmp	r3, #3
 8007270:	f040 80ca 	bne.w	8007408 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800727a:	3301      	adds	r3, #1
 800727c:	b2da      	uxtb	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800728a:	2b03      	cmp	r3, #3
 800728c:	d903      	bls.n	8007296 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	220d      	movs	r2, #13
 8007292:	701a      	strb	r2, [r3, #0]
      break;
 8007294:	e0b8      	b.n	8007408 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	795b      	ldrb	r3, [r3, #5]
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 ffd9 	bl	8008254 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	791b      	ldrb	r3, [r3, #4]
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 ffd3 	bl	8008254 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	701a      	strb	r2, [r3, #0]
      break;
 80072ba:	e0a5      	b.n	8007408 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80072c2:	4619      	mov	r1, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f965 	bl	8007594 <USBH_Get_CfgDesc>
 80072ca:	4603      	mov	r3, r0
 80072cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072ce:	7bbb      	ldrb	r3, [r7, #14]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d103      	bne.n	80072dc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2205      	movs	r2, #5
 80072d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80072da:	e097      	b.n	800740c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072dc:	7bbb      	ldrb	r3, [r7, #14]
 80072de:	2b03      	cmp	r3, #3
 80072e0:	f040 8094 	bne.w	800740c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072ea:	3301      	adds	r3, #1
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072fa:	2b03      	cmp	r3, #3
 80072fc:	d903      	bls.n	8007306 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	220d      	movs	r2, #13
 8007302:	701a      	strb	r2, [r3, #0]
      break;
 8007304:	e082      	b.n	800740c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	795b      	ldrb	r3, [r3, #5]
 800730a:	4619      	mov	r1, r3
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 ffa1 	bl	8008254 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	791b      	ldrb	r3, [r3, #4]
 8007316:	4619      	mov	r1, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 ff9b 	bl	8008254 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	701a      	strb	r2, [r3, #0]
      break;
 800732a:	e06f      	b.n	800740c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007332:	2b00      	cmp	r3, #0
 8007334:	d019      	beq.n	800736a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007342:	23ff      	movs	r3, #255	; 0xff
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f949 	bl	80075dc <USBH_Get_StringDesc>
 800734a:	4603      	mov	r3, r0
 800734c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800734e:	7bbb      	ldrb	r3, [r7, #14]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d103      	bne.n	800735c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2206      	movs	r2, #6
 8007358:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800735a:	e059      	b.n	8007410 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800735c:	7bbb      	ldrb	r3, [r7, #14]
 800735e:	2b03      	cmp	r3, #3
 8007360:	d156      	bne.n	8007410 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2206      	movs	r2, #6
 8007366:	705a      	strb	r2, [r3, #1]
      break;
 8007368:	e052      	b.n	8007410 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2206      	movs	r2, #6
 800736e:	705a      	strb	r2, [r3, #1]
      break;
 8007370:	e04e      	b.n	8007410 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007378:	2b00      	cmp	r3, #0
 800737a:	d019      	beq.n	80073b0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007388:	23ff      	movs	r3, #255	; 0xff
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f926 	bl	80075dc <USBH_Get_StringDesc>
 8007390:	4603      	mov	r3, r0
 8007392:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007394:	7bbb      	ldrb	r3, [r7, #14]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d103      	bne.n	80073a2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2207      	movs	r2, #7
 800739e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80073a0:	e038      	b.n	8007414 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d135      	bne.n	8007414 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2207      	movs	r2, #7
 80073ac:	705a      	strb	r2, [r3, #1]
      break;
 80073ae:	e031      	b.n	8007414 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2207      	movs	r2, #7
 80073b4:	705a      	strb	r2, [r3, #1]
      break;
 80073b6:	e02d      	b.n	8007414 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d017      	beq.n	80073f2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80073ce:	23ff      	movs	r3, #255	; 0xff
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f903 	bl	80075dc <USBH_Get_StringDesc>
 80073d6:	4603      	mov	r3, r0
 80073d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073da:	7bbb      	ldrb	r3, [r7, #14]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80073e4:	e018      	b.n	8007418 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073e6:	7bbb      	ldrb	r3, [r7, #14]
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d115      	bne.n	8007418 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80073ec:	2300      	movs	r3, #0
 80073ee:	73fb      	strb	r3, [r7, #15]
      break;
 80073f0:	e012      	b.n	8007418 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80073f2:	2300      	movs	r3, #0
 80073f4:	73fb      	strb	r3, [r7, #15]
      break;
 80073f6:	e00f      	b.n	8007418 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80073f8:	bf00      	nop
 80073fa:	e00e      	b.n	800741a <USBH_HandleEnum+0x3be>
      break;
 80073fc:	bf00      	nop
 80073fe:	e00c      	b.n	800741a <USBH_HandleEnum+0x3be>
      break;
 8007400:	bf00      	nop
 8007402:	e00a      	b.n	800741a <USBH_HandleEnum+0x3be>
      break;
 8007404:	bf00      	nop
 8007406:	e008      	b.n	800741a <USBH_HandleEnum+0x3be>
      break;
 8007408:	bf00      	nop
 800740a:	e006      	b.n	800741a <USBH_HandleEnum+0x3be>
      break;
 800740c:	bf00      	nop
 800740e:	e004      	b.n	800741a <USBH_HandleEnum+0x3be>
      break;
 8007410:	bf00      	nop
 8007412:	e002      	b.n	800741a <USBH_HandleEnum+0x3be>
      break;
 8007414:	bf00      	nop
 8007416:	e000      	b.n	800741a <USBH_HandleEnum+0x3be>
      break;
 8007418:	bf00      	nop
  }
  return Status;
 800741a:	7bfb      	ldrb	r3, [r7, #15]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	683a      	ldr	r2, [r7, #0]
 8007432:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b082      	sub	sp, #8
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 f804 	bl	8007466 <USBH_HandleSof>
}
 800745e:	bf00      	nop
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}

08007466 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b082      	sub	sp, #8
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b0b      	cmp	r3, #11
 8007476:	d10a      	bne.n	800748e <USBH_HandleSof+0x28>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800747e:	2b00      	cmp	r3, #0
 8007480:	d005      	beq.n	800748e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	4798      	blx	r3
  }
}
 800748e:	bf00      	nop
 8007490:	3708      	adds	r7, #8
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80074a6:	bf00      	nop
}
 80074a8:	370c      	adds	r7, #12
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b083      	sub	sp, #12
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80074c2:	bf00      	nop
}
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b083      	sub	sp, #12
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f001 f846 	bl	80085ae <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	791b      	ldrb	r3, [r3, #4]
 8007526:	4619      	mov	r1, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fe93 	bl	8008254 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	795b      	ldrb	r3, [r3, #5]
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fe8d 	bl	8008254 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af02      	add	r7, sp, #8
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	460b      	mov	r3, r1
 800754e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007556:	78fb      	ldrb	r3, [r7, #3]
 8007558:	b29b      	uxth	r3, r3
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	4613      	mov	r3, r2
 800755e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007562:	2100      	movs	r1, #0
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f864 	bl	8007632 <USBH_GetDescriptor>
 800756a:	4603      	mov	r3, r0
 800756c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d10a      	bne.n	800758a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f203 3026 	addw	r0, r3, #806	; 0x326
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007580:	78fa      	ldrb	r2, [r7, #3]
 8007582:	b292      	uxth	r2, r2
 8007584:	4619      	mov	r1, r3
 8007586:	f000 f919 	bl	80077bc <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800758a:	7bfb      	ldrb	r3, [r7, #15]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af02      	add	r7, sp, #8
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	331c      	adds	r3, #28
 80075a4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80075a6:	887b      	ldrh	r3, [r7, #2]
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075b0:	2100      	movs	r1, #0
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f83d 	bl	8007632 <USBH_GetDescriptor>
 80075b8:	4603      	mov	r3, r0
 80075ba:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d107      	bne.n	80075d2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80075c2:	887b      	ldrh	r3, [r7, #2]
 80075c4:	461a      	mov	r2, r3
 80075c6:	68b9      	ldr	r1, [r7, #8]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f989 	bl	80078e0 <USBH_ParseCfgDesc>
 80075ce:	4603      	mov	r3, r0
 80075d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b088      	sub	sp, #32
 80075e0:	af02      	add	r7, sp, #8
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	607a      	str	r2, [r7, #4]
 80075e6:	461a      	mov	r2, r3
 80075e8:	460b      	mov	r3, r1
 80075ea:	72fb      	strb	r3, [r7, #11]
 80075ec:	4613      	mov	r3, r2
 80075ee:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80075f0:	7afb      	ldrb	r3, [r7, #11]
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80075f8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007600:	893b      	ldrh	r3, [r7, #8]
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	460b      	mov	r3, r1
 8007606:	2100      	movs	r1, #0
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 f812 	bl	8007632 <USBH_GetDescriptor>
 800760e:	4603      	mov	r3, r0
 8007610:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007612:	7dfb      	ldrb	r3, [r7, #23]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d107      	bne.n	8007628 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800761e:	893a      	ldrh	r2, [r7, #8]
 8007620:	6879      	ldr	r1, [r7, #4]
 8007622:	4618      	mov	r0, r3
 8007624:	f000 fb26 	bl	8007c74 <USBH_ParseStringDesc>
  }

  return status;
 8007628:	7dfb      	ldrb	r3, [r7, #23]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3718      	adds	r7, #24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	60f8      	str	r0, [r7, #12]
 800763a:	607b      	str	r3, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	72fb      	strb	r3, [r7, #11]
 8007640:	4613      	mov	r3, r2
 8007642:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	789b      	ldrb	r3, [r3, #2]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d11c      	bne.n	8007686 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800764c:	7afb      	ldrb	r3, [r7, #11]
 800764e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007652:	b2da      	uxtb	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2206      	movs	r2, #6
 800765c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	893a      	ldrh	r2, [r7, #8]
 8007662:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007664:	893b      	ldrh	r3, [r7, #8]
 8007666:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800766a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800766e:	d104      	bne.n	800767a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f240 4209 	movw	r2, #1033	; 0x409
 8007676:	829a      	strh	r2, [r3, #20]
 8007678:	e002      	b.n	8007680 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8b3a      	ldrh	r2, [r7, #24]
 8007684:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007686:	8b3b      	ldrh	r3, [r7, #24]
 8007688:	461a      	mov	r2, r3
 800768a:	6879      	ldr	r1, [r7, #4]
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fb3f 	bl	8007d10 <USBH_CtlReq>
 8007692:	4603      	mov	r3, r0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	789b      	ldrb	r3, [r3, #2]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d10f      	bne.n	80076d0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2205      	movs	r2, #5
 80076ba:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80076bc:	78fb      	ldrb	r3, [r7, #3]
 80076be:	b29a      	uxth	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076d0:	2200      	movs	r2, #0
 80076d2:	2100      	movs	r1, #0
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fb1b 	bl	8007d10 <USBH_CtlReq>
 80076da:	4603      	mov	r3, r0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	789b      	ldrb	r3, [r3, #2]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d10e      	bne.n	8007716 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2209      	movs	r2, #9
 8007702:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	887a      	ldrh	r2, [r7, #2]
 8007708:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007716:	2200      	movs	r2, #0
 8007718:	2100      	movs	r1, #0
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 faf8 	bl	8007d10 <USBH_CtlReq>
 8007720:	4603      	mov	r3, r0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b082      	sub	sp, #8
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	460b      	mov	r3, r1
 8007734:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	789b      	ldrb	r3, [r3, #2]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d10f      	bne.n	800775e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2203      	movs	r2, #3
 8007748:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800774a:	78fb      	ldrb	r3, [r7, #3]
 800774c:	b29a      	uxth	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800775e:	2200      	movs	r2, #0
 8007760:	2100      	movs	r1, #0
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fad4 	bl	8007d10 <USBH_CtlReq>
 8007768:	4603      	mov	r3, r0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b082      	sub	sp, #8
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	460b      	mov	r3, r1
 800777c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	789b      	ldrb	r3, [r3, #2]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d10f      	bne.n	80077a6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2202      	movs	r2, #2
 800778a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007798:	78fb      	ldrb	r3, [r7, #3]
 800779a:	b29a      	uxth	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80077a6:	2200      	movs	r2, #0
 80077a8:	2100      	movs	r1, #0
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fab0 	bl	8007d10 <USBH_CtlReq>
 80077b0:	4603      	mov	r3, r0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	4613      	mov	r3, r2
 80077c8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	781a      	ldrb	r2, [r3, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	785a      	ldrb	r2, [r3, #1]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	3302      	adds	r3, #2
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	3303      	adds	r3, #3
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	021b      	lsls	r3, r3, #8
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	4313      	orrs	r3, r2
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	791a      	ldrb	r2, [r3, #4]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	795a      	ldrb	r2, [r3, #5]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	799a      	ldrb	r2, [r3, #6]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	79da      	ldrb	r2, [r3, #7]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	79db      	ldrb	r3, [r3, #7]
 800781a:	2b20      	cmp	r3, #32
 800781c:	dc0f      	bgt.n	800783e <USBH_ParseDevDesc+0x82>
 800781e:	2b08      	cmp	r3, #8
 8007820:	db14      	blt.n	800784c <USBH_ParseDevDesc+0x90>
 8007822:	3b08      	subs	r3, #8
 8007824:	4a2d      	ldr	r2, [pc, #180]	; (80078dc <USBH_ParseDevDesc+0x120>)
 8007826:	fa22 f303 	lsr.w	r3, r2, r3
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b00      	cmp	r3, #0
 8007830:	bf14      	ite	ne
 8007832:	2301      	movne	r3, #1
 8007834:	2300      	moveq	r3, #0
 8007836:	b2db      	uxtb	r3, r3
 8007838:	2b00      	cmp	r3, #0
 800783a:	d102      	bne.n	8007842 <USBH_ParseDevDesc+0x86>
 800783c:	e006      	b.n	800784c <USBH_ParseDevDesc+0x90>
 800783e:	2b40      	cmp	r3, #64	; 0x40
 8007840:	d104      	bne.n	800784c <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	79da      	ldrb	r2, [r3, #7]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	71da      	strb	r2, [r3, #7]
      break;
 800784a:	e003      	b.n	8007854 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2240      	movs	r2, #64	; 0x40
 8007850:	71da      	strb	r2, [r3, #7]
      break;
 8007852:	bf00      	nop
  }

  if (length > 8U)
 8007854:	88fb      	ldrh	r3, [r7, #6]
 8007856:	2b08      	cmp	r3, #8
 8007858:	d939      	bls.n	80078ce <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	3308      	adds	r3, #8
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	b29a      	uxth	r2, r3
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	3309      	adds	r3, #9
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	b29b      	uxth	r3, r3
 800786a:	021b      	lsls	r3, r3, #8
 800786c:	b29b      	uxth	r3, r3
 800786e:	4313      	orrs	r3, r2
 8007870:	b29a      	uxth	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	330a      	adds	r3, #10
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	b29a      	uxth	r2, r3
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	330b      	adds	r3, #11
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	b29b      	uxth	r3, r3
 8007886:	021b      	lsls	r3, r3, #8
 8007888:	b29b      	uxth	r3, r3
 800788a:	4313      	orrs	r3, r2
 800788c:	b29a      	uxth	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	330c      	adds	r3, #12
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	b29a      	uxth	r2, r3
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	330d      	adds	r3, #13
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	021b      	lsls	r3, r3, #8
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	4313      	orrs	r3, r2
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	7b9a      	ldrb	r2, [r3, #14]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	7bda      	ldrb	r2, [r3, #15]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	7c1a      	ldrb	r2, [r3, #16]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	7c5a      	ldrb	r2, [r3, #17]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	745a      	strb	r2, [r3, #17]
  }
}
 80078ce:	bf00      	nop
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	01000101 	.word	0x01000101

080078e0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08c      	sub	sp, #48	; 0x30
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	4613      	mov	r3, r2
 80078ec:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80078f4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007906:	2300      	movs	r3, #0
 8007908:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	781a      	ldrb	r2, [r3, #0]
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	785a      	ldrb	r2, [r3, #1]
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	3302      	adds	r3, #2
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	b29a      	uxth	r2, r3
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	3303      	adds	r3, #3
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	b29b      	uxth	r3, r3
 8007930:	021b      	lsls	r3, r3, #8
 8007932:	b29b      	uxth	r3, r3
 8007934:	4313      	orrs	r3, r2
 8007936:	b29b      	uxth	r3, r3
 8007938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800793c:	bf28      	it	cs
 800793e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007942:	b29a      	uxth	r2, r3
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	791a      	ldrb	r2, [r3, #4]
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	795a      	ldrb	r2, [r3, #5]
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	799a      	ldrb	r2, [r3, #6]
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	79da      	ldrb	r2, [r3, #7]
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	7a1a      	ldrb	r2, [r3, #8]
 800796c:	6a3b      	ldr	r3, [r7, #32]
 800796e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b09      	cmp	r3, #9
 8007976:	d002      	beq.n	800797e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007978:	6a3b      	ldr	r3, [r7, #32]
 800797a:	2209      	movs	r2, #9
 800797c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800797e:	88fb      	ldrh	r3, [r7, #6]
 8007980:	2b09      	cmp	r3, #9
 8007982:	f240 809d 	bls.w	8007ac0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007986:	2309      	movs	r3, #9
 8007988:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800798a:	2300      	movs	r3, #0
 800798c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800798e:	e081      	b.n	8007a94 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007990:	f107 0316 	add.w	r3, r7, #22
 8007994:	4619      	mov	r1, r3
 8007996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007998:	f000 f99f 	bl	8007cda <USBH_GetNextDesc>
 800799c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a0:	785b      	ldrb	r3, [r3, #1]
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	d176      	bne.n	8007a94 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80079a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	2b09      	cmp	r3, #9
 80079ac:	d002      	beq.n	80079b4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80079ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b0:	2209      	movs	r2, #9
 80079b2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80079b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079b8:	221a      	movs	r2, #26
 80079ba:	fb02 f303 	mul.w	r3, r2, r3
 80079be:	3308      	adds	r3, #8
 80079c0:	6a3a      	ldr	r2, [r7, #32]
 80079c2:	4413      	add	r3, r2
 80079c4:	3302      	adds	r3, #2
 80079c6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80079c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079ca:	69f8      	ldr	r0, [r7, #28]
 80079cc:	f000 f87e 	bl	8007acc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80079d0:	2300      	movs	r3, #0
 80079d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80079d6:	2300      	movs	r3, #0
 80079d8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079da:	e043      	b.n	8007a64 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80079dc:	f107 0316 	add.w	r3, r7, #22
 80079e0:	4619      	mov	r1, r3
 80079e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079e4:	f000 f979 	bl	8007cda <USBH_GetNextDesc>
 80079e8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80079ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ec:	785b      	ldrb	r3, [r3, #1]
 80079ee:	2b05      	cmp	r3, #5
 80079f0:	d138      	bne.n	8007a64 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	795b      	ldrb	r3, [r3, #5]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d10f      	bne.n	8007a1a <USBH_ParseCfgDesc+0x13a>
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	799b      	ldrb	r3, [r3, #6]
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d10b      	bne.n	8007a1a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	79db      	ldrb	r3, [r3, #7]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d10f      	bne.n	8007a2a <USBH_ParseCfgDesc+0x14a>
 8007a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	2b09      	cmp	r3, #9
 8007a10:	d00b      	beq.n	8007a2a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a14:	2209      	movs	r2, #9
 8007a16:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a18:	e007      	b.n	8007a2a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	2b07      	cmp	r3, #7
 8007a20:	d004      	beq.n	8007a2c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a24:	2207      	movs	r2, #7
 8007a26:	701a      	strb	r2, [r3, #0]
 8007a28:	e000      	b.n	8007a2c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a2a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a30:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007a34:	3201      	adds	r2, #1
 8007a36:	00d2      	lsls	r2, r2, #3
 8007a38:	211a      	movs	r1, #26
 8007a3a:	fb01 f303 	mul.w	r3, r1, r3
 8007a3e:	4413      	add	r3, r2
 8007a40:	3308      	adds	r3, #8
 8007a42:	6a3a      	ldr	r2, [r7, #32]
 8007a44:	4413      	add	r3, r2
 8007a46:	3304      	adds	r3, #4
 8007a48:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a4c:	69b9      	ldr	r1, [r7, #24]
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f000 f86b 	bl	8007b2a <USBH_ParseEPDesc>
 8007a54:	4603      	mov	r3, r0
 8007a56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007a5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a5e:	3301      	adds	r3, #1
 8007a60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	791b      	ldrb	r3, [r3, #4]
 8007a68:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d204      	bcs.n	8007a7a <USBH_ParseCfgDesc+0x19a>
 8007a70:	6a3b      	ldr	r3, [r7, #32]
 8007a72:	885a      	ldrh	r2, [r3, #2]
 8007a74:	8afb      	ldrh	r3, [r7, #22]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d8b0      	bhi.n	80079dc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	791b      	ldrb	r3, [r3, #4]
 8007a7e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d201      	bcs.n	8007a8a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007a86:	2303      	movs	r3, #3
 8007a88:	e01c      	b.n	8007ac4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007a8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a8e:	3301      	adds	r3, #1
 8007a90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d805      	bhi.n	8007aa8 <USBH_ParseCfgDesc+0x1c8>
 8007a9c:	6a3b      	ldr	r3, [r7, #32]
 8007a9e:	885a      	ldrh	r2, [r3, #2]
 8007aa0:	8afb      	ldrh	r3, [r7, #22]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	f63f af74 	bhi.w	8007990 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	791b      	ldrb	r3, [r3, #4]
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	bf28      	it	cs
 8007ab0:	2302      	movcs	r3, #2
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d201      	bcs.n	8007ac0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e001      	b.n	8007ac4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007ac0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3730      	adds	r7, #48	; 0x30
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	781a      	ldrb	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	785a      	ldrb	r2, [r3, #1]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	789a      	ldrb	r2, [r3, #2]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	78da      	ldrb	r2, [r3, #3]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	791a      	ldrb	r2, [r3, #4]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	795a      	ldrb	r2, [r3, #5]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	799a      	ldrb	r2, [r3, #6]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	79da      	ldrb	r2, [r3, #7]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	7a1a      	ldrb	r2, [r3, #8]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	721a      	strb	r2, [r3, #8]
}
 8007b1e:	bf00      	nop
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b087      	sub	sp, #28
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	60f8      	str	r0, [r7, #12]
 8007b32:	60b9      	str	r1, [r7, #8]
 8007b34:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	781a      	ldrb	r2, [r3, #0]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	785a      	ldrb	r2, [r3, #1]
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	789a      	ldrb	r2, [r3, #2]
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	78da      	ldrb	r2, [r3, #3]
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	3305      	adds	r3, #5
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	021b      	lsls	r3, r3, #8
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	799a      	ldrb	r2, [r3, #6]
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	889b      	ldrh	r3, [r3, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d102      	bne.n	8007b8c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007b86:	2303      	movs	r3, #3
 8007b88:	75fb      	strb	r3, [r7, #23]
 8007b8a:	e033      	b.n	8007bf4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	889b      	ldrh	r3, [r3, #4]
 8007b90:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007b94:	f023 0307 	bic.w	r3, r3, #7
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	889b      	ldrh	r3, [r3, #4]
 8007ba2:	b21a      	sxth	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	b299      	uxth	r1, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	3305      	adds	r3, #5
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	021b      	lsls	r3, r3, #8
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	430b      	orrs	r3, r1
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d110      	bne.n	8007be6 <USBH_ParseEPDesc+0xbc>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	b299      	uxth	r1, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3305      	adds	r3, #5
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	021b      	lsls	r3, r3, #8
 8007bd6:	b29b      	uxth	r3, r3
 8007bd8:	430b      	orrs	r3, r1
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	b21b      	sxth	r3, r3
 8007bde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007be2:	b21b      	sxth	r3, r3
 8007be4:	e001      	b.n	8007bea <USBH_ParseEPDesc+0xc0>
 8007be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bea:	4313      	orrs	r3, r2
 8007bec:	b21b      	sxth	r3, r3
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d116      	bne.n	8007c2c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	78db      	ldrb	r3, [r3, #3]
 8007c02:	f003 0303 	and.w	r3, r3, #3
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d005      	beq.n	8007c16 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	78db      	ldrb	r3, [r3, #3]
 8007c0e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007c12:	2b03      	cmp	r3, #3
 8007c14:	d127      	bne.n	8007c66 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	799b      	ldrb	r3, [r3, #6]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d003      	beq.n	8007c26 <USBH_ParseEPDesc+0xfc>
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	799b      	ldrb	r3, [r3, #6]
 8007c22:	2b10      	cmp	r3, #16
 8007c24:	d91f      	bls.n	8007c66 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007c26:	2303      	movs	r3, #3
 8007c28:	75fb      	strb	r3, [r7, #23]
 8007c2a:	e01c      	b.n	8007c66 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	78db      	ldrb	r3, [r3, #3]
 8007c30:	f003 0303 	and.w	r3, r3, #3
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d10a      	bne.n	8007c4e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	799b      	ldrb	r3, [r3, #6]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d003      	beq.n	8007c48 <USBH_ParseEPDesc+0x11e>
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	799b      	ldrb	r3, [r3, #6]
 8007c44:	2b10      	cmp	r3, #16
 8007c46:	d90e      	bls.n	8007c66 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	75fb      	strb	r3, [r7, #23]
 8007c4c:	e00b      	b.n	8007c66 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	78db      	ldrb	r3, [r3, #3]
 8007c52:	f003 0303 	and.w	r3, r3, #3
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	d105      	bne.n	8007c66 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	799b      	ldrb	r3, [r3, #6]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007c62:	2303      	movs	r3, #3
 8007c64:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	371c      	adds	r7, #28
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b087      	sub	sp, #28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3301      	adds	r3, #1
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d120      	bne.n	8007cce <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	1e9a      	subs	r2, r3, #2
 8007c92:	88fb      	ldrh	r3, [r7, #6]
 8007c94:	4293      	cmp	r3, r2
 8007c96:	bf28      	it	cs
 8007c98:	4613      	movcs	r3, r2
 8007c9a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	3302      	adds	r3, #2
 8007ca0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	82fb      	strh	r3, [r7, #22]
 8007ca6:	e00b      	b.n	8007cc0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007ca8:	8afb      	ldrh	r3, [r7, #22]
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	4413      	add	r3, r2
 8007cae:	781a      	ldrb	r2, [r3, #0]
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007cba:	8afb      	ldrh	r3, [r7, #22]
 8007cbc:	3302      	adds	r3, #2
 8007cbe:	82fb      	strh	r3, [r7, #22]
 8007cc0:	8afa      	ldrh	r2, [r7, #22]
 8007cc2:	8abb      	ldrh	r3, [r7, #20]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d3ef      	bcc.n	8007ca8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	701a      	strb	r2, [r3, #0]
  }
}
 8007cce:	bf00      	nop
 8007cd0:	371c      	adds	r7, #28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b085      	sub	sp, #20
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	881a      	ldrh	r2, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	4413      	add	r3, r2
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4413      	add	r3, r2
 8007d00:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d02:	68fb      	ldr	r3, [r7, #12]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	789b      	ldrb	r3, [r3, #2]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d002      	beq.n	8007d30 <USBH_CtlReq+0x20>
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d00f      	beq.n	8007d4e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007d2e:	e027      	b.n	8007d80 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	88fa      	ldrh	r2, [r7, #6]
 8007d3a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2202      	movs	r2, #2
 8007d46:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d4c:	e018      	b.n	8007d80 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f000 f81c 	bl	8007d8c <USBH_HandleControl>
 8007d54:	4603      	mov	r3, r0
 8007d56:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d002      	beq.n	8007d64 <USBH_CtlReq+0x54>
 8007d5e:	7dfb      	ldrb	r3, [r7, #23]
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	d106      	bne.n	8007d72 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2201      	movs	r2, #1
 8007d68:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	761a      	strb	r2, [r3, #24]
      break;
 8007d70:	e005      	b.n	8007d7e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007d72:	7dfb      	ldrb	r3, [r7, #23]
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d102      	bne.n	8007d7e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	709a      	strb	r2, [r3, #2]
      break;
 8007d7e:	bf00      	nop
  }
  return status;
 8007d80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
	...

08007d8c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d94:	2301      	movs	r3, #1
 8007d96:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	7e1b      	ldrb	r3, [r3, #24]
 8007da0:	3b01      	subs	r3, #1
 8007da2:	2b0a      	cmp	r3, #10
 8007da4:	f200 8156 	bhi.w	8008054 <USBH_HandleControl+0x2c8>
 8007da8:	a201      	add	r2, pc, #4	; (adr r2, 8007db0 <USBH_HandleControl+0x24>)
 8007daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dae:	bf00      	nop
 8007db0:	08007ddd 	.word	0x08007ddd
 8007db4:	08007df7 	.word	0x08007df7
 8007db8:	08007e61 	.word	0x08007e61
 8007dbc:	08007e87 	.word	0x08007e87
 8007dc0:	08007ebf 	.word	0x08007ebf
 8007dc4:	08007ee9 	.word	0x08007ee9
 8007dc8:	08007f3b 	.word	0x08007f3b
 8007dcc:	08007f5d 	.word	0x08007f5d
 8007dd0:	08007f99 	.word	0x08007f99
 8007dd4:	08007fbf 	.word	0x08007fbf
 8007dd8:	08007ffd 	.word	0x08007ffd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f103 0110 	add.w	r1, r3, #16
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	795b      	ldrb	r3, [r3, #5]
 8007de6:	461a      	mov	r2, r3
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f943 	bl	8008074 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2202      	movs	r2, #2
 8007df2:	761a      	strb	r2, [r3, #24]
      break;
 8007df4:	e139      	b.n	800806a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	795b      	ldrb	r3, [r3, #5]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fcc5 	bl	800878c <USBH_LL_GetURBState>
 8007e02:	4603      	mov	r3, r0
 8007e04:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e06:	7bbb      	ldrb	r3, [r7, #14]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d11e      	bne.n	8007e4a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	7c1b      	ldrb	r3, [r3, #16]
 8007e10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e14:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	8adb      	ldrh	r3, [r3, #22]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00a      	beq.n	8007e34 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007e1e:	7b7b      	ldrb	r3, [r7, #13]
 8007e20:	2b80      	cmp	r3, #128	; 0x80
 8007e22:	d103      	bne.n	8007e2c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2203      	movs	r2, #3
 8007e28:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e2a:	e115      	b.n	8008058 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2205      	movs	r2, #5
 8007e30:	761a      	strb	r2, [r3, #24]
      break;
 8007e32:	e111      	b.n	8008058 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007e34:	7b7b      	ldrb	r3, [r7, #13]
 8007e36:	2b80      	cmp	r3, #128	; 0x80
 8007e38:	d103      	bne.n	8007e42 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2209      	movs	r2, #9
 8007e3e:	761a      	strb	r2, [r3, #24]
      break;
 8007e40:	e10a      	b.n	8008058 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2207      	movs	r2, #7
 8007e46:	761a      	strb	r2, [r3, #24]
      break;
 8007e48:	e106      	b.n	8008058 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007e4a:	7bbb      	ldrb	r3, [r7, #14]
 8007e4c:	2b04      	cmp	r3, #4
 8007e4e:	d003      	beq.n	8007e58 <USBH_HandleControl+0xcc>
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	f040 8100 	bne.w	8008058 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	220b      	movs	r2, #11
 8007e5c:	761a      	strb	r2, [r3, #24]
      break;
 8007e5e:	e0fb      	b.n	8008058 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6899      	ldr	r1, [r3, #8]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	899a      	ldrh	r2, [r3, #12]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	791b      	ldrb	r3, [r3, #4]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f93a 	bl	80080f2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2204      	movs	r2, #4
 8007e82:	761a      	strb	r2, [r3, #24]
      break;
 8007e84:	e0f1      	b.n	800806a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	791b      	ldrb	r3, [r3, #4]
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 fc7d 	bl	800878c <USBH_LL_GetURBState>
 8007e92:	4603      	mov	r3, r0
 8007e94:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e96:	7bbb      	ldrb	r3, [r7, #14]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d102      	bne.n	8007ea2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2209      	movs	r2, #9
 8007ea0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007ea2:	7bbb      	ldrb	r3, [r7, #14]
 8007ea4:	2b05      	cmp	r3, #5
 8007ea6:	d102      	bne.n	8007eae <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007eac:	e0d6      	b.n	800805c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007eae:	7bbb      	ldrb	r3, [r7, #14]
 8007eb0:	2b04      	cmp	r3, #4
 8007eb2:	f040 80d3 	bne.w	800805c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	220b      	movs	r2, #11
 8007eba:	761a      	strb	r2, [r3, #24]
      break;
 8007ebc:	e0ce      	b.n	800805c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6899      	ldr	r1, [r3, #8]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	899a      	ldrh	r2, [r3, #12]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	795b      	ldrb	r3, [r3, #5]
 8007eca:	2001      	movs	r0, #1
 8007ecc:	9000      	str	r0, [sp, #0]
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f8ea 	bl	80080a8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2206      	movs	r2, #6
 8007ee4:	761a      	strb	r2, [r3, #24]
      break;
 8007ee6:	e0c0      	b.n	800806a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	795b      	ldrb	r3, [r3, #5]
 8007eec:	4619      	mov	r1, r3
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fc4c 	bl	800878c <USBH_LL_GetURBState>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d103      	bne.n	8007f06 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2207      	movs	r2, #7
 8007f02:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f04:	e0ac      	b.n	8008060 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
 8007f08:	2b05      	cmp	r3, #5
 8007f0a:	d105      	bne.n	8007f18 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	220c      	movs	r2, #12
 8007f10:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007f12:	2303      	movs	r3, #3
 8007f14:	73fb      	strb	r3, [r7, #15]
      break;
 8007f16:	e0a3      	b.n	8008060 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d103      	bne.n	8007f26 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2205      	movs	r2, #5
 8007f22:	761a      	strb	r2, [r3, #24]
      break;
 8007f24:	e09c      	b.n	8008060 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007f26:	7bbb      	ldrb	r3, [r7, #14]
 8007f28:	2b04      	cmp	r3, #4
 8007f2a:	f040 8099 	bne.w	8008060 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	220b      	movs	r2, #11
 8007f32:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007f34:	2302      	movs	r3, #2
 8007f36:	73fb      	strb	r3, [r7, #15]
      break;
 8007f38:	e092      	b.n	8008060 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	791b      	ldrb	r3, [r3, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2100      	movs	r1, #0
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f8d5 	bl	80080f2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2208      	movs	r2, #8
 8007f58:	761a      	strb	r2, [r3, #24]

      break;
 8007f5a:	e086      	b.n	800806a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	791b      	ldrb	r3, [r3, #4]
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fc12 	bl	800878c <USBH_LL_GetURBState>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f6c:	7bbb      	ldrb	r3, [r7, #14]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d105      	bne.n	8007f7e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	220d      	movs	r2, #13
 8007f76:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f7c:	e072      	b.n	8008064 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007f7e:	7bbb      	ldrb	r3, [r7, #14]
 8007f80:	2b04      	cmp	r3, #4
 8007f82:	d103      	bne.n	8007f8c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	220b      	movs	r2, #11
 8007f88:	761a      	strb	r2, [r3, #24]
      break;
 8007f8a:	e06b      	b.n	8008064 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007f8c:	7bbb      	ldrb	r3, [r7, #14]
 8007f8e:	2b05      	cmp	r3, #5
 8007f90:	d168      	bne.n	8008064 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007f92:	2303      	movs	r3, #3
 8007f94:	73fb      	strb	r3, [r7, #15]
      break;
 8007f96:	e065      	b.n	8008064 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	795b      	ldrb	r3, [r3, #5]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	9200      	str	r2, [sp, #0]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f87f 	bl	80080a8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	220a      	movs	r2, #10
 8007fba:	761a      	strb	r2, [r3, #24]
      break;
 8007fbc:	e055      	b.n	800806a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	795b      	ldrb	r3, [r3, #5]
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fbe1 	bl	800878c <USBH_LL_GetURBState>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d105      	bne.n	8007fe0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	220d      	movs	r2, #13
 8007fdc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007fde:	e043      	b.n	8008068 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d103      	bne.n	8007fee <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2209      	movs	r2, #9
 8007fea:	761a      	strb	r2, [r3, #24]
      break;
 8007fec:	e03c      	b.n	8008068 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007fee:	7bbb      	ldrb	r3, [r7, #14]
 8007ff0:	2b04      	cmp	r3, #4
 8007ff2:	d139      	bne.n	8008068 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	220b      	movs	r2, #11
 8007ff8:	761a      	strb	r2, [r3, #24]
      break;
 8007ffa:	e035      	b.n	8008068 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	7e5b      	ldrb	r3, [r3, #25]
 8008000:	3301      	adds	r3, #1
 8008002:	b2da      	uxtb	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	765a      	strb	r2, [r3, #25]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	7e5b      	ldrb	r3, [r3, #25]
 800800c:	2b02      	cmp	r3, #2
 800800e:	d806      	bhi.n	800801e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800801c:	e025      	b.n	800806a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008024:	2106      	movs	r1, #6
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	795b      	ldrb	r3, [r3, #5]
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f90c 	bl	8008254 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	791b      	ldrb	r3, [r3, #4]
 8008040:	4619      	mov	r1, r3
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f906 	bl	8008254 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800804e:	2302      	movs	r3, #2
 8008050:	73fb      	strb	r3, [r7, #15]
      break;
 8008052:	e00a      	b.n	800806a <USBH_HandleControl+0x2de>

    default:
      break;
 8008054:	bf00      	nop
 8008056:	e008      	b.n	800806a <USBH_HandleControl+0x2de>
      break;
 8008058:	bf00      	nop
 800805a:	e006      	b.n	800806a <USBH_HandleControl+0x2de>
      break;
 800805c:	bf00      	nop
 800805e:	e004      	b.n	800806a <USBH_HandleControl+0x2de>
      break;
 8008060:	bf00      	nop
 8008062:	e002      	b.n	800806a <USBH_HandleControl+0x2de>
      break;
 8008064:	bf00      	nop
 8008066:	e000      	b.n	800806a <USBH_HandleControl+0x2de>
      break;
 8008068:	bf00      	nop
  }

  return status;
 800806a:	7bfb      	ldrb	r3, [r7, #15]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b088      	sub	sp, #32
 8008078:	af04      	add	r7, sp, #16
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	4613      	mov	r3, r2
 8008080:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008082:	79f9      	ldrb	r1, [r7, #7]
 8008084:	2300      	movs	r3, #0
 8008086:	9303      	str	r3, [sp, #12]
 8008088:	2308      	movs	r3, #8
 800808a:	9302      	str	r3, [sp, #8]
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	2300      	movs	r3, #0
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	2300      	movs	r3, #0
 8008096:	2200      	movs	r2, #0
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f000 fb46 	bl	800872a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b088      	sub	sp, #32
 80080ac:	af04      	add	r7, sp, #16
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	4611      	mov	r1, r2
 80080b4:	461a      	mov	r2, r3
 80080b6:	460b      	mov	r3, r1
 80080b8:	80fb      	strh	r3, [r7, #6]
 80080ba:	4613      	mov	r3, r2
 80080bc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80080c8:	2300      	movs	r3, #0
 80080ca:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080cc:	7979      	ldrb	r1, [r7, #5]
 80080ce:	7e3b      	ldrb	r3, [r7, #24]
 80080d0:	9303      	str	r3, [sp, #12]
 80080d2:	88fb      	ldrh	r3, [r7, #6]
 80080d4:	9302      	str	r3, [sp, #8]
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	9301      	str	r3, [sp, #4]
 80080da:	2301      	movs	r3, #1
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	2300      	movs	r3, #0
 80080e0:	2200      	movs	r2, #0
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 fb21 	bl	800872a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3710      	adds	r7, #16
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b088      	sub	sp, #32
 80080f6:	af04      	add	r7, sp, #16
 80080f8:	60f8      	str	r0, [r7, #12]
 80080fa:	60b9      	str	r1, [r7, #8]
 80080fc:	4611      	mov	r1, r2
 80080fe:	461a      	mov	r2, r3
 8008100:	460b      	mov	r3, r1
 8008102:	80fb      	strh	r3, [r7, #6]
 8008104:	4613      	mov	r3, r2
 8008106:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008108:	7979      	ldrb	r1, [r7, #5]
 800810a:	2300      	movs	r3, #0
 800810c:	9303      	str	r3, [sp, #12]
 800810e:	88fb      	ldrh	r3, [r7, #6]
 8008110:	9302      	str	r3, [sp, #8]
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	2301      	movs	r3, #1
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	2300      	movs	r3, #0
 800811c:	2201      	movs	r2, #1
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 fb03 	bl	800872a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008124:	2300      	movs	r3, #0

}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b088      	sub	sp, #32
 8008132:	af04      	add	r7, sp, #16
 8008134:	60f8      	str	r0, [r7, #12]
 8008136:	60b9      	str	r1, [r7, #8]
 8008138:	4611      	mov	r1, r2
 800813a:	461a      	mov	r2, r3
 800813c:	460b      	mov	r3, r1
 800813e:	80fb      	strh	r3, [r7, #6]
 8008140:	4613      	mov	r3, r2
 8008142:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800814a:	2b00      	cmp	r3, #0
 800814c:	d001      	beq.n	8008152 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008152:	7979      	ldrb	r1, [r7, #5]
 8008154:	7e3b      	ldrb	r3, [r7, #24]
 8008156:	9303      	str	r3, [sp, #12]
 8008158:	88fb      	ldrh	r3, [r7, #6]
 800815a:	9302      	str	r3, [sp, #8]
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	9301      	str	r3, [sp, #4]
 8008160:	2301      	movs	r3, #1
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	2302      	movs	r3, #2
 8008166:	2200      	movs	r2, #0
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 fade 	bl	800872a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b088      	sub	sp, #32
 800817c:	af04      	add	r7, sp, #16
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	4611      	mov	r1, r2
 8008184:	461a      	mov	r2, r3
 8008186:	460b      	mov	r3, r1
 8008188:	80fb      	strh	r3, [r7, #6]
 800818a:	4613      	mov	r3, r2
 800818c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800818e:	7979      	ldrb	r1, [r7, #5]
 8008190:	2300      	movs	r3, #0
 8008192:	9303      	str	r3, [sp, #12]
 8008194:	88fb      	ldrh	r3, [r7, #6]
 8008196:	9302      	str	r3, [sp, #8]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	9301      	str	r3, [sp, #4]
 800819c:	2301      	movs	r3, #1
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	2302      	movs	r3, #2
 80081a2:	2201      	movs	r2, #1
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 fac0 	bl	800872a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af04      	add	r7, sp, #16
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	4608      	mov	r0, r1
 80081be:	4611      	mov	r1, r2
 80081c0:	461a      	mov	r2, r3
 80081c2:	4603      	mov	r3, r0
 80081c4:	70fb      	strb	r3, [r7, #3]
 80081c6:	460b      	mov	r3, r1
 80081c8:	70bb      	strb	r3, [r7, #2]
 80081ca:	4613      	mov	r3, r2
 80081cc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80081ce:	7878      	ldrb	r0, [r7, #1]
 80081d0:	78ba      	ldrb	r2, [r7, #2]
 80081d2:	78f9      	ldrb	r1, [r7, #3]
 80081d4:	8b3b      	ldrh	r3, [r7, #24]
 80081d6:	9302      	str	r3, [sp, #8]
 80081d8:	7d3b      	ldrb	r3, [r7, #20]
 80081da:	9301      	str	r3, [sp, #4]
 80081dc:	7c3b      	ldrb	r3, [r7, #16]
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	4603      	mov	r3, r0
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 fa53 	bl	800868e <USBH_LL_OpenPipe>

  return USBH_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b082      	sub	sp, #8
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	460b      	mov	r3, r1
 80081fc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80081fe:	78fb      	ldrb	r3, [r7, #3]
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fa72 	bl	80086ec <USBH_LL_ClosePipe>

  return USBH_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}

08008212 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008212:	b580      	push	{r7, lr}
 8008214:	b084      	sub	sp, #16
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	460b      	mov	r3, r1
 800821c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f836 	bl	8008290 <USBH_GetFreePipe>
 8008224:	4603      	mov	r3, r0
 8008226:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008228:	89fb      	ldrh	r3, [r7, #14]
 800822a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800822e:	4293      	cmp	r3, r2
 8008230:	d00a      	beq.n	8008248 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008232:	78fa      	ldrb	r2, [r7, #3]
 8008234:	89fb      	ldrh	r3, [r7, #14]
 8008236:	f003 030f 	and.w	r3, r3, #15
 800823a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800823e:	6879      	ldr	r1, [r7, #4]
 8008240:	33e0      	adds	r3, #224	; 0xe0
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	440b      	add	r3, r1
 8008246:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008248:	89fb      	ldrh	r3, [r7, #14]
 800824a:	b2db      	uxtb	r3, r3
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	460b      	mov	r3, r1
 800825e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	2b0f      	cmp	r3, #15
 8008264:	d80d      	bhi.n	8008282 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008266:	78fb      	ldrb	r3, [r7, #3]
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	33e0      	adds	r3, #224	; 0xe0
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	685a      	ldr	r2, [r3, #4]
 8008272:	78fb      	ldrb	r3, [r7, #3]
 8008274:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008278:	6879      	ldr	r1, [r7, #4]
 800827a:	33e0      	adds	r3, #224	; 0xe0
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	440b      	add	r3, r1
 8008280:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008298:	2300      	movs	r3, #0
 800829a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800829c:	2300      	movs	r3, #0
 800829e:	73fb      	strb	r3, [r7, #15]
 80082a0:	e00f      	b.n	80082c2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	33e0      	adds	r3, #224	; 0xe0
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d102      	bne.n	80082bc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	e007      	b.n	80082cc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
 80082be:	3301      	adds	r3, #1
 80082c0:	73fb      	strb	r3, [r7, #15]
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	2b0f      	cmp	r3, #15
 80082c6:	d9ec      	bls.n	80082a2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80082c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80082dc:	2201      	movs	r2, #1
 80082de:	490e      	ldr	r1, [pc, #56]	; (8008318 <MX_USB_HOST_Init+0x40>)
 80082e0:	480e      	ldr	r0, [pc, #56]	; (800831c <MX_USB_HOST_Init+0x44>)
 80082e2:	f7fe fba5 	bl	8006a30 <USBH_Init>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80082ec:	f7f8 fca0 	bl	8000c30 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80082f0:	490b      	ldr	r1, [pc, #44]	; (8008320 <MX_USB_HOST_Init+0x48>)
 80082f2:	480a      	ldr	r0, [pc, #40]	; (800831c <MX_USB_HOST_Init+0x44>)
 80082f4:	f7fe fc2a 	bl	8006b4c <USBH_RegisterClass>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80082fe:	f7f8 fc97 	bl	8000c30 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008302:	4806      	ldr	r0, [pc, #24]	; (800831c <MX_USB_HOST_Init+0x44>)
 8008304:	f7fe fcae 	bl	8006c64 <USBH_Start>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800830e:	f7f8 fc8f 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008312:	bf00      	nop
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	08008339 	.word	0x08008339
 800831c:	200001e0 	.word	0x200001e0
 8008320:	2000000c 	.word	0x2000000c

08008324 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008328:	4802      	ldr	r0, [pc, #8]	; (8008334 <MX_USB_HOST_Process+0x10>)
 800832a:	f7fe fcab 	bl	8006c84 <USBH_Process>
}
 800832e:	bf00      	nop
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	200001e0 	.word	0x200001e0

08008338 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	460b      	mov	r3, r1
 8008342:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008344:	78fb      	ldrb	r3, [r7, #3]
 8008346:	3b01      	subs	r3, #1
 8008348:	2b04      	cmp	r3, #4
 800834a:	d819      	bhi.n	8008380 <USBH_UserProcess+0x48>
 800834c:	a201      	add	r2, pc, #4	; (adr r2, 8008354 <USBH_UserProcess+0x1c>)
 800834e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008352:	bf00      	nop
 8008354:	08008381 	.word	0x08008381
 8008358:	08008371 	.word	0x08008371
 800835c:	08008381 	.word	0x08008381
 8008360:	08008379 	.word	0x08008379
 8008364:	08008369 	.word	0x08008369
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008368:	4b09      	ldr	r3, [pc, #36]	; (8008390 <USBH_UserProcess+0x58>)
 800836a:	2203      	movs	r2, #3
 800836c:	701a      	strb	r2, [r3, #0]
  break;
 800836e:	e008      	b.n	8008382 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008370:	4b07      	ldr	r3, [pc, #28]	; (8008390 <USBH_UserProcess+0x58>)
 8008372:	2202      	movs	r2, #2
 8008374:	701a      	strb	r2, [r3, #0]
  break;
 8008376:	e004      	b.n	8008382 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008378:	4b05      	ldr	r3, [pc, #20]	; (8008390 <USBH_UserProcess+0x58>)
 800837a:	2201      	movs	r2, #1
 800837c:	701a      	strb	r2, [r3, #0]
  break;
 800837e:	e000      	b.n	8008382 <USBH_UserProcess+0x4a>

  default:
  break;
 8008380:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008382:	bf00      	nop
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	200005b8 	.word	0x200005b8

08008394 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b08a      	sub	sp, #40	; 0x28
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800839c:	f107 0314 	add.w	r3, r7, #20
 80083a0:	2200      	movs	r2, #0
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	605a      	str	r2, [r3, #4]
 80083a6:	609a      	str	r2, [r3, #8]
 80083a8:	60da      	str	r2, [r3, #12]
 80083aa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083b4:	d147      	bne.n	8008446 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083b6:	2300      	movs	r3, #0
 80083b8:	613b      	str	r3, [r7, #16]
 80083ba:	4b25      	ldr	r3, [pc, #148]	; (8008450 <HAL_HCD_MspInit+0xbc>)
 80083bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083be:	4a24      	ldr	r2, [pc, #144]	; (8008450 <HAL_HCD_MspInit+0xbc>)
 80083c0:	f043 0301 	orr.w	r3, r3, #1
 80083c4:	6313      	str	r3, [r2, #48]	; 0x30
 80083c6:	4b22      	ldr	r3, [pc, #136]	; (8008450 <HAL_HCD_MspInit+0xbc>)
 80083c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	613b      	str	r3, [r7, #16]
 80083d0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80083d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083d8:	2300      	movs	r3, #0
 80083da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083dc:	2300      	movs	r3, #0
 80083de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80083e0:	f107 0314 	add.w	r3, r7, #20
 80083e4:	4619      	mov	r1, r3
 80083e6:	481b      	ldr	r0, [pc, #108]	; (8008454 <HAL_HCD_MspInit+0xc0>)
 80083e8:	f7f8 ff5c 	bl	80012a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80083ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80083f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083f2:	2302      	movs	r3, #2
 80083f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083f6:	2300      	movs	r3, #0
 80083f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083fa:	2303      	movs	r3, #3
 80083fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80083fe:	230a      	movs	r3, #10
 8008400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008402:	f107 0314 	add.w	r3, r7, #20
 8008406:	4619      	mov	r1, r3
 8008408:	4812      	ldr	r0, [pc, #72]	; (8008454 <HAL_HCD_MspInit+0xc0>)
 800840a:	f7f8 ff4b 	bl	80012a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800840e:	4b10      	ldr	r3, [pc, #64]	; (8008450 <HAL_HCD_MspInit+0xbc>)
 8008410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008412:	4a0f      	ldr	r2, [pc, #60]	; (8008450 <HAL_HCD_MspInit+0xbc>)
 8008414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008418:	6353      	str	r3, [r2, #52]	; 0x34
 800841a:	2300      	movs	r3, #0
 800841c:	60fb      	str	r3, [r7, #12]
 800841e:	4b0c      	ldr	r3, [pc, #48]	; (8008450 <HAL_HCD_MspInit+0xbc>)
 8008420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008422:	4a0b      	ldr	r2, [pc, #44]	; (8008450 <HAL_HCD_MspInit+0xbc>)
 8008424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008428:	6453      	str	r3, [r2, #68]	; 0x44
 800842a:	4b09      	ldr	r3, [pc, #36]	; (8008450 <HAL_HCD_MspInit+0xbc>)
 800842c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800842e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008436:	2200      	movs	r2, #0
 8008438:	2100      	movs	r1, #0
 800843a:	2043      	movs	r0, #67	; 0x43
 800843c:	f7f8 fee2 	bl	8001204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008440:	2043      	movs	r0, #67	; 0x43
 8008442:	f7f8 ff0b 	bl	800125c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008446:	bf00      	nop
 8008448:	3728      	adds	r7, #40	; 0x28
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	40023800 	.word	0x40023800
 8008454:	40020000 	.word	0x40020000

08008458 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe ffeb 	bl	8007442 <USBH_LL_IncTimer>
}
 800846c:	bf00      	nop
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008482:	4618      	mov	r0, r3
 8008484:	f7ff f823 	bl	80074ce <USBH_LL_Connect>
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800849e:	4618      	mov	r0, r3
 80084a0:	f7ff f82c 	bl	80074fc <USBH_LL_Disconnect>
}
 80084a4:	bf00      	nop
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	460b      	mov	r3, r1
 80084b6:	70fb      	strb	r3, [r7, #3]
 80084b8:	4613      	mov	r3, r2
 80084ba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80084bc:	bf00      	nop
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fe ffdd 	bl	8007496 <USBH_LL_PortEnabled>
}
 80084dc:	bf00      	nop
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fe ffdd 	bl	80074b2 <USBH_LL_PortDisabled>
}
 80084f8:	bf00      	nop
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800850e:	2b01      	cmp	r3, #1
 8008510:	d12a      	bne.n	8008568 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008512:	4a18      	ldr	r2, [pc, #96]	; (8008574 <USBH_LL_Init+0x74>)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4a15      	ldr	r2, [pc, #84]	; (8008574 <USBH_LL_Init+0x74>)
 800851e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008522:	4b14      	ldr	r3, [pc, #80]	; (8008574 <USBH_LL_Init+0x74>)
 8008524:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008528:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800852a:	4b12      	ldr	r3, [pc, #72]	; (8008574 <USBH_LL_Init+0x74>)
 800852c:	2208      	movs	r2, #8
 800852e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008530:	4b10      	ldr	r3, [pc, #64]	; (8008574 <USBH_LL_Init+0x74>)
 8008532:	2201      	movs	r2, #1
 8008534:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008536:	4b0f      	ldr	r3, [pc, #60]	; (8008574 <USBH_LL_Init+0x74>)
 8008538:	2200      	movs	r2, #0
 800853a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800853c:	4b0d      	ldr	r3, [pc, #52]	; (8008574 <USBH_LL_Init+0x74>)
 800853e:	2202      	movs	r2, #2
 8008540:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008542:	4b0c      	ldr	r3, [pc, #48]	; (8008574 <USBH_LL_Init+0x74>)
 8008544:	2200      	movs	r2, #0
 8008546:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008548:	480a      	ldr	r0, [pc, #40]	; (8008574 <USBH_LL_Init+0x74>)
 800854a:	f7f9 f9c1 	bl	80018d0 <HAL_HCD_Init>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d001      	beq.n	8008558 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008554:	f7f8 fb6c 	bl	8000c30 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008558:	4806      	ldr	r0, [pc, #24]	; (8008574 <USBH_LL_Init+0x74>)
 800855a:	f7f9 fdb0 	bl	80020be <HAL_HCD_GetCurrentFrame>
 800855e:	4603      	mov	r3, r0
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7fe ff5e 	bl	8007424 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3708      	adds	r7, #8
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	200005bc 	.word	0x200005bc

08008578 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008580:	2300      	movs	r3, #0
 8008582:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008584:	2300      	movs	r3, #0
 8008586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800858e:	4618      	mov	r0, r3
 8008590:	f7f9 fd1f 	bl	8001fd2 <HAL_HCD_Start>
 8008594:	4603      	mov	r3, r0
 8008596:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008598:	7bfb      	ldrb	r3, [r7, #15]
 800859a:	4618      	mov	r0, r3
 800859c:	f000 f95c 	bl	8008858 <USBH_Get_USB_Status>
 80085a0:	4603      	mov	r3, r0
 80085a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b084      	sub	sp, #16
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7f9 fd27 	bl	8002018 <HAL_HCD_Stop>
 80085ca:	4603      	mov	r3, r0
 80085cc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085ce:	7bfb      	ldrb	r3, [r7, #15]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f000 f941 	bl	8008858 <USBH_Get_USB_Status>
 80085d6:	4603      	mov	r3, r0
 80085d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085da:	7bbb      	ldrb	r3, [r7, #14]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80085ec:	2301      	movs	r3, #1
 80085ee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7f9 fd6f 	bl	80020da <HAL_HCD_GetCurrentSpeed>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d00c      	beq.n	800861c <USBH_LL_GetSpeed+0x38>
 8008602:	2b02      	cmp	r3, #2
 8008604:	d80d      	bhi.n	8008622 <USBH_LL_GetSpeed+0x3e>
 8008606:	2b00      	cmp	r3, #0
 8008608:	d002      	beq.n	8008610 <USBH_LL_GetSpeed+0x2c>
 800860a:	2b01      	cmp	r3, #1
 800860c:	d003      	beq.n	8008616 <USBH_LL_GetSpeed+0x32>
 800860e:	e008      	b.n	8008622 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008610:	2300      	movs	r3, #0
 8008612:	73fb      	strb	r3, [r7, #15]
    break;
 8008614:	e008      	b.n	8008628 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008616:	2301      	movs	r3, #1
 8008618:	73fb      	strb	r3, [r7, #15]
    break;
 800861a:	e005      	b.n	8008628 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800861c:	2302      	movs	r3, #2
 800861e:	73fb      	strb	r3, [r7, #15]
    break;
 8008620:	e002      	b.n	8008628 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008622:	2301      	movs	r3, #1
 8008624:	73fb      	strb	r3, [r7, #15]
    break;
 8008626:	bf00      	nop
  }
  return  speed;
 8008628:	7bfb      	ldrb	r3, [r7, #15]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b084      	sub	sp, #16
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008648:	4618      	mov	r0, r3
 800864a:	f7f9 fd02 	bl	8002052 <HAL_HCD_ResetPort>
 800864e:	4603      	mov	r3, r0
 8008650:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008652:	7bfb      	ldrb	r3, [r7, #15]
 8008654:	4618      	mov	r0, r3
 8008656:	f000 f8ff 	bl	8008858 <USBH_Get_USB_Status>
 800865a:	4603      	mov	r3, r0
 800865c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800865e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	460b      	mov	r3, r1
 8008672:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800867a:	78fa      	ldrb	r2, [r7, #3]
 800867c:	4611      	mov	r1, r2
 800867e:	4618      	mov	r0, r3
 8008680:	f7f9 fd09 	bl	8002096 <HAL_HCD_HC_GetXferCount>
 8008684:	4603      	mov	r3, r0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800868e:	b590      	push	{r4, r7, lr}
 8008690:	b089      	sub	sp, #36	; 0x24
 8008692:	af04      	add	r7, sp, #16
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	4608      	mov	r0, r1
 8008698:	4611      	mov	r1, r2
 800869a:	461a      	mov	r2, r3
 800869c:	4603      	mov	r3, r0
 800869e:	70fb      	strb	r3, [r7, #3]
 80086a0:	460b      	mov	r3, r1
 80086a2:	70bb      	strb	r3, [r7, #2]
 80086a4:	4613      	mov	r3, r2
 80086a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086a8:	2300      	movs	r3, #0
 80086aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80086b6:	787c      	ldrb	r4, [r7, #1]
 80086b8:	78ba      	ldrb	r2, [r7, #2]
 80086ba:	78f9      	ldrb	r1, [r7, #3]
 80086bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086be:	9302      	str	r3, [sp, #8]
 80086c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80086c4:	9301      	str	r3, [sp, #4]
 80086c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	4623      	mov	r3, r4
 80086ce:	f7f9 f96d 	bl	80019ac <HAL_HCD_HC_Init>
 80086d2:	4603      	mov	r3, r0
 80086d4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 f8bd 	bl	8008858 <USBH_Get_USB_Status>
 80086de:	4603      	mov	r3, r0
 80086e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd90      	pop	{r4, r7, pc}

080086ec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	460b      	mov	r3, r1
 80086f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008706:	78fa      	ldrb	r2, [r7, #3]
 8008708:	4611      	mov	r1, r2
 800870a:	4618      	mov	r0, r3
 800870c:	f7f9 f9dd 	bl	8001aca <HAL_HCD_HC_Halt>
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008714:	7bfb      	ldrb	r3, [r7, #15]
 8008716:	4618      	mov	r0, r3
 8008718:	f000 f89e 	bl	8008858 <USBH_Get_USB_Status>
 800871c:	4603      	mov	r3, r0
 800871e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008720:	7bbb      	ldrb	r3, [r7, #14]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800872a:	b590      	push	{r4, r7, lr}
 800872c:	b089      	sub	sp, #36	; 0x24
 800872e:	af04      	add	r7, sp, #16
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	4608      	mov	r0, r1
 8008734:	4611      	mov	r1, r2
 8008736:	461a      	mov	r2, r3
 8008738:	4603      	mov	r3, r0
 800873a:	70fb      	strb	r3, [r7, #3]
 800873c:	460b      	mov	r3, r1
 800873e:	70bb      	strb	r3, [r7, #2]
 8008740:	4613      	mov	r3, r2
 8008742:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008752:	787c      	ldrb	r4, [r7, #1]
 8008754:	78ba      	ldrb	r2, [r7, #2]
 8008756:	78f9      	ldrb	r1, [r7, #3]
 8008758:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800875c:	9303      	str	r3, [sp, #12]
 800875e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008760:	9302      	str	r3, [sp, #8]
 8008762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008764:	9301      	str	r3, [sp, #4]
 8008766:	f897 3020 	ldrb.w	r3, [r7, #32]
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	4623      	mov	r3, r4
 800876e:	f7f9 f9cf 	bl	8001b10 <HAL_HCD_HC_SubmitRequest>
 8008772:	4603      	mov	r3, r0
 8008774:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008776:	7bfb      	ldrb	r3, [r7, #15]
 8008778:	4618      	mov	r0, r3
 800877a:	f000 f86d 	bl	8008858 <USBH_Get_USB_Status>
 800877e:	4603      	mov	r3, r0
 8008780:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008782:	7bbb      	ldrb	r3, [r7, #14]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	bd90      	pop	{r4, r7, pc}

0800878c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	460b      	mov	r3, r1
 8008796:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800879e:	78fa      	ldrb	r2, [r7, #3]
 80087a0:	4611      	mov	r1, r2
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7f9 fc63 	bl	800206e <HAL_HCD_HC_GetURBState>
 80087a8:	4603      	mov	r3, r0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b082      	sub	sp, #8
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	460b      	mov	r3, r1
 80087bc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d103      	bne.n	80087d0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80087c8:	78fb      	ldrb	r3, [r7, #3]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f000 f870 	bl	80088b0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80087d0:	20c8      	movs	r0, #200	; 0xc8
 80087d2:	f7f8 fc03 	bl	8000fdc <HAL_Delay>
  return USBH_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	460b      	mov	r3, r1
 80087ea:	70fb      	strb	r3, [r7, #3]
 80087ec:	4613      	mov	r3, r2
 80087ee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087f6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80087f8:	78fb      	ldrb	r3, [r7, #3]
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	212c      	movs	r1, #44	; 0x2c
 80087fe:	fb01 f303 	mul.w	r3, r1, r3
 8008802:	4413      	add	r3, r2
 8008804:	333b      	adds	r3, #59	; 0x3b
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d009      	beq.n	8008820 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800880c:	78fb      	ldrb	r3, [r7, #3]
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	212c      	movs	r1, #44	; 0x2c
 8008812:	fb01 f303 	mul.w	r3, r1, r3
 8008816:	4413      	add	r3, r2
 8008818:	3354      	adds	r3, #84	; 0x54
 800881a:	78ba      	ldrb	r2, [r7, #2]
 800881c:	701a      	strb	r2, [r3, #0]
 800881e:	e008      	b.n	8008832 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008820:	78fb      	ldrb	r3, [r7, #3]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	212c      	movs	r1, #44	; 0x2c
 8008826:	fb01 f303 	mul.w	r3, r1, r3
 800882a:	4413      	add	r3, r2
 800882c:	3355      	adds	r3, #85	; 0x55
 800882e:	78ba      	ldrb	r2, [r7, #2]
 8008830:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3714      	adds	r7, #20
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f7f8 fbc7 	bl	8000fdc <HAL_Delay>
}
 800884e:	bf00      	nop
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
	...

08008858 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	4603      	mov	r3, r0
 8008860:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008866:	79fb      	ldrb	r3, [r7, #7]
 8008868:	2b03      	cmp	r3, #3
 800886a:	d817      	bhi.n	800889c <USBH_Get_USB_Status+0x44>
 800886c:	a201      	add	r2, pc, #4	; (adr r2, 8008874 <USBH_Get_USB_Status+0x1c>)
 800886e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008872:	bf00      	nop
 8008874:	08008885 	.word	0x08008885
 8008878:	0800888b 	.word	0x0800888b
 800887c:	08008891 	.word	0x08008891
 8008880:	08008897 	.word	0x08008897
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	73fb      	strb	r3, [r7, #15]
    break;
 8008888:	e00b      	b.n	80088a2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800888a:	2302      	movs	r3, #2
 800888c:	73fb      	strb	r3, [r7, #15]
    break;
 800888e:	e008      	b.n	80088a2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008890:	2301      	movs	r3, #1
 8008892:	73fb      	strb	r3, [r7, #15]
    break;
 8008894:	e005      	b.n	80088a2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008896:	2302      	movs	r3, #2
 8008898:	73fb      	strb	r3, [r7, #15]
    break;
 800889a:	e002      	b.n	80088a2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800889c:	2302      	movs	r3, #2
 800889e:	73fb      	strb	r3, [r7, #15]
    break;
 80088a0:	bf00      	nop
  }
  return usb_status;
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	4603      	mov	r3, r0
 80088b8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80088ba:	79fb      	ldrb	r3, [r7, #7]
 80088bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80088be:	79fb      	ldrb	r3, [r7, #7]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d102      	bne.n	80088ca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80088c4:	2300      	movs	r3, #0
 80088c6:	73fb      	strb	r3, [r7, #15]
 80088c8:	e001      	b.n	80088ce <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80088ca:	2301      	movs	r3, #1
 80088cc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
 80088d0:	461a      	mov	r2, r3
 80088d2:	2101      	movs	r1, #1
 80088d4:	4803      	ldr	r0, [pc, #12]	; (80088e4 <MX_DriverVbusFS+0x34>)
 80088d6:	f7f8 ffa5 	bl	8001824 <HAL_GPIO_WritePin>
}
 80088da:	bf00      	nop
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	40020800 	.word	0x40020800

080088e8 <malloc>:
 80088e8:	4b02      	ldr	r3, [pc, #8]	; (80088f4 <malloc+0xc>)
 80088ea:	4601      	mov	r1, r0
 80088ec:	6818      	ldr	r0, [r3, #0]
 80088ee:	f000 b82b 	b.w	8008948 <_malloc_r>
 80088f2:	bf00      	nop
 80088f4:	20000078 	.word	0x20000078

080088f8 <free>:
 80088f8:	4b02      	ldr	r3, [pc, #8]	; (8008904 <free+0xc>)
 80088fa:	4601      	mov	r1, r0
 80088fc:	6818      	ldr	r0, [r3, #0]
 80088fe:	f000 b8f3 	b.w	8008ae8 <_free_r>
 8008902:	bf00      	nop
 8008904:	20000078 	.word	0x20000078

08008908 <sbrk_aligned>:
 8008908:	b570      	push	{r4, r5, r6, lr}
 800890a:	4e0e      	ldr	r6, [pc, #56]	; (8008944 <sbrk_aligned+0x3c>)
 800890c:	460c      	mov	r4, r1
 800890e:	6831      	ldr	r1, [r6, #0]
 8008910:	4605      	mov	r5, r0
 8008912:	b911      	cbnz	r1, 800891a <sbrk_aligned+0x12>
 8008914:	f000 f8ac 	bl	8008a70 <_sbrk_r>
 8008918:	6030      	str	r0, [r6, #0]
 800891a:	4621      	mov	r1, r4
 800891c:	4628      	mov	r0, r5
 800891e:	f000 f8a7 	bl	8008a70 <_sbrk_r>
 8008922:	1c43      	adds	r3, r0, #1
 8008924:	d00a      	beq.n	800893c <sbrk_aligned+0x34>
 8008926:	1cc4      	adds	r4, r0, #3
 8008928:	f024 0403 	bic.w	r4, r4, #3
 800892c:	42a0      	cmp	r0, r4
 800892e:	d007      	beq.n	8008940 <sbrk_aligned+0x38>
 8008930:	1a21      	subs	r1, r4, r0
 8008932:	4628      	mov	r0, r5
 8008934:	f000 f89c 	bl	8008a70 <_sbrk_r>
 8008938:	3001      	adds	r0, #1
 800893a:	d101      	bne.n	8008940 <sbrk_aligned+0x38>
 800893c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008940:	4620      	mov	r0, r4
 8008942:	bd70      	pop	{r4, r5, r6, pc}
 8008944:	200008c4 	.word	0x200008c4

08008948 <_malloc_r>:
 8008948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800894c:	1ccd      	adds	r5, r1, #3
 800894e:	f025 0503 	bic.w	r5, r5, #3
 8008952:	3508      	adds	r5, #8
 8008954:	2d0c      	cmp	r5, #12
 8008956:	bf38      	it	cc
 8008958:	250c      	movcc	r5, #12
 800895a:	2d00      	cmp	r5, #0
 800895c:	4607      	mov	r7, r0
 800895e:	db01      	blt.n	8008964 <_malloc_r+0x1c>
 8008960:	42a9      	cmp	r1, r5
 8008962:	d905      	bls.n	8008970 <_malloc_r+0x28>
 8008964:	230c      	movs	r3, #12
 8008966:	603b      	str	r3, [r7, #0]
 8008968:	2600      	movs	r6, #0
 800896a:	4630      	mov	r0, r6
 800896c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008970:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008a44 <_malloc_r+0xfc>
 8008974:	f000 f868 	bl	8008a48 <__malloc_lock>
 8008978:	f8d8 3000 	ldr.w	r3, [r8]
 800897c:	461c      	mov	r4, r3
 800897e:	bb5c      	cbnz	r4, 80089d8 <_malloc_r+0x90>
 8008980:	4629      	mov	r1, r5
 8008982:	4638      	mov	r0, r7
 8008984:	f7ff ffc0 	bl	8008908 <sbrk_aligned>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	4604      	mov	r4, r0
 800898c:	d155      	bne.n	8008a3a <_malloc_r+0xf2>
 800898e:	f8d8 4000 	ldr.w	r4, [r8]
 8008992:	4626      	mov	r6, r4
 8008994:	2e00      	cmp	r6, #0
 8008996:	d145      	bne.n	8008a24 <_malloc_r+0xdc>
 8008998:	2c00      	cmp	r4, #0
 800899a:	d048      	beq.n	8008a2e <_malloc_r+0xe6>
 800899c:	6823      	ldr	r3, [r4, #0]
 800899e:	4631      	mov	r1, r6
 80089a0:	4638      	mov	r0, r7
 80089a2:	eb04 0903 	add.w	r9, r4, r3
 80089a6:	f000 f863 	bl	8008a70 <_sbrk_r>
 80089aa:	4581      	cmp	r9, r0
 80089ac:	d13f      	bne.n	8008a2e <_malloc_r+0xe6>
 80089ae:	6821      	ldr	r1, [r4, #0]
 80089b0:	1a6d      	subs	r5, r5, r1
 80089b2:	4629      	mov	r1, r5
 80089b4:	4638      	mov	r0, r7
 80089b6:	f7ff ffa7 	bl	8008908 <sbrk_aligned>
 80089ba:	3001      	adds	r0, #1
 80089bc:	d037      	beq.n	8008a2e <_malloc_r+0xe6>
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	442b      	add	r3, r5
 80089c2:	6023      	str	r3, [r4, #0]
 80089c4:	f8d8 3000 	ldr.w	r3, [r8]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d038      	beq.n	8008a3e <_malloc_r+0xf6>
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	42a2      	cmp	r2, r4
 80089d0:	d12b      	bne.n	8008a2a <_malloc_r+0xe2>
 80089d2:	2200      	movs	r2, #0
 80089d4:	605a      	str	r2, [r3, #4]
 80089d6:	e00f      	b.n	80089f8 <_malloc_r+0xb0>
 80089d8:	6822      	ldr	r2, [r4, #0]
 80089da:	1b52      	subs	r2, r2, r5
 80089dc:	d41f      	bmi.n	8008a1e <_malloc_r+0xd6>
 80089de:	2a0b      	cmp	r2, #11
 80089e0:	d917      	bls.n	8008a12 <_malloc_r+0xca>
 80089e2:	1961      	adds	r1, r4, r5
 80089e4:	42a3      	cmp	r3, r4
 80089e6:	6025      	str	r5, [r4, #0]
 80089e8:	bf18      	it	ne
 80089ea:	6059      	strne	r1, [r3, #4]
 80089ec:	6863      	ldr	r3, [r4, #4]
 80089ee:	bf08      	it	eq
 80089f0:	f8c8 1000 	streq.w	r1, [r8]
 80089f4:	5162      	str	r2, [r4, r5]
 80089f6:	604b      	str	r3, [r1, #4]
 80089f8:	4638      	mov	r0, r7
 80089fa:	f104 060b 	add.w	r6, r4, #11
 80089fe:	f000 f829 	bl	8008a54 <__malloc_unlock>
 8008a02:	f026 0607 	bic.w	r6, r6, #7
 8008a06:	1d23      	adds	r3, r4, #4
 8008a08:	1af2      	subs	r2, r6, r3
 8008a0a:	d0ae      	beq.n	800896a <_malloc_r+0x22>
 8008a0c:	1b9b      	subs	r3, r3, r6
 8008a0e:	50a3      	str	r3, [r4, r2]
 8008a10:	e7ab      	b.n	800896a <_malloc_r+0x22>
 8008a12:	42a3      	cmp	r3, r4
 8008a14:	6862      	ldr	r2, [r4, #4]
 8008a16:	d1dd      	bne.n	80089d4 <_malloc_r+0x8c>
 8008a18:	f8c8 2000 	str.w	r2, [r8]
 8008a1c:	e7ec      	b.n	80089f8 <_malloc_r+0xb0>
 8008a1e:	4623      	mov	r3, r4
 8008a20:	6864      	ldr	r4, [r4, #4]
 8008a22:	e7ac      	b.n	800897e <_malloc_r+0x36>
 8008a24:	4634      	mov	r4, r6
 8008a26:	6876      	ldr	r6, [r6, #4]
 8008a28:	e7b4      	b.n	8008994 <_malloc_r+0x4c>
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	e7cc      	b.n	80089c8 <_malloc_r+0x80>
 8008a2e:	230c      	movs	r3, #12
 8008a30:	603b      	str	r3, [r7, #0]
 8008a32:	4638      	mov	r0, r7
 8008a34:	f000 f80e 	bl	8008a54 <__malloc_unlock>
 8008a38:	e797      	b.n	800896a <_malloc_r+0x22>
 8008a3a:	6025      	str	r5, [r4, #0]
 8008a3c:	e7dc      	b.n	80089f8 <_malloc_r+0xb0>
 8008a3e:	605b      	str	r3, [r3, #4]
 8008a40:	deff      	udf	#255	; 0xff
 8008a42:	bf00      	nop
 8008a44:	200008c0 	.word	0x200008c0

08008a48 <__malloc_lock>:
 8008a48:	4801      	ldr	r0, [pc, #4]	; (8008a50 <__malloc_lock+0x8>)
 8008a4a:	f000 b84b 	b.w	8008ae4 <__retarget_lock_acquire_recursive>
 8008a4e:	bf00      	nop
 8008a50:	20000a00 	.word	0x20000a00

08008a54 <__malloc_unlock>:
 8008a54:	4801      	ldr	r0, [pc, #4]	; (8008a5c <__malloc_unlock+0x8>)
 8008a56:	f000 b846 	b.w	8008ae6 <__retarget_lock_release_recursive>
 8008a5a:	bf00      	nop
 8008a5c:	20000a00 	.word	0x20000a00

08008a60 <memset>:
 8008a60:	4402      	add	r2, r0
 8008a62:	4603      	mov	r3, r0
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d100      	bne.n	8008a6a <memset+0xa>
 8008a68:	4770      	bx	lr
 8008a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a6e:	e7f9      	b.n	8008a64 <memset+0x4>

08008a70 <_sbrk_r>:
 8008a70:	b538      	push	{r3, r4, r5, lr}
 8008a72:	4d06      	ldr	r5, [pc, #24]	; (8008a8c <_sbrk_r+0x1c>)
 8008a74:	2300      	movs	r3, #0
 8008a76:	4604      	mov	r4, r0
 8008a78:	4608      	mov	r0, r1
 8008a7a:	602b      	str	r3, [r5, #0]
 8008a7c:	f7f8 f9ca 	bl	8000e14 <_sbrk>
 8008a80:	1c43      	adds	r3, r0, #1
 8008a82:	d102      	bne.n	8008a8a <_sbrk_r+0x1a>
 8008a84:	682b      	ldr	r3, [r5, #0]
 8008a86:	b103      	cbz	r3, 8008a8a <_sbrk_r+0x1a>
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	bd38      	pop	{r3, r4, r5, pc}
 8008a8c:	20000a04 	.word	0x20000a04

08008a90 <__errno>:
 8008a90:	4b01      	ldr	r3, [pc, #4]	; (8008a98 <__errno+0x8>)
 8008a92:	6818      	ldr	r0, [r3, #0]
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	20000078 	.word	0x20000078

08008a9c <__libc_init_array>:
 8008a9c:	b570      	push	{r4, r5, r6, lr}
 8008a9e:	4d0d      	ldr	r5, [pc, #52]	; (8008ad4 <__libc_init_array+0x38>)
 8008aa0:	4c0d      	ldr	r4, [pc, #52]	; (8008ad8 <__libc_init_array+0x3c>)
 8008aa2:	1b64      	subs	r4, r4, r5
 8008aa4:	10a4      	asrs	r4, r4, #2
 8008aa6:	2600      	movs	r6, #0
 8008aa8:	42a6      	cmp	r6, r4
 8008aaa:	d109      	bne.n	8008ac0 <__libc_init_array+0x24>
 8008aac:	4d0b      	ldr	r5, [pc, #44]	; (8008adc <__libc_init_array+0x40>)
 8008aae:	4c0c      	ldr	r4, [pc, #48]	; (8008ae0 <__libc_init_array+0x44>)
 8008ab0:	f000 f866 	bl	8008b80 <_init>
 8008ab4:	1b64      	subs	r4, r4, r5
 8008ab6:	10a4      	asrs	r4, r4, #2
 8008ab8:	2600      	movs	r6, #0
 8008aba:	42a6      	cmp	r6, r4
 8008abc:	d105      	bne.n	8008aca <__libc_init_array+0x2e>
 8008abe:	bd70      	pop	{r4, r5, r6, pc}
 8008ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac4:	4798      	blx	r3
 8008ac6:	3601      	adds	r6, #1
 8008ac8:	e7ee      	b.n	8008aa8 <__libc_init_array+0xc>
 8008aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ace:	4798      	blx	r3
 8008ad0:	3601      	adds	r6, #1
 8008ad2:	e7f2      	b.n	8008aba <__libc_init_array+0x1e>
 8008ad4:	08008d88 	.word	0x08008d88
 8008ad8:	08008d88 	.word	0x08008d88
 8008adc:	08008d88 	.word	0x08008d88
 8008ae0:	08008d8c 	.word	0x08008d8c

08008ae4 <__retarget_lock_acquire_recursive>:
 8008ae4:	4770      	bx	lr

08008ae6 <__retarget_lock_release_recursive>:
 8008ae6:	4770      	bx	lr

08008ae8 <_free_r>:
 8008ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008aea:	2900      	cmp	r1, #0
 8008aec:	d044      	beq.n	8008b78 <_free_r+0x90>
 8008aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008af2:	9001      	str	r0, [sp, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f1a1 0404 	sub.w	r4, r1, #4
 8008afa:	bfb8      	it	lt
 8008afc:	18e4      	addlt	r4, r4, r3
 8008afe:	f7ff ffa3 	bl	8008a48 <__malloc_lock>
 8008b02:	4a1e      	ldr	r2, [pc, #120]	; (8008b7c <_free_r+0x94>)
 8008b04:	9801      	ldr	r0, [sp, #4]
 8008b06:	6813      	ldr	r3, [r2, #0]
 8008b08:	b933      	cbnz	r3, 8008b18 <_free_r+0x30>
 8008b0a:	6063      	str	r3, [r4, #4]
 8008b0c:	6014      	str	r4, [r2, #0]
 8008b0e:	b003      	add	sp, #12
 8008b10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b14:	f7ff bf9e 	b.w	8008a54 <__malloc_unlock>
 8008b18:	42a3      	cmp	r3, r4
 8008b1a:	d908      	bls.n	8008b2e <_free_r+0x46>
 8008b1c:	6825      	ldr	r5, [r4, #0]
 8008b1e:	1961      	adds	r1, r4, r5
 8008b20:	428b      	cmp	r3, r1
 8008b22:	bf01      	itttt	eq
 8008b24:	6819      	ldreq	r1, [r3, #0]
 8008b26:	685b      	ldreq	r3, [r3, #4]
 8008b28:	1949      	addeq	r1, r1, r5
 8008b2a:	6021      	streq	r1, [r4, #0]
 8008b2c:	e7ed      	b.n	8008b0a <_free_r+0x22>
 8008b2e:	461a      	mov	r2, r3
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	b10b      	cbz	r3, 8008b38 <_free_r+0x50>
 8008b34:	42a3      	cmp	r3, r4
 8008b36:	d9fa      	bls.n	8008b2e <_free_r+0x46>
 8008b38:	6811      	ldr	r1, [r2, #0]
 8008b3a:	1855      	adds	r5, r2, r1
 8008b3c:	42a5      	cmp	r5, r4
 8008b3e:	d10b      	bne.n	8008b58 <_free_r+0x70>
 8008b40:	6824      	ldr	r4, [r4, #0]
 8008b42:	4421      	add	r1, r4
 8008b44:	1854      	adds	r4, r2, r1
 8008b46:	42a3      	cmp	r3, r4
 8008b48:	6011      	str	r1, [r2, #0]
 8008b4a:	d1e0      	bne.n	8008b0e <_free_r+0x26>
 8008b4c:	681c      	ldr	r4, [r3, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	6053      	str	r3, [r2, #4]
 8008b52:	440c      	add	r4, r1
 8008b54:	6014      	str	r4, [r2, #0]
 8008b56:	e7da      	b.n	8008b0e <_free_r+0x26>
 8008b58:	d902      	bls.n	8008b60 <_free_r+0x78>
 8008b5a:	230c      	movs	r3, #12
 8008b5c:	6003      	str	r3, [r0, #0]
 8008b5e:	e7d6      	b.n	8008b0e <_free_r+0x26>
 8008b60:	6825      	ldr	r5, [r4, #0]
 8008b62:	1961      	adds	r1, r4, r5
 8008b64:	428b      	cmp	r3, r1
 8008b66:	bf04      	itt	eq
 8008b68:	6819      	ldreq	r1, [r3, #0]
 8008b6a:	685b      	ldreq	r3, [r3, #4]
 8008b6c:	6063      	str	r3, [r4, #4]
 8008b6e:	bf04      	itt	eq
 8008b70:	1949      	addeq	r1, r1, r5
 8008b72:	6021      	streq	r1, [r4, #0]
 8008b74:	6054      	str	r4, [r2, #4]
 8008b76:	e7ca      	b.n	8008b0e <_free_r+0x26>
 8008b78:	b003      	add	sp, #12
 8008b7a:	bd30      	pop	{r4, r5, pc}
 8008b7c:	200008c0 	.word	0x200008c0

08008b80 <_init>:
 8008b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b82:	bf00      	nop
 8008b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b86:	bc08      	pop	{r3}
 8008b88:	469e      	mov	lr, r3
 8008b8a:	4770      	bx	lr

08008b8c <_fini>:
 8008b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8e:	bf00      	nop
 8008b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b92:	bc08      	pop	{r3}
 8008b94:	469e      	mov	lr, r3
 8008b96:	4770      	bx	lr
