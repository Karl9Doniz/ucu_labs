
diodes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089bc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08008b54  08008b54  00018b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d3c  08008d3c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08008d3c  08008d3c  00018d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d44  08008d44  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d44  08008d44  00018d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d48  08008d48  00018d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08008d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000994  20000088  08008dd4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a1c  08008dd4  00020a1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000154e7  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f3d  00000000  00000000  000355e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  00039520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d57  00000000  00000000  0003a6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000191d4  00000000  00000000  0003b417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001993d  00000000  00000000  000545eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e364  00000000  00000000  0006df28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004acc  00000000  00000000  000fc28c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00100d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000088 	.word	0x20000088
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008b3c 	.word	0x08008b3c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	08008b3c 	.word	0x08008b3c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08c      	sub	sp, #48	; 0x30
 80004d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 031c 	add.w	r3, r7, #28
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	61bb      	str	r3, [r7, #24]
 80004ee:	4b65      	ldr	r3, [pc, #404]	; (8000684 <MX_GPIO_Init+0x1b0>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a64      	ldr	r2, [pc, #400]	; (8000684 <MX_GPIO_Init+0x1b0>)
 80004f4:	f043 0310 	orr.w	r3, r3, #16
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
 80004fa:	4b62      	ldr	r3, [pc, #392]	; (8000684 <MX_GPIO_Init+0x1b0>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	f003 0310 	and.w	r3, r3, #16
 8000502:	61bb      	str	r3, [r7, #24]
 8000504:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
 800050a:	4b5e      	ldr	r3, [pc, #376]	; (8000684 <MX_GPIO_Init+0x1b0>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a5d      	ldr	r2, [pc, #372]	; (8000684 <MX_GPIO_Init+0x1b0>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b5b      	ldr	r3, [pc, #364]	; (8000684 <MX_GPIO_Init+0x1b0>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f003 0304 	and.w	r3, r3, #4
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	613b      	str	r3, [r7, #16]
 8000526:	4b57      	ldr	r3, [pc, #348]	; (8000684 <MX_GPIO_Init+0x1b0>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a56      	ldr	r2, [pc, #344]	; (8000684 <MX_GPIO_Init+0x1b0>)
 800052c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
 8000532:	4b54      	ldr	r3, [pc, #336]	; (8000684 <MX_GPIO_Init+0x1b0>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	4b50      	ldr	r3, [pc, #320]	; (8000684 <MX_GPIO_Init+0x1b0>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a4f      	ldr	r2, [pc, #316]	; (8000684 <MX_GPIO_Init+0x1b0>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b4d      	ldr	r3, [pc, #308]	; (8000684 <MX_GPIO_Init+0x1b0>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	4b49      	ldr	r3, [pc, #292]	; (8000684 <MX_GPIO_Init+0x1b0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a48      	ldr	r2, [pc, #288]	; (8000684 <MX_GPIO_Init+0x1b0>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b46      	ldr	r3, [pc, #280]	; (8000684 <MX_GPIO_Init+0x1b0>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	4b42      	ldr	r3, [pc, #264]	; (8000684 <MX_GPIO_Init+0x1b0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a41      	ldr	r2, [pc, #260]	; (8000684 <MX_GPIO_Init+0x1b0>)
 8000580:	f043 0308 	orr.w	r3, r3, #8
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b3f      	ldr	r3, [pc, #252]	; (8000684 <MX_GPIO_Init+0x1b0>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0308 	and.w	r3, r3, #8
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2108      	movs	r1, #8
 8000596:	483c      	ldr	r0, [pc, #240]	; (8000688 <MX_GPIO_Init+0x1b4>)
 8000598:	f001 f906 	bl	80017a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2101      	movs	r1, #1
 80005a0:	483a      	ldr	r0, [pc, #232]	; (800068c <MX_GPIO_Init+0x1b8>)
 80005a2:	f001 f901 	bl	80017a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005a6:	2200      	movs	r2, #0
 80005a8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005ac:	4838      	ldr	r0, [pc, #224]	; (8000690 <MX_GPIO_Init+0x1bc>)
 80005ae:	f001 f8fb 	bl	80017a8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80005b2:	2304      	movs	r3, #4
 80005b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b6:	2300      	movs	r3, #0
 80005b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	4619      	mov	r1, r3
 80005c4:	4830      	ldr	r0, [pc, #192]	; (8000688 <MX_GPIO_Init+0x1b4>)
 80005c6:	f000 fe55 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005ca:	2308      	movs	r3, #8
 80005cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ce:	2301      	movs	r3, #1
 80005d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d6:	2300      	movs	r3, #0
 80005d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	4619      	mov	r1, r3
 80005e0:	4829      	ldr	r0, [pc, #164]	; (8000688 <MX_GPIO_Init+0x1b4>)
 80005e2:	f000 fe47 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 80005e6:	2332      	movs	r3, #50	; 0x32
 80005e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005ea:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80005ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005f4:	f107 031c 	add.w	r3, r7, #28
 80005f8:	4619      	mov	r1, r3
 80005fa:	4823      	ldr	r0, [pc, #140]	; (8000688 <MX_GPIO_Init+0x1b4>)
 80005fc:	f000 fe3a 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000600:	2301      	movs	r3, #1
 8000602:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000610:	f107 031c 	add.w	r3, r7, #28
 8000614:	4619      	mov	r1, r3
 8000616:	481d      	ldr	r0, [pc, #116]	; (800068c <MX_GPIO_Init+0x1b8>)
 8000618:	f000 fe2c 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UButton_Pin;
 800061c:	2301      	movs	r3, #1
 800061e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000620:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000624:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UButton_GPIO_Port, &GPIO_InitStruct);
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	4818      	ldr	r0, [pc, #96]	; (8000694 <MX_GPIO_Init+0x1c0>)
 8000632:	f000 fe1f 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000636:	f24f 0310 	movw	r3, #61456	; 0xf010
 800063a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4619      	mov	r1, r3
 800064e:	4810      	ldr	r0, [pc, #64]	; (8000690 <MX_GPIO_Init+0x1bc>)
 8000650:	f000 fe10 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000654:	2320      	movs	r3, #32
 8000656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000658:	2300      	movs	r3, #0
 800065a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4619      	mov	r1, r3
 8000666:	480a      	ldr	r0, [pc, #40]	; (8000690 <MX_GPIO_Init+0x1bc>)
 8000668:	f000 fe04 	bl	8001274 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	2100      	movs	r1, #0
 8000670:	2006      	movs	r0, #6
 8000672:	f000 fdaf 	bl	80011d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000676:	2006      	movs	r0, #6
 8000678:	f000 fdd8 	bl	800122c <HAL_NVIC_EnableIRQ>

}
 800067c:	bf00      	nop
 800067e:	3730      	adds	r7, #48	; 0x30
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40021000 	.word	0x40021000
 800068c:	40020800 	.word	0x40020800
 8000690:	40020c00 	.word	0x40020c00
 8000694:	40020000 	.word	0x40020000

08000698 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_I2C1_Init+0x50>)
 800069e:	4a13      	ldr	r2, [pc, #76]	; (80006ec <MX_I2C1_Init+0x54>)
 80006a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006a4:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MX_I2C1_Init+0x58>)
 80006a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006bc:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_I2C1_Init+0x50>)
 80006d6:	f002 fcef 	bl	80030b8 <HAL_I2C_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006e0:	f000 fa8e 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000a4 	.word	0x200000a4
 80006ec:	40005400 	.word	0x40005400
 80006f0:	000186a0 	.word	0x000186a0

080006f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	; 0x28
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a19      	ldr	r2, [pc, #100]	; (8000778 <HAL_I2C_MspInit+0x84>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d12c      	bne.n	8000770 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <HAL_I2C_MspInit+0x88>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a17      	ldr	r2, [pc, #92]	; (800077c <HAL_I2C_MspInit+0x88>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <HAL_I2C_MspInit+0x88>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000732:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000738:	2312      	movs	r3, #18
 800073a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800073c:	2301      	movs	r3, #1
 800073e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000744:	2304      	movs	r3, #4
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	480c      	ldr	r0, [pc, #48]	; (8000780 <HAL_I2C_MspInit+0x8c>)
 8000750:	f000 fd90 	bl	8001274 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <HAL_I2C_MspInit+0x88>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a07      	ldr	r2, [pc, #28]	; (800077c <HAL_I2C_MspInit+0x88>)
 800075e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <HAL_I2C_MspInit+0x88>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	; 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40005400 	.word	0x40005400
 800077c:	40023800 	.word	0x40023800
 8000780:	40020400 	.word	0x40020400

08000784 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_I2S2_Init+0x50>)
 800078a:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <MX_I2S2_Init+0x54>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_I2S2_Init+0x50>)
 8000790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000794:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_I2S2_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800079c:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <MX_I2S2_Init+0x50>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_I2S2_Init+0x50>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <MX_I2S2_Init+0x50>)
 80007aa:	4a0c      	ldr	r2, [pc, #48]	; (80007dc <MX_I2S2_Init+0x58>)
 80007ac:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_I2S2_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <MX_I2S2_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_I2S2_Init+0x50>)
 80007bc:	2201      	movs	r2, #1
 80007be:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_I2S2_Init+0x50>)
 80007c2:	f002 fe45 	bl	8003450 <HAL_I2S_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 80007cc:	f000 fa18 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000f8 	.word	0x200000f8
 80007d8:	40003800 	.word	0x40003800
 80007dc:	00017700 	.word	0x00017700

080007e0 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <MX_I2S3_Init+0x54>)
 80007e6:	4a14      	ldr	r2, [pc, #80]	; (8000838 <MX_I2S3_Init+0x58>)
 80007e8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_I2S3_Init+0x54>)
 80007ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007f2:	4b10      	ldr	r3, [pc, #64]	; (8000834 <MX_I2S3_Init+0x54>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007f8:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_I2S3_Init+0x54>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <MX_I2S3_Init+0x54>)
 8000800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000804:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_I2S3_Init+0x54>)
 8000808:	4a0c      	ldr	r2, [pc, #48]	; (800083c <MX_I2S3_Init+0x5c>)
 800080a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_I2S3_Init+0x54>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000812:	4b08      	ldr	r3, [pc, #32]	; (8000834 <MX_I2S3_Init+0x54>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <MX_I2S3_Init+0x54>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <MX_I2S3_Init+0x54>)
 8000820:	f002 fe16 	bl	8003450 <HAL_I2S_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800082a:	f000 f9e9 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000140 	.word	0x20000140
 8000838:	40003c00 	.word	0x40003c00
 800083c:	00017700 	.word	0x00017700

08000840 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08e      	sub	sp, #56	; 0x38
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a59      	ldr	r2, [pc, #356]	; (80009c4 <HAL_I2S_MspInit+0x184>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d15b      	bne.n	800091a <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
 8000866:	4b58      	ldr	r3, [pc, #352]	; (80009c8 <HAL_I2S_MspInit+0x188>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	4a57      	ldr	r2, [pc, #348]	; (80009c8 <HAL_I2S_MspInit+0x188>)
 800086c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000870:	6413      	str	r3, [r2, #64]	; 0x40
 8000872:	4b55      	ldr	r3, [pc, #340]	; (80009c8 <HAL_I2S_MspInit+0x188>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087a:	623b      	str	r3, [r7, #32]
 800087c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
 8000882:	4b51      	ldr	r3, [pc, #324]	; (80009c8 <HAL_I2S_MspInit+0x188>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a50      	ldr	r2, [pc, #320]	; (80009c8 <HAL_I2S_MspInit+0x188>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b4e      	ldr	r3, [pc, #312]	; (80009c8 <HAL_I2S_MspInit+0x188>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	61fb      	str	r3, [r7, #28]
 8000898:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]
 800089e:	4b4a      	ldr	r3, [pc, #296]	; (80009c8 <HAL_I2S_MspInit+0x188>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a49      	ldr	r2, [pc, #292]	; (80009c8 <HAL_I2S_MspInit+0x188>)
 80008a4:	f043 0302 	orr.w	r3, r3, #2
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b47      	ldr	r3, [pc, #284]	; (80009c8 <HAL_I2S_MspInit+0x188>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	61bb      	str	r3, [r7, #24]
 80008b4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008b6:	2304      	movs	r3, #4
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80008c6:	2306      	movs	r3, #6
 80008c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ce:	4619      	mov	r1, r3
 80008d0:	483e      	ldr	r0, [pc, #248]	; (80009cc <HAL_I2S_MspInit+0x18c>)
 80008d2:	f000 fccf 	bl	8001274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008d6:	2308      	movs	r3, #8
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e6:	2305      	movs	r3, #5
 80008e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ee:	4619      	mov	r1, r3
 80008f0:	4836      	ldr	r0, [pc, #216]	; (80009cc <HAL_I2S_MspInit+0x18c>)
 80008f2:	f000 fcbf 	bl	8001274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80008f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000908:	2305      	movs	r3, #5
 800090a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	4619      	mov	r1, r3
 8000912:	482f      	ldr	r0, [pc, #188]	; (80009d0 <HAL_I2S_MspInit+0x190>)
 8000914:	f000 fcae 	bl	8001274 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000918:	e04f      	b.n	80009ba <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a2d      	ldr	r2, [pc, #180]	; (80009d4 <HAL_I2S_MspInit+0x194>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d14a      	bne.n	80009ba <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <HAL_I2S_MspInit+0x188>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	4a26      	ldr	r2, [pc, #152]	; (80009c8 <HAL_I2S_MspInit+0x188>)
 800092e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000932:	6413      	str	r3, [r2, #64]	; 0x40
 8000934:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <HAL_I2S_MspInit+0x188>)
 8000936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <HAL_I2S_MspInit+0x188>)
 8000946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000948:	4a1f      	ldr	r2, [pc, #124]	; (80009c8 <HAL_I2S_MspInit+0x188>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	6313      	str	r3, [r2, #48]	; 0x30
 8000950:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <HAL_I2S_MspInit+0x188>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <HAL_I2S_MspInit+0x188>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000964:	4a18      	ldr	r2, [pc, #96]	; (80009c8 <HAL_I2S_MspInit+0x188>)
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	6313      	str	r3, [r2, #48]	; 0x30
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <HAL_I2S_MspInit+0x188>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000978:	2310      	movs	r3, #16
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000988:	2306      	movs	r3, #6
 800098a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000990:	4619      	mov	r1, r3
 8000992:	4811      	ldr	r0, [pc, #68]	; (80009d8 <HAL_I2S_MspInit+0x198>)
 8000994:	f000 fc6e 	bl	8001274 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000998:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009aa:	2306      	movs	r3, #6
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <HAL_I2S_MspInit+0x18c>)
 80009b6:	f000 fc5d 	bl	8001274 <HAL_GPIO_Init>
}
 80009ba:	bf00      	nop
 80009bc:	3738      	adds	r7, #56	; 0x38
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40003800 	.word	0x40003800
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020800 	.word	0x40020800
 80009d0:	40020400 	.word	0x40020400
 80009d4:	40003c00 	.word	0x40003c00
 80009d8:	40020000 	.word	0x40020000

080009dc <HAL_GPIO_EXTI_Callback>:
uint16_t pins[] = {GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15};
int index = 0;
int direction = 1;
volatile int button_is_pressed = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	80fb      	strh	r3, [r7, #6]
	  if(GPIO_Pin == UButton_Pin)
 80009e6:	88fb      	ldrh	r3, [r7, #6]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d11e      	bne.n	8000a2a <HAL_GPIO_EXTI_Callback+0x4e>
	  {
	    static uint32_t last_change_tick;
	    if(HAL_GetTick() - last_change_tick < 50 )
 80009ec:	f000 fad2 	bl	8000f94 <HAL_GetTick>
 80009f0:	4602      	mov	r2, r0
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <HAL_GPIO_EXTI_Callback+0x54>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	2b31      	cmp	r3, #49	; 0x31
 80009fa:	d915      	bls.n	8000a28 <HAL_GPIO_EXTI_Callback+0x4c>
	    {
	     return;
	    }
	    last_change_tick = HAL_GetTick();
 80009fc:	f000 faca 	bl	8000f94 <HAL_GetTick>
 8000a00:	4603      	mov	r3, r0
 8000a02:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <HAL_GPIO_EXTI_Callback+0x54>)
 8000a04:	6013      	str	r3, [r2, #0]
	    if(button_is_pressed)
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <HAL_GPIO_EXTI_Callback+0x58>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d008      	beq.n	8000a20 <HAL_GPIO_EXTI_Callback+0x44>
	    {
	     button_is_pressed = 0;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_GPIO_EXTI_Callback+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
	     direction = -direction;
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	425b      	negs	r3, r3
 8000a1a:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000a1c:	6013      	str	r3, [r2, #0]
 8000a1e:	e004      	b.n	8000a2a <HAL_GPIO_EXTI_Callback+0x4e>
	    } else {
	     button_is_pressed = 1;
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <HAL_GPIO_EXTI_Callback+0x58>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	e000      	b.n	8000a2a <HAL_GPIO_EXTI_Callback+0x4e>
	     return;
 8000a28:	bf00      	nop
	    }
	  }
}
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000190 	.word	0x20000190
 8000a34:	2000018c 	.word	0x2000018c
 8000a38:	20000008 	.word	0x20000008

08000a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a40:	f000 fa42 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a44:	f000 f854 	bl	8000af0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a48:	f000 f8ba 	bl	8000bc0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4c:	f7ff fd42 	bl	80004d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a50:	f7ff fe22 	bl	8000698 <MX_I2C1_Init>
  MX_I2S2_Init();
 8000a54:	f7ff fe96 	bl	8000784 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000a58:	f7ff fec2 	bl	80007e0 <MX_I2S3_Init>
  MX_USB_HOST_Init();
 8000a5c:	f007 fc1a 	bl	8008294 <MX_USB_HOST_Init>
  MX_SPI1_Init();
 8000a60:	f000 f8de 	bl	8000c20 <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
    {
  	  if (button_is_pressed)
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <main+0xa0>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d007      	beq.n	8000a7c <main+0x40>
  	  {
  		  direction = -direction;
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <main+0xa4>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	425b      	negs	r3, r3
 8000a72:	4a1b      	ldr	r2, [pc, #108]	; (8000ae0 <main+0xa4>)
 8000a74:	6013      	str	r3, [r2, #0]
  		  button_is_pressed = 0;
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <main+0xa0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
  	  }

        HAL_GPIO_TogglePin(GPIOD, pins[index]);
 8000a7c:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <main+0xa8>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <main+0xac>)
 8000a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a86:	4619      	mov	r1, r3
 8000a88:	4818      	ldr	r0, [pc, #96]	; (8000aec <main+0xb0>)
 8000a8a:	f000 febf 	bl	800180c <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 8000a8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a92:	f000 fa8b 	bl	8000fac <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOD, pins[index]);
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <main+0xa8>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <main+0xac>)
 8000a9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4812      	ldr	r0, [pc, #72]	; (8000aec <main+0xb0>)
 8000aa4:	f000 feb2 	bl	800180c <HAL_GPIO_TogglePin>

        index += direction;
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <main+0xa8>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <main+0xa4>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <main+0xa8>)
 8000ab4:	6013      	str	r3, [r2, #0]
        if (index >= 4) index = 0;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <main+0xa8>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b03      	cmp	r3, #3
 8000abc:	dd03      	ble.n	8000ac6 <main+0x8a>
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <main+0xa8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	e006      	b.n	8000ad4 <main+0x98>
        else if (index < 0) index = 3;
 8000ac6:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <main+0xa8>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	da02      	bge.n	8000ad4 <main+0x98>
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <main+0xa8>)
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	601a      	str	r2, [r3, #0]


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000ad4:	f007 fc04 	bl	80082e0 <MX_USB_HOST_Process>
  	  if (button_is_pressed)
 8000ad8:	e7c4      	b.n	8000a64 <main+0x28>
 8000ada:	bf00      	nop
 8000adc:	2000018c 	.word	0x2000018c
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000188 	.word	0x20000188
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	40020c00 	.word	0x40020c00

08000af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b094      	sub	sp, #80	; 0x50
 8000af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af6:	f107 0320 	add.w	r3, r7, #32
 8000afa:	2230      	movs	r2, #48	; 0x30
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f007 ff8c 	bl	8008a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <SystemClock_Config+0xc8>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	4a26      	ldr	r2, [pc, #152]	; (8000bb8 <SystemClock_Config+0xc8>)
 8000b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b22:	6413      	str	r3, [r2, #64]	; 0x40
 8000b24:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <SystemClock_Config+0xc8>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <SystemClock_Config+0xcc>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a20      	ldr	r2, [pc, #128]	; (8000bbc <SystemClock_Config+0xcc>)
 8000b3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <SystemClock_Config+0xcc>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b56:	2302      	movs	r3, #2
 8000b58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b60:	2304      	movs	r3, #4
 8000b62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b64:	23c0      	movs	r3, #192	; 0xc0
 8000b66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b70:	f107 0320 	add.w	r3, r7, #32
 8000b74:	4618      	mov	r0, r3
 8000b76:	f003 f9c9 	bl	8003f0c <HAL_RCC_OscConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b80:	f000 f83e 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b84:	230f      	movs	r3, #15
 8000b86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	2103      	movs	r1, #3
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 fcdb 	bl	800455c <HAL_RCC_ClockConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bac:	f000 f828 	bl	8000c00 <Error_Handler>
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	3750      	adds	r7, #80	; 0x50
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40007000 	.word	0x40007000

08000bc0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
 8000bd4:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000bda:	23c8      	movs	r3, #200	; 0xc8
 8000bdc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000bde:	2305      	movs	r3, #5
 8000be0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000be2:	2302      	movs	r3, #2
 8000be4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be6:	463b      	mov	r3, r7
 8000be8:	4618      	mov	r0, r3
 8000bea:	f003 ff6b 	bl	8004ac4 <HAL_RCCEx_PeriphCLKConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000bf4:	f000 f804 	bl	8000c00 <Error_Handler>
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>

08000c0a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c26:	4a18      	ldr	r2, [pc, #96]	; (8000c88 <MX_SPI1_Init+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c6c:	220a      	movs	r2, #10
 8000c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <MX_SPI1_Init+0x64>)
 8000c72:	f004 f99d 	bl	8004fb0 <HAL_SPI_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c7c:	f7ff ffc0 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000194 	.word	0x20000194
 8000c88:	40013000 	.word	0x40013000

08000c8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a19      	ldr	r2, [pc, #100]	; (8000d10 <HAL_SPI_MspInit+0x84>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d12b      	bne.n	8000d06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <HAL_SPI_MspInit+0x88>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	4a17      	ldr	r2, [pc, #92]	; (8000d14 <HAL_SPI_MspInit+0x88>)
 8000cb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <HAL_SPI_MspInit+0x88>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_SPI_MspInit+0x88>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <HAL_SPI_MspInit+0x88>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_SPI_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|GPIO_PIN_7;
 8000ce6:	23e0      	movs	r3, #224	; 0xe0
 8000ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	; (8000d18 <HAL_SPI_MspInit+0x8c>)
 8000d02:	f000 fab7 	bl	8001274 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000d06:	bf00      	nop
 8000d08:	3728      	adds	r7, #40	; 0x28
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40013000 	.word	0x40013000
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020000 	.word	0x40020000

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5a:	2007      	movs	r0, #7
 8000d5c:	f000 fa1a 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 f8d8 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UButton_Pin);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f000 fd49 	bl	800185c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <OTG_FS_IRQHandler+0x10>)
 8000dd6:	f000 ffcf 	bl	8001d78 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200005d0 	.word	0x200005d0

08000de4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dec:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <_sbrk+0x5c>)
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <_sbrk+0x60>)
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d102      	bne.n	8000e06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e00:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <_sbrk+0x64>)
 8000e02:	4a12      	ldr	r2, [pc, #72]	; (8000e4c <_sbrk+0x68>)
 8000e04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e06:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d207      	bcs.n	8000e24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e14:	f007 fe1a 	bl	8008a4c <__errno>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	220c      	movs	r2, #12
 8000e1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e22:	e009      	b.n	8000e38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <_sbrk+0x64>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4413      	add	r3, r2
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <_sbrk+0x64>)
 8000e34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e36:	68fb      	ldr	r3, [r7, #12]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20020000 	.word	0x20020000
 8000e44:	00000400 	.word	0x00000400
 8000e48:	200001ec 	.word	0x200001ec
 8000e4c:	20000a20 	.word	0x20000a20

08000e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <SystemInit+0x20>)
 8000e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <SystemInit+0x20>)
 8000e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e7a:	490e      	ldr	r1, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e7c:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e90:	4c0b      	ldr	r4, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e9e:	f7ff ffd7 	bl	8000e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f007 fdd9 	bl	8008a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea6:	f7ff fdc9 	bl	8000a3c <main>
  bx  lr    
 8000eaa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000eb8:	08008d4c 	.word	0x08008d4c
  ldr r2, =_sbss
 8000ebc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000ec0:	20000a1c 	.word	0x20000a1c

08000ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>
	...

08000ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <HAL_Init+0x40>)
 8000ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_Init+0x40>)
 8000ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_Init+0x40>)
 8000eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f94f 	bl	8001194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f808 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff ff0e 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f996 	bl	800125c <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f48:	f000 f944 	bl	80011d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	2000000c 	.word	0x2000000c
 8000f64:	20000014 	.word	0x20000014
 8000f68:	20000010 	.word	0x20000010

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000014 	.word	0x20000014
 8000f90:	200001f0 	.word	0x200001f0

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	200001f0 	.word	0x200001f0

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff ffee 	bl	8000f94 <HAL_GetTick>
 8000fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fc4:	d005      	beq.n	8000fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_Delay+0x44>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd2:	bf00      	nop
 8000fd4:	f7ff ffde 	bl	8000f94 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d8f7      	bhi.n	8000fd4 <HAL_Delay+0x28>
  {
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000014 	.word	0x20000014

08000ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001010:	4013      	ands	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800101c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001026:	4a04      	ldr	r2, [pc, #16]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	60d3      	str	r3, [r2, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <__NVIC_GetPriorityGrouping+0x18>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	f003 0307 	and.w	r3, r3, #7
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	2b00      	cmp	r3, #0
 8001068:	db0b      	blt.n	8001082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	f003 021f 	and.w	r2, r3, #31
 8001070:	4907      	ldr	r1, [pc, #28]	; (8001090 <__NVIC_EnableIRQ+0x38>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	2001      	movs	r0, #1
 800107a:	fa00 f202 	lsl.w	r2, r0, r2
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	e000e100 	.word	0xe000e100

08001094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db0a      	blt.n	80010be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	490c      	ldr	r1, [pc, #48]	; (80010e0 <__NVIC_SetPriority+0x4c>)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	0112      	lsls	r2, r2, #4
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	440b      	add	r3, r1
 80010b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010bc:	e00a      	b.n	80010d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4908      	ldr	r1, [pc, #32]	; (80010e4 <__NVIC_SetPriority+0x50>)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	f003 030f 	and.w	r3, r3, #15
 80010ca:	3b04      	subs	r3, #4
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	440b      	add	r3, r1
 80010d2:	761a      	strb	r2, [r3, #24]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000e100 	.word	0xe000e100
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	; 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f1c3 0307 	rsb	r3, r3, #7
 8001102:	2b04      	cmp	r3, #4
 8001104:	bf28      	it	cs
 8001106:	2304      	movcs	r3, #4
 8001108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3304      	adds	r3, #4
 800110e:	2b06      	cmp	r3, #6
 8001110:	d902      	bls.n	8001118 <NVIC_EncodePriority+0x30>
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3b03      	subs	r3, #3
 8001116:	e000      	b.n	800111a <NVIC_EncodePriority+0x32>
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43da      	mvns	r2, r3
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	401a      	ands	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001130:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	fa01 f303 	lsl.w	r3, r1, r3
 800113a:	43d9      	mvns	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	4313      	orrs	r3, r2
         );
}
 8001142:	4618      	mov	r0, r3
 8001144:	3724      	adds	r7, #36	; 0x24
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001160:	d301      	bcc.n	8001166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001162:	2301      	movs	r3, #1
 8001164:	e00f      	b.n	8001186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <SysTick_Config+0x40>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116e:	210f      	movs	r1, #15
 8001170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001174:	f7ff ff8e 	bl	8001094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <SysTick_Config+0x40>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	4b04      	ldr	r3, [pc, #16]	; (8001190 <SysTick_Config+0x40>)
 8001180:	2207      	movs	r2, #7
 8001182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	e000e010 	.word	0xe000e010

08001194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b07      	cmp	r3, #7
 80011a0:	d00f      	beq.n	80011c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b06      	cmp	r3, #6
 80011a6:	d00c      	beq.n	80011c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b05      	cmp	r3, #5
 80011ac:	d009      	beq.n	80011c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	d006      	beq.n	80011c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d003      	beq.n	80011c2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011ba:	2190      	movs	r1, #144	; 0x90
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80011be:	f7ff fd24 	bl	8000c0a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ff16 	bl	8000ff4 <__NVIC_SetPriorityGrouping>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	08008b54 	.word	0x08008b54

080011d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d903      	bls.n	80011f4 <HAL_NVIC_SetPriority+0x20>
 80011ec:	21a8      	movs	r1, #168	; 0xa8
 80011ee:	480e      	ldr	r0, [pc, #56]	; (8001228 <HAL_NVIC_SetPriority+0x54>)
 80011f0:	f7ff fd0b 	bl	8000c0a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	2b0f      	cmp	r3, #15
 80011f8:	d903      	bls.n	8001202 <HAL_NVIC_SetPriority+0x2e>
 80011fa:	21a9      	movs	r1, #169	; 0xa9
 80011fc:	480a      	ldr	r0, [pc, #40]	; (8001228 <HAL_NVIC_SetPriority+0x54>)
 80011fe:	f7ff fd04 	bl	8000c0a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001202:	f7ff ff1b 	bl	800103c <__NVIC_GetPriorityGrouping>
 8001206:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	68b9      	ldr	r1, [r7, #8]
 800120c:	6978      	ldr	r0, [r7, #20]
 800120e:	f7ff ff6b 	bl	80010e8 <NVIC_EncodePriority>
 8001212:	4602      	mov	r2, r0
 8001214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff3a 	bl	8001094 <__NVIC_SetPriority>
}
 8001220:	bf00      	nop
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	08008b54 	.word	0x08008b54

0800122c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	2b00      	cmp	r3, #0
 800123c:	da03      	bge.n	8001246 <HAL_NVIC_EnableIRQ+0x1a>
 800123e:	21bc      	movs	r1, #188	; 0xbc
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <HAL_NVIC_EnableIRQ+0x2c>)
 8001242:	f7ff fce2 	bl	8000c0a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff04 	bl	8001058 <__NVIC_EnableIRQ>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	08008b54 	.word	0x08008b54

0800125c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff73 	bl	8001150 <SysTick_Config>
 800126a:	4603      	mov	r3, r0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a33      	ldr	r2, [pc, #204]	; (800135c <HAL_GPIO_Init+0xe8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d017      	beq.n	80012c2 <HAL_GPIO_Init+0x4e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a32      	ldr	r2, [pc, #200]	; (8001360 <HAL_GPIO_Init+0xec>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d013      	beq.n	80012c2 <HAL_GPIO_Init+0x4e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a31      	ldr	r2, [pc, #196]	; (8001364 <HAL_GPIO_Init+0xf0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00f      	beq.n	80012c2 <HAL_GPIO_Init+0x4e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a30      	ldr	r2, [pc, #192]	; (8001368 <HAL_GPIO_Init+0xf4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d00b      	beq.n	80012c2 <HAL_GPIO_Init+0x4e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a2f      	ldr	r2, [pc, #188]	; (800136c <HAL_GPIO_Init+0xf8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d007      	beq.n	80012c2 <HAL_GPIO_Init+0x4e>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a2e      	ldr	r2, [pc, #184]	; (8001370 <HAL_GPIO_Init+0xfc>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x4e>
 80012ba:	21ac      	movs	r1, #172	; 0xac
 80012bc:	482d      	ldr	r0, [pc, #180]	; (8001374 <HAL_GPIO_Init+0x100>)
 80012be:	f7ff fca4 	bl	8000c0a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <HAL_GPIO_Init+0x64>
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	0c1b      	lsrs	r3, r3, #16
 80012d2:	041b      	lsls	r3, r3, #16
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x6c>
 80012d8:	21ad      	movs	r1, #173	; 0xad
 80012da:	4826      	ldr	r0, [pc, #152]	; (8001374 <HAL_GPIO_Init+0x100>)
 80012dc:	f7ff fc95 	bl	8000c0a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d035      	beq.n	8001354 <HAL_GPIO_Init+0xe0>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d031      	beq.n	8001354 <HAL_GPIO_Init+0xe0>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b11      	cmp	r3, #17
 80012f6:	d02d      	beq.n	8001354 <HAL_GPIO_Init+0xe0>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d029      	beq.n	8001354 <HAL_GPIO_Init+0xe0>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b12      	cmp	r3, #18
 8001306:	d025      	beq.n	8001354 <HAL_GPIO_Init+0xe0>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001310:	d020      	beq.n	8001354 <HAL_GPIO_Init+0xe0>
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800131a:	d01b      	beq.n	8001354 <HAL_GPIO_Init+0xe0>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8001324:	d016      	beq.n	8001354 <HAL_GPIO_Init+0xe0>
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800132e:	d011      	beq.n	8001354 <HAL_GPIO_Init+0xe0>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001338:	d00c      	beq.n	8001354 <HAL_GPIO_Init+0xe0>
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8001342:	d007      	beq.n	8001354 <HAL_GPIO_Init+0xe0>
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b03      	cmp	r3, #3
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0xe0>
 800134c:	21ae      	movs	r1, #174	; 0xae
 800134e:	4809      	ldr	r0, [pc, #36]	; (8001374 <HAL_GPIO_Init+0x100>)
 8001350:	f7ff fc5b 	bl	8000c0a <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	e20c      	b.n	8001774 <HAL_GPIO_Init+0x500>
 800135a:	bf00      	nop
 800135c:	40020000 	.word	0x40020000
 8001360:	40020400 	.word	0x40020400
 8001364:	40020800 	.word	0x40020800
 8001368:	40020c00 	.word	0x40020c00
 800136c:	40021000 	.word	0x40021000
 8001370:	40021c00 	.word	0x40021c00
 8001374:	08008b90 	.word	0x08008b90
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001378:	2201      	movs	r2, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	429a      	cmp	r2, r3
 8001392:	f040 81ec 	bne.w	800176e <HAL_GPIO_Init+0x4fa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d005      	beq.n	80013ae <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d144      	bne.n	8001438 <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00f      	beq.n	80013d6 <HAL_GPIO_Init+0x162>
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d00b      	beq.n	80013d6 <HAL_GPIO_Init+0x162>
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d007      	beq.n	80013d6 <HAL_GPIO_Init+0x162>
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x162>
 80013ce:	21c0      	movs	r1, #192	; 0xc0
 80013d0:	4884      	ldr	r0, [pc, #528]	; (80015e4 <HAL_GPIO_Init+0x370>)
 80013d2:	f7ff fc1a 	bl	8000c0a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	2203      	movs	r2, #3
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800140c:	2201      	movs	r2, #1
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	091b      	lsrs	r3, r3, #4
 8001422:	f003 0201 	and.w	r2, r3, #1
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b03      	cmp	r3, #3
 8001442:	d027      	beq.n	8001494 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00b      	beq.n	8001464 <HAL_GPIO_Init+0x1f0>
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d007      	beq.n	8001464 <HAL_GPIO_Init+0x1f0>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x1f0>
 800145c:	21d1      	movs	r1, #209	; 0xd1
 800145e:	4861      	ldr	r0, [pc, #388]	; (80015e4 <HAL_GPIO_Init+0x370>)
 8001460:	f7ff fbd3 	bl	8000c0a <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	2203      	movs	r2, #3
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	2b02      	cmp	r3, #2
 800149e:	f040 80a3 	bne.w	80015e8 <HAL_GPIO_Init+0x374>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d077      	beq.n	800159a <HAL_GPIO_Init+0x326>
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	2b09      	cmp	r3, #9
 80014b0:	d073      	beq.n	800159a <HAL_GPIO_Init+0x326>
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d06f      	beq.n	800159a <HAL_GPIO_Init+0x326>
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d06b      	beq.n	800159a <HAL_GPIO_Init+0x326>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d067      	beq.n	800159a <HAL_GPIO_Init+0x326>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d063      	beq.n	800159a <HAL_GPIO_Init+0x326>
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d05f      	beq.n	800159a <HAL_GPIO_Init+0x326>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d05b      	beq.n	800159a <HAL_GPIO_Init+0x326>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d057      	beq.n	800159a <HAL_GPIO_Init+0x326>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d053      	beq.n	800159a <HAL_GPIO_Init+0x326>
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d04f      	beq.n	800159a <HAL_GPIO_Init+0x326>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	2b04      	cmp	r3, #4
 8001500:	d04b      	beq.n	800159a <HAL_GPIO_Init+0x326>
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	2b04      	cmp	r3, #4
 8001508:	d047      	beq.n	800159a <HAL_GPIO_Init+0x326>
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	2b04      	cmp	r3, #4
 8001510:	d043      	beq.n	800159a <HAL_GPIO_Init+0x326>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	2b05      	cmp	r3, #5
 8001518:	d03f      	beq.n	800159a <HAL_GPIO_Init+0x326>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	2b05      	cmp	r3, #5
 8001520:	d03b      	beq.n	800159a <HAL_GPIO_Init+0x326>
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	2b05      	cmp	r3, #5
 8001528:	d037      	beq.n	800159a <HAL_GPIO_Init+0x326>
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	2b06      	cmp	r3, #6
 8001530:	d033      	beq.n	800159a <HAL_GPIO_Init+0x326>
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	2b06      	cmp	r3, #6
 8001538:	d02f      	beq.n	800159a <HAL_GPIO_Init+0x326>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	2b05      	cmp	r3, #5
 8001540:	d02b      	beq.n	800159a <HAL_GPIO_Init+0x326>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	2b06      	cmp	r3, #6
 8001548:	d027      	beq.n	800159a <HAL_GPIO_Init+0x326>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	2b07      	cmp	r3, #7
 8001550:	d023      	beq.n	800159a <HAL_GPIO_Init+0x326>
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b07      	cmp	r3, #7
 8001558:	d01f      	beq.n	800159a <HAL_GPIO_Init+0x326>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	2b07      	cmp	r3, #7
 8001560:	d01b      	beq.n	800159a <HAL_GPIO_Init+0x326>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	2b08      	cmp	r3, #8
 8001568:	d017      	beq.n	800159a <HAL_GPIO_Init+0x326>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	2b0a      	cmp	r3, #10
 8001570:	d013      	beq.n	800159a <HAL_GPIO_Init+0x326>
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	2b09      	cmp	r3, #9
 8001578:	d00f      	beq.n	800159a <HAL_GPIO_Init+0x326>
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	2b09      	cmp	r3, #9
 8001580:	d00b      	beq.n	800159a <HAL_GPIO_Init+0x326>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	2b0c      	cmp	r3, #12
 8001588:	d007      	beq.n	800159a <HAL_GPIO_Init+0x326>
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	2b0f      	cmp	r3, #15
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x326>
 8001592:	21de      	movs	r1, #222	; 0xde
 8001594:	4813      	ldr	r0, [pc, #76]	; (80015e4 <HAL_GPIO_Init+0x370>)
 8001596:	f7ff fb38 	bl	8000c0a <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	08da      	lsrs	r2, r3, #3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3208      	adds	r2, #8
 80015a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	220f      	movs	r2, #15
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	691a      	ldr	r2, [r3, #16]
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	f003 0307 	and.w	r3, r3, #7
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	08da      	lsrs	r2, r3, #3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3208      	adds	r2, #8
 80015dc:	69b9      	ldr	r1, [r7, #24]
 80015de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80015e2:	e001      	b.n	80015e8 <HAL_GPIO_Init+0x374>
 80015e4:	08008b90 	.word	0x08008b90
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0203 	and.w	r2, r3, #3
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80a2 	beq.w	800176e <HAL_GPIO_Init+0x4fa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b56      	ldr	r3, [pc, #344]	; (8001788 <HAL_GPIO_Init+0x514>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a55      	ldr	r2, [pc, #340]	; (8001788 <HAL_GPIO_Init+0x514>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	4b53      	ldr	r3, [pc, #332]	; (8001788 <HAL_GPIO_Init+0x514>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001646:	4a51      	ldr	r2, [pc, #324]	; (800178c <HAL_GPIO_Init+0x518>)
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	3302      	adds	r3, #2
 800164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	220f      	movs	r2, #15
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a48      	ldr	r2, [pc, #288]	; (8001790 <HAL_GPIO_Init+0x51c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d019      	beq.n	80016a6 <HAL_GPIO_Init+0x432>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a47      	ldr	r2, [pc, #284]	; (8001794 <HAL_GPIO_Init+0x520>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d013      	beq.n	80016a2 <HAL_GPIO_Init+0x42e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a46      	ldr	r2, [pc, #280]	; (8001798 <HAL_GPIO_Init+0x524>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d00d      	beq.n	800169e <HAL_GPIO_Init+0x42a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a45      	ldr	r2, [pc, #276]	; (800179c <HAL_GPIO_Init+0x528>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d007      	beq.n	800169a <HAL_GPIO_Init+0x426>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a44      	ldr	r2, [pc, #272]	; (80017a0 <HAL_GPIO_Init+0x52c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d101      	bne.n	8001696 <HAL_GPIO_Init+0x422>
 8001692:	2304      	movs	r3, #4
 8001694:	e008      	b.n	80016a8 <HAL_GPIO_Init+0x434>
 8001696:	2307      	movs	r3, #7
 8001698:	e006      	b.n	80016a8 <HAL_GPIO_Init+0x434>
 800169a:	2303      	movs	r3, #3
 800169c:	e004      	b.n	80016a8 <HAL_GPIO_Init+0x434>
 800169e:	2302      	movs	r3, #2
 80016a0:	e002      	b.n	80016a8 <HAL_GPIO_Init+0x434>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <HAL_GPIO_Init+0x434>
 80016a6:	2300      	movs	r3, #0
 80016a8:	69fa      	ldr	r2, [r7, #28]
 80016aa:	f002 0203 	and.w	r2, r2, #3
 80016ae:	0092      	lsls	r2, r2, #2
 80016b0:	4093      	lsls	r3, r2
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016b8:	4934      	ldr	r1, [pc, #208]	; (800178c <HAL_GPIO_Init+0x518>)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	3302      	adds	r3, #2
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016c6:	4b37      	ldr	r3, [pc, #220]	; (80017a4 <HAL_GPIO_Init+0x530>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_Init+0x476>
        {
          temp |= iocurrent;
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ea:	4a2e      	ldr	r2, [pc, #184]	; (80017a4 <HAL_GPIO_Init+0x530>)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016f0:	4b2c      	ldr	r3, [pc, #176]	; (80017a4 <HAL_GPIO_Init+0x530>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_Init+0x4a0>
        {
          temp |= iocurrent;
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001714:	4a23      	ldr	r2, [pc, #140]	; (80017a4 <HAL_GPIO_Init+0x530>)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800171a:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <HAL_GPIO_Init+0x530>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x4ca>
        {
          temp |= iocurrent;
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800173e:	4a19      	ldr	r2, [pc, #100]	; (80017a4 <HAL_GPIO_Init+0x530>)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001744:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <HAL_GPIO_Init+0x530>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x4f4>
        {
          temp |= iocurrent;
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001768:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <HAL_GPIO_Init+0x530>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3301      	adds	r3, #1
 8001772:	61fb      	str	r3, [r7, #28]
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	2b0f      	cmp	r3, #15
 8001778:	f67f adfe 	bls.w	8001378 <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3720      	adds	r7, #32
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800
 800178c:	40013800 	.word	0x40013800
 8001790:	40020000 	.word	0x40020000
 8001794:	40020400 	.word	0x40020400
 8001798:	40020800 	.word	0x40020800
 800179c:	40020c00 	.word	0x40020c00
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40013c00 	.word	0x40013c00

080017a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	807b      	strh	r3, [r7, #2]
 80017b4:	4613      	mov	r3, r2
 80017b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80017b8:	887b      	ldrh	r3, [r7, #2]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d004      	beq.n	80017c8 <HAL_GPIO_WritePin+0x20>
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	0c1b      	lsrs	r3, r3, #16
 80017c2:	041b      	lsls	r3, r3, #16
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <HAL_GPIO_WritePin+0x2a>
 80017c8:	f240 119d 	movw	r1, #413	; 0x19d
 80017cc:	480e      	ldr	r0, [pc, #56]	; (8001808 <HAL_GPIO_WritePin+0x60>)
 80017ce:	f7ff fa1c 	bl	8000c0a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80017d2:	787b      	ldrb	r3, [r7, #1]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d007      	beq.n	80017e8 <HAL_GPIO_WritePin+0x40>
 80017d8:	787b      	ldrb	r3, [r7, #1]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d004      	beq.n	80017e8 <HAL_GPIO_WritePin+0x40>
 80017de:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80017e2:	4809      	ldr	r0, [pc, #36]	; (8001808 <HAL_GPIO_WritePin+0x60>)
 80017e4:	f7ff fa11 	bl	8000c0a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80017e8:	787b      	ldrb	r3, [r7, #1]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017f4:	e003      	b.n	80017fe <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017f6:	887b      	ldrh	r3, [r7, #2]
 80017f8:	041a      	lsls	r2, r3, #16
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	619a      	str	r2, [r3, #24]
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	08008b90 	.word	0x08008b90

0800180c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001818:	887b      	ldrh	r3, [r7, #2]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d004      	beq.n	8001828 <HAL_GPIO_TogglePin+0x1c>
 800181e:	887b      	ldrh	r3, [r7, #2]
 8001820:	0c1b      	lsrs	r3, r3, #16
 8001822:	041b      	lsls	r3, r3, #16
 8001824:	2b00      	cmp	r3, #0
 8001826:	d004      	beq.n	8001832 <HAL_GPIO_TogglePin+0x26>
 8001828:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800182c:	480a      	ldr	r0, [pc, #40]	; (8001858 <HAL_GPIO_TogglePin+0x4c>)
 800182e:	f7ff f9ec 	bl	8000c0a <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001838:	887a      	ldrh	r2, [r7, #2]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4013      	ands	r3, r2
 800183e:	041a      	lsls	r2, r3, #16
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	43d9      	mvns	r1, r3
 8001844:	887b      	ldrh	r3, [r7, #2]
 8001846:	400b      	ands	r3, r1
 8001848:	431a      	orrs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	619a      	str	r2, [r3, #24]
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	08008b90 	.word	0x08008b90

0800185c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d006      	beq.n	8001880 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff f8ae 	bl	80009dc <HAL_GPIO_EXTI_Callback>
  }
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40013c00 	.word	0x40013c00

0800188c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800188c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188e:	b08f      	sub	sp, #60	; 0x3c
 8001890:	af0a      	add	r7, sp, #40	; 0x28
 8001892:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e05d      	b.n	800195a <HAL_HCD_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018a6:	d003      	beq.n	80018b0 <HAL_HCD_Init+0x24>
 80018a8:	2179      	movs	r1, #121	; 0x79
 80018aa:	482e      	ldr	r0, [pc, #184]	; (8001964 <HAL_HCD_Init+0xd8>)
 80018ac:	f7ff f9ad 	bl	8000c0a <assert_failed>

  USBx = hhcd->Instance;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d106      	bne.n	80018d0 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f006 fd40 	bl	8008350 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2203      	movs	r2, #3
 80018d4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <HAL_HCD_Init+0x5e>
  {
    hhcd->Init.dma_enable = 0U;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f003 fd6c 	bl	80053cc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	687e      	ldr	r6, [r7, #4]
 80018fc:	466d      	mov	r5, sp
 80018fe:	f106 0410 	add.w	r4, r6, #16
 8001902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800190a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800190e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001912:	1d33      	adds	r3, r6, #4
 8001914:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001916:	6838      	ldr	r0, [r7, #0]
 8001918:	f003 fce6 	bl	80052e8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2101      	movs	r1, #1
 8001922:	4618      	mov	r0, r3
 8001924:	f003 fd63 	bl	80053ee <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	603b      	str	r3, [r7, #0]
 800192e:	687e      	ldr	r6, [r7, #4]
 8001930:	466d      	mov	r5, sp
 8001932:	f106 0410 	add.w	r4, r6, #16
 8001936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800193a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800193c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800193e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001942:	e885 0003 	stmia.w	r5, {r0, r1}
 8001946:	1d33      	adds	r3, r6, #4
 8001948:	cb0e      	ldmia	r3, {r1, r2, r3}
 800194a:	6838      	ldr	r0, [r7, #0]
 800194c:	f003 feec 	bl	8005728 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001962:	bf00      	nop
 8001964:	08008bcc 	.word	0x08008bcc

08001968 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b089      	sub	sp, #36	; 0x24
 800196c:	af04      	add	r7, sp, #16
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	4608      	mov	r0, r1
 8001972:	4611      	mov	r1, r2
 8001974:	461a      	mov	r2, r3
 8001976:	4603      	mov	r3, r0
 8001978:	70fb      	strb	r3, [r7, #3]
 800197a:	460b      	mov	r3, r1
 800197c:	70bb      	strb	r3, [r7, #2]
 800197e:	4613      	mov	r3, r2
 8001980:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_HCD_HC_Init+0x28>
 800198c:	2302      	movs	r3, #2
 800198e:	e076      	b.n	8001a7e <HAL_HCD_HC_Init+0x116>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	212c      	movs	r1, #44	; 0x2c
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	333d      	adds	r3, #61	; 0x3d
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	212c      	movs	r1, #44	; 0x2c
 80019b0:	fb01 f303 	mul.w	r3, r1, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	3338      	adds	r3, #56	; 0x38
 80019b8:	787a      	ldrb	r2, [r7, #1]
 80019ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	212c      	movs	r1, #44	; 0x2c
 80019c2:	fb01 f303 	mul.w	r3, r1, r3
 80019c6:	4413      	add	r3, r2
 80019c8:	3340      	adds	r3, #64	; 0x40
 80019ca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80019cc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	212c      	movs	r1, #44	; 0x2c
 80019d4:	fb01 f303 	mul.w	r3, r1, r3
 80019d8:	4413      	add	r3, r2
 80019da:	3339      	adds	r3, #57	; 0x39
 80019dc:	78fa      	ldrb	r2, [r7, #3]
 80019de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	212c      	movs	r1, #44	; 0x2c
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	333f      	adds	r3, #63	; 0x3f
 80019ee:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80019f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	78ba      	ldrb	r2, [r7, #2]
 80019f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80019fc:	b2d0      	uxtb	r0, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	212c      	movs	r1, #44	; 0x2c
 8001a02:	fb01 f303 	mul.w	r3, r1, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	333a      	adds	r3, #58	; 0x3a
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001a0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	da09      	bge.n	8001a2a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001a16:	78fb      	ldrb	r3, [r7, #3]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	212c      	movs	r1, #44	; 0x2c
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	333b      	adds	r3, #59	; 0x3b
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]
 8001a28:	e008      	b.n	8001a3c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	212c      	movs	r1, #44	; 0x2c
 8001a30:	fb01 f303 	mul.w	r3, r1, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	333b      	adds	r3, #59	; 0x3b
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	212c      	movs	r1, #44	; 0x2c
 8001a42:	fb01 f303 	mul.w	r3, r1, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	333c      	adds	r3, #60	; 0x3c
 8001a4a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a4e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	787c      	ldrb	r4, [r7, #1]
 8001a56:	78ba      	ldrb	r2, [r7, #2]
 8001a58:	78f9      	ldrb	r1, [r7, #3]
 8001a5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a5c:	9302      	str	r3, [sp, #8]
 8001a5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	4623      	mov	r3, r4
 8001a6c:	f003 ffe2 	bl	8005a34 <USB_HC_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd90      	pop	{r4, r7, pc}

08001a86 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_HCD_HC_Halt+0x1e>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e00f      	b.n	8001ac4 <HAL_HCD_HC_Halt+0x3e>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	78fa      	ldrb	r2, [r7, #3]
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f004 fa32 	bl	8005f1e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	4608      	mov	r0, r1
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4603      	mov	r3, r0
 8001adc:	70fb      	strb	r3, [r7, #3]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	70bb      	strb	r3, [r7, #2]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	212c      	movs	r1, #44	; 0x2c
 8001aec:	fb01 f303 	mul.w	r3, r1, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	333b      	adds	r3, #59	; 0x3b
 8001af4:	78ba      	ldrb	r2, [r7, #2]
 8001af6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	212c      	movs	r1, #44	; 0x2c
 8001afe:	fb01 f303 	mul.w	r3, r1, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	333f      	adds	r3, #63	; 0x3f
 8001b06:	787a      	ldrb	r2, [r7, #1]
 8001b08:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001b0a:	7c3b      	ldrb	r3, [r7, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d112      	bne.n	8001b36 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	212c      	movs	r1, #44	; 0x2c
 8001b16:	fb01 f303 	mul.w	r3, r1, r3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3342      	adds	r3, #66	; 0x42
 8001b1e:	2203      	movs	r2, #3
 8001b20:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	212c      	movs	r1, #44	; 0x2c
 8001b28:	fb01 f303 	mul.w	r3, r1, r3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	333d      	adds	r3, #61	; 0x3d
 8001b30:	7f3a      	ldrb	r2, [r7, #28]
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	e008      	b.n	8001b48 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	212c      	movs	r1, #44	; 0x2c
 8001b3c:	fb01 f303 	mul.w	r3, r1, r3
 8001b40:	4413      	add	r3, r2
 8001b42:	3342      	adds	r3, #66	; 0x42
 8001b44:	2202      	movs	r2, #2
 8001b46:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b48:	787b      	ldrb	r3, [r7, #1]
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	f200 80c6 	bhi.w	8001cdc <HAL_HCD_HC_SubmitRequest+0x210>
 8001b50:	a201      	add	r2, pc, #4	; (adr r2, 8001b58 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b56:	bf00      	nop
 8001b58:	08001b69 	.word	0x08001b69
 8001b5c:	08001cc9 	.word	0x08001cc9
 8001b60:	08001bcd 	.word	0x08001bcd
 8001b64:	08001c4b 	.word	0x08001c4b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001b68:	7c3b      	ldrb	r3, [r7, #16]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	f040 80b8 	bne.w	8001ce0 <HAL_HCD_HC_SubmitRequest+0x214>
 8001b70:	78bb      	ldrb	r3, [r7, #2]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f040 80b4 	bne.w	8001ce0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001b78:	8b3b      	ldrh	r3, [r7, #24]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d108      	bne.n	8001b90 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	212c      	movs	r1, #44	; 0x2c
 8001b84:	fb01 f303 	mul.w	r3, r1, r3
 8001b88:	4413      	add	r3, r2
 8001b8a:	3355      	adds	r3, #85	; 0x55
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	212c      	movs	r1, #44	; 0x2c
 8001b96:	fb01 f303 	mul.w	r3, r1, r3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3355      	adds	r3, #85	; 0x55
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d109      	bne.n	8001bb8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	212c      	movs	r1, #44	; 0x2c
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	3342      	adds	r3, #66	; 0x42
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bb6:	e093      	b.n	8001ce0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bb8:	78fb      	ldrb	r3, [r7, #3]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	212c      	movs	r1, #44	; 0x2c
 8001bbe:	fb01 f303 	mul.w	r3, r1, r3
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3342      	adds	r3, #66	; 0x42
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	701a      	strb	r2, [r3, #0]
      break;
 8001bca:	e089      	b.n	8001ce0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001bcc:	78bb      	ldrb	r3, [r7, #2]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d11d      	bne.n	8001c0e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	212c      	movs	r1, #44	; 0x2c
 8001bd8:	fb01 f303 	mul.w	r3, r1, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	3355      	adds	r3, #85	; 0x55
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001be6:	78fb      	ldrb	r3, [r7, #3]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	212c      	movs	r1, #44	; 0x2c
 8001bec:	fb01 f303 	mul.w	r3, r1, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3342      	adds	r3, #66	; 0x42
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001bf8:	e073      	b.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	212c      	movs	r1, #44	; 0x2c
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	3342      	adds	r3, #66	; 0x42
 8001c08:	2202      	movs	r2, #2
 8001c0a:	701a      	strb	r2, [r3, #0]
      break;
 8001c0c:	e069      	b.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	212c      	movs	r1, #44	; 0x2c
 8001c14:	fb01 f303 	mul.w	r3, r1, r3
 8001c18:	4413      	add	r3, r2
 8001c1a:	3354      	adds	r3, #84	; 0x54
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	212c      	movs	r1, #44	; 0x2c
 8001c28:	fb01 f303 	mul.w	r3, r1, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3342      	adds	r3, #66	; 0x42
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
      break;
 8001c34:	e055      	b.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	212c      	movs	r1, #44	; 0x2c
 8001c3c:	fb01 f303 	mul.w	r3, r1, r3
 8001c40:	4413      	add	r3, r2
 8001c42:	3342      	adds	r3, #66	; 0x42
 8001c44:	2202      	movs	r2, #2
 8001c46:	701a      	strb	r2, [r3, #0]
      break;
 8001c48:	e04b      	b.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001c4a:	78bb      	ldrb	r3, [r7, #2]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d11d      	bne.n	8001c8c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	212c      	movs	r1, #44	; 0x2c
 8001c56:	fb01 f303 	mul.w	r3, r1, r3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3355      	adds	r3, #85	; 0x55
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d109      	bne.n	8001c78 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	212c      	movs	r1, #44	; 0x2c
 8001c6a:	fb01 f303 	mul.w	r3, r1, r3
 8001c6e:	4413      	add	r3, r2
 8001c70:	3342      	adds	r3, #66	; 0x42
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c76:	e034      	b.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	212c      	movs	r1, #44	; 0x2c
 8001c7e:	fb01 f303 	mul.w	r3, r1, r3
 8001c82:	4413      	add	r3, r2
 8001c84:	3342      	adds	r3, #66	; 0x42
 8001c86:	2202      	movs	r2, #2
 8001c88:	701a      	strb	r2, [r3, #0]
      break;
 8001c8a:	e02a      	b.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	212c      	movs	r1, #44	; 0x2c
 8001c92:	fb01 f303 	mul.w	r3, r1, r3
 8001c96:	4413      	add	r3, r2
 8001c98:	3354      	adds	r3, #84	; 0x54
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d109      	bne.n	8001cb4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	212c      	movs	r1, #44	; 0x2c
 8001ca6:	fb01 f303 	mul.w	r3, r1, r3
 8001caa:	4413      	add	r3, r2
 8001cac:	3342      	adds	r3, #66	; 0x42
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
      break;
 8001cb2:	e016      	b.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	212c      	movs	r1, #44	; 0x2c
 8001cba:	fb01 f303 	mul.w	r3, r1, r3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3342      	adds	r3, #66	; 0x42
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	701a      	strb	r2, [r3, #0]
      break;
 8001cc6:	e00c      	b.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	212c      	movs	r1, #44	; 0x2c
 8001cce:	fb01 f303 	mul.w	r3, r1, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3342      	adds	r3, #66	; 0x42
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
      break;
 8001cda:	e002      	b.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001cdc:	bf00      	nop
 8001cde:	e000      	b.n	8001ce2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001ce0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	212c      	movs	r1, #44	; 0x2c
 8001ce8:	fb01 f303 	mul.w	r3, r1, r3
 8001cec:	4413      	add	r3, r2
 8001cee:	3344      	adds	r3, #68	; 0x44
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	8b3a      	ldrh	r2, [r7, #24]
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	202c      	movs	r0, #44	; 0x2c
 8001cfc:	fb00 f303 	mul.w	r3, r0, r3
 8001d00:	440b      	add	r3, r1
 8001d02:	334c      	adds	r3, #76	; 0x4c
 8001d04:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d06:	78fb      	ldrb	r3, [r7, #3]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	212c      	movs	r1, #44	; 0x2c
 8001d0c:	fb01 f303 	mul.w	r3, r1, r3
 8001d10:	4413      	add	r3, r2
 8001d12:	3360      	adds	r3, #96	; 0x60
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	212c      	movs	r1, #44	; 0x2c
 8001d1e:	fb01 f303 	mul.w	r3, r1, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	3350      	adds	r3, #80	; 0x50
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d2a:	78fb      	ldrb	r3, [r7, #3]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	212c      	movs	r1, #44	; 0x2c
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	3339      	adds	r3, #57	; 0x39
 8001d38:	78fa      	ldrb	r2, [r7, #3]
 8001d3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	212c      	movs	r1, #44	; 0x2c
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	3361      	adds	r3, #97	; 0x61
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6818      	ldr	r0, [r3, #0]
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	222c      	movs	r2, #44	; 0x2c
 8001d56:	fb02 f303 	mul.w	r3, r2, r3
 8001d5a:	3338      	adds	r3, #56	; 0x38
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	18d1      	adds	r1, r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	461a      	mov	r2, r3
 8001d68:	f003 ff86 	bl	8005c78 <USB_HC_StartXfer>
 8001d6c:	4603      	mov	r3, r0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop

08001d78 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f003 fc87 	bl	80056a2 <USB_GetMode>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	f040 80f6 	bne.w	8001f88 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f003 fc6b 	bl	800567c <USB_ReadInterrupts>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80ec 	beq.w	8001f86 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 fc62 	bl	800567c <USB_ReadInterrupts>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001dc2:	d104      	bne.n	8001dce <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001dcc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 fc52 	bl	800567c <USB_ReadInterrupts>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001de2:	d104      	bne.n	8001dee <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001dec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f003 fc42 	bl	800567c <USB_ReadInterrupts>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e02:	d104      	bne.n	8001e0e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 fc32 	bl	800567c <USB_ReadInterrupts>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d103      	bne.n	8001e2a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2202      	movs	r2, #2
 8001e28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 fc24 	bl	800567c <USB_ReadInterrupts>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e3e:	d11c      	bne.n	8001e7a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e48:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10f      	bne.n	8001e7a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001e5a:	2110      	movs	r1, #16
 8001e5c:	6938      	ldr	r0, [r7, #16]
 8001e5e:	f003 fb13 	bl	8005488 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001e62:	6938      	ldr	r0, [r7, #16]
 8001e64:	f003 fb44 	bl	80054f0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 fd1a 	bl	80058a8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f006 fae9 	bl	800844c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f003 fbfc 	bl	800567c <USB_ReadInterrupts>
 8001e84:	4603      	mov	r3, r0
 8001e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e8e:	d102      	bne.n	8001e96 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f001 f89e 	bl	8002fd2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f003 fbee 	bl	800567c <USB_ReadInterrupts>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d106      	bne.n	8001eb8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f006 fab2 	bl	8008414 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2208      	movs	r2, #8
 8001eb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 fbdd 	bl	800567c <USB_ReadInterrupts>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	2b10      	cmp	r3, #16
 8001eca:	d101      	bne.n	8001ed0 <HAL_HCD_IRQHandler+0x158>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <HAL_HCD_IRQHandler+0x15a>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d012      	beq.n	8001efc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	699a      	ldr	r2, [r3, #24]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0210 	bic.w	r2, r2, #16
 8001ee4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 ffa1 	bl	8002e2e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699a      	ldr	r2, [r3, #24]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0210 	orr.w	r2, r2, #16
 8001efa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f003 fbbb 	bl	800567c <USB_ReadInterrupts>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f10:	d13a      	bne.n	8001f88 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 fff0 	bl	8005efc <USB_HC_ReadInterrupt>
 8001f1c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	e025      	b.n	8001f70 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d018      	beq.n	8001f6a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f4e:	d106      	bne.n	8001f5e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	4619      	mov	r1, r3
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f8ab 	bl	80020b2 <HCD_HC_IN_IRQHandler>
 8001f5c:	e005      	b.n	8001f6a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	4619      	mov	r1, r3
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 fbf9 	bl	800275c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d3d4      	bcc.n	8001f24 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f82:	615a      	str	r2, [r3, #20]
 8001f84:	e000      	b.n	8001f88 <HAL_HCD_IRQHandler+0x210>
      return;
 8001f86:	bf00      	nop
    }
  }
}
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_HCD_Start+0x16>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e013      	b.n	8001fcc <HAL_HCD_Start+0x3e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f003 fcdc 	bl	8005970 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f003 f9f4 	bl	80053aa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_HCD_Stop+0x16>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e00d      	b.n	8002006 <HAL_HCD_Stop+0x32>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f004 f8ca 	bl	8006190 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f003 fc7e 	bl	800591c <USB_ResetPort>
 8002020:	4603      	mov	r3, r0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	460b      	mov	r3, r1
 8002034:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002036:	78fb      	ldrb	r3, [r7, #3]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	212c      	movs	r1, #44	; 0x2c
 800203c:	fb01 f303 	mul.w	r3, r1, r3
 8002040:	4413      	add	r3, r2
 8002042:	3360      	adds	r3, #96	; 0x60
 8002044:	781b      	ldrb	r3, [r3, #0]
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	460b      	mov	r3, r1
 800205c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800205e:	78fb      	ldrb	r3, [r7, #3]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	212c      	movs	r1, #44	; 0x2c
 8002064:	fb01 f303 	mul.w	r3, r1, r3
 8002068:	4413      	add	r3, r2
 800206a:	3350      	adds	r3, #80	; 0x50
 800206c:	681b      	ldr	r3, [r3, #0]
}
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f003 fcc2 	bl	8005a10 <USB_GetCurrentFrame>
 800208c:	4603      	mov	r3, r0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f003 fc9d 	bl	80059e2 <USB_GetHostSpeed>
 80020a8:	4603      	mov	r3, r0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
 80020ba:	460b      	mov	r3, r1
 80020bc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	015a      	lsls	r2, r3, #5
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d11a      	bne.n	8002118 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	015a      	lsls	r2, r3, #5
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4413      	add	r3, r2
 80020ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ee:	461a      	mov	r2, r3
 80020f0:	2304      	movs	r3, #4
 80020f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	212c      	movs	r1, #44	; 0x2c
 80020fa:	fb01 f303 	mul.w	r3, r1, r3
 80020fe:	4413      	add	r3, r2
 8002100:	3361      	adds	r3, #97	; 0x61
 8002102:	2206      	movs	r2, #6
 8002104:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f003 ff04 	bl	8005f1e <USB_HC_Halt>
 8002116:	e0af      	b.n	8002278 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	015a      	lsls	r2, r3, #5
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4413      	add	r3, r2
 8002120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800212e:	d11b      	bne.n	8002168 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	015a      	lsls	r2, r3, #5
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4413      	add	r3, r2
 8002138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213c:	461a      	mov	r2, r3
 800213e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002142:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	212c      	movs	r1, #44	; 0x2c
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	4413      	add	r3, r2
 8002150:	3361      	adds	r3, #97	; 0x61
 8002152:	2207      	movs	r2, #7
 8002154:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f003 fedc 	bl	8005f1e <USB_HC_Halt>
 8002166:	e087      	b.n	8002278 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	015a      	lsls	r2, r3, #5
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4413      	add	r3, r2
 8002170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 0320 	and.w	r3, r3, #32
 800217a:	2b20      	cmp	r3, #32
 800217c:	d109      	bne.n	8002192 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4413      	add	r3, r2
 8002186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218a:	461a      	mov	r2, r3
 800218c:	2320      	movs	r3, #32
 800218e:	6093      	str	r3, [r2, #8]
 8002190:	e072      	b.n	8002278 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4413      	add	r3, r2
 800219a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d11a      	bne.n	80021de <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b4:	461a      	mov	r2, r3
 80021b6:	2308      	movs	r3, #8
 80021b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	212c      	movs	r1, #44	; 0x2c
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	3361      	adds	r3, #97	; 0x61
 80021c8:	2205      	movs	r2, #5
 80021ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	4611      	mov	r1, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f003 fea1 	bl	8005f1e <USB_HC_Halt>
 80021dc:	e04c      	b.n	8002278 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021f4:	d11b      	bne.n	800222e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	461a      	mov	r2, r3
 8002204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002208:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	212c      	movs	r1, #44	; 0x2c
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	3361      	adds	r3, #97	; 0x61
 8002218:	2208      	movs	r2, #8
 800221a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f003 fe79 	bl	8005f1e <USB_HC_Halt>
 800222c:	e024      	b.n	8002278 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	015a      	lsls	r2, r3, #5
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4413      	add	r3, r2
 8002236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002240:	2b80      	cmp	r3, #128	; 0x80
 8002242:	d119      	bne.n	8002278 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4413      	add	r3, r2
 800224c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002250:	461a      	mov	r2, r3
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	212c      	movs	r1, #44	; 0x2c
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	4413      	add	r3, r2
 8002262:	3361      	adds	r3, #97	; 0x61
 8002264:	2206      	movs	r2, #6
 8002266:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f003 fe53 	bl	8005f1e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4413      	add	r3, r2
 8002280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800228a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800228e:	d112      	bne.n	80022b6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	4611      	mov	r1, r2
 800229a:	4618      	mov	r0, r3
 800229c:	f003 fe3f 	bl	8005f1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ac:	461a      	mov	r2, r3
 80022ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022b2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80022b4:	e24e      	b.n	8002754 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	f040 80df 	bne.w	800248c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d019      	beq.n	800230a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	212c      	movs	r1, #44	; 0x2c
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	4413      	add	r3, r2
 80022e2:	3348      	adds	r3, #72	; 0x48
 80022e4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	0159      	lsls	r1, r3, #5
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	440b      	add	r3, r1
 80022ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80022f8:	1ad2      	subs	r2, r2, r3
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	202c      	movs	r0, #44	; 0x2c
 8002300:	fb00 f303 	mul.w	r3, r0, r3
 8002304:	440b      	add	r3, r1
 8002306:	3350      	adds	r3, #80	; 0x50
 8002308:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	3361      	adds	r3, #97	; 0x61
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	212c      	movs	r1, #44	; 0x2c
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	335c      	adds	r3, #92	; 0x5c
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233a:	461a      	mov	r2, r3
 800233c:	2301      	movs	r3, #1
 800233e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	212c      	movs	r1, #44	; 0x2c
 8002346:	fb01 f303 	mul.w	r3, r1, r3
 800234a:	4413      	add	r3, r2
 800234c:	333f      	adds	r3, #63	; 0x3f
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d009      	beq.n	8002368 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	212c      	movs	r1, #44	; 0x2c
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	4413      	add	r3, r2
 8002360:	333f      	adds	r3, #63	; 0x3f
 8002362:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002364:	2b02      	cmp	r3, #2
 8002366:	d111      	bne.n	800238c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	4611      	mov	r1, r2
 8002372:	4618      	mov	r0, r3
 8002374:	f003 fdd3 	bl	8005f1e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	015a      	lsls	r2, r3, #5
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4413      	add	r3, r2
 8002380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002384:	461a      	mov	r2, r3
 8002386:	2310      	movs	r3, #16
 8002388:	6093      	str	r3, [r2, #8]
 800238a:	e03a      	b.n	8002402 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	333f      	adds	r3, #63	; 0x3f
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b03      	cmp	r3, #3
 800239e:	d009      	beq.n	80023b4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	212c      	movs	r1, #44	; 0x2c
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	333f      	adds	r3, #63	; 0x3f
 80023ae:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d126      	bne.n	8002402 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	0151      	lsls	r1, r2, #5
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	440a      	add	r2, r1
 80023ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023d2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	212c      	movs	r1, #44	; 0x2c
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	4413      	add	r3, r2
 80023e0:	3360      	adds	r3, #96	; 0x60
 80023e2:	2201      	movs	r2, #1
 80023e4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	b2d9      	uxtb	r1, r3
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	202c      	movs	r0, #44	; 0x2c
 80023f0:	fb00 f303 	mul.w	r3, r0, r3
 80023f4:	4413      	add	r3, r2
 80023f6:	3360      	adds	r3, #96	; 0x60
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	461a      	mov	r2, r3
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f006 f833 	bl	8008468 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d12b      	bne.n	8002462 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	212c      	movs	r1, #44	; 0x2c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4413      	add	r3, r2
 8002416:	3348      	adds	r3, #72	; 0x48
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	202c      	movs	r0, #44	; 0x2c
 8002420:	fb00 f202 	mul.w	r2, r0, r2
 8002424:	440a      	add	r2, r1
 8002426:	3240      	adds	r2, #64	; 0x40
 8002428:	8812      	ldrh	r2, [r2, #0]
 800242a:	fbb3 f3f2 	udiv	r3, r3, r2
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 818e 	beq.w	8002754 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	212c      	movs	r1, #44	; 0x2c
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	4413      	add	r3, r2
 8002444:	3354      	adds	r3, #84	; 0x54
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	f083 0301 	eor.w	r3, r3, #1
 800244c:	b2d8      	uxtb	r0, r3
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	212c      	movs	r1, #44	; 0x2c
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	4413      	add	r3, r2
 800245a:	3354      	adds	r3, #84	; 0x54
 800245c:	4602      	mov	r2, r0
 800245e:	701a      	strb	r2, [r3, #0]
}
 8002460:	e178      	b.n	8002754 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	212c      	movs	r1, #44	; 0x2c
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	4413      	add	r3, r2
 800246e:	3354      	adds	r3, #84	; 0x54
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	f083 0301 	eor.w	r3, r3, #1
 8002476:	b2d8      	uxtb	r0, r3
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	212c      	movs	r1, #44	; 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	3354      	adds	r3, #84	; 0x54
 8002486:	4602      	mov	r2, r0
 8002488:	701a      	strb	r2, [r3, #0]
}
 800248a:	e163      	b.n	8002754 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4413      	add	r3, r2
 8002494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b02      	cmp	r3, #2
 80024a0:	f040 80f6 	bne.w	8002690 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	212c      	movs	r1, #44	; 0x2c
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	4413      	add	r3, r2
 80024b0:	3361      	adds	r3, #97	; 0x61
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d109      	bne.n	80024cc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	212c      	movs	r1, #44	; 0x2c
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	3360      	adds	r3, #96	; 0x60
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
 80024ca:	e0c9      	b.n	8002660 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	212c      	movs	r1, #44	; 0x2c
 80024d2:	fb01 f303 	mul.w	r3, r1, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	3361      	adds	r3, #97	; 0x61
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b05      	cmp	r3, #5
 80024de:	d109      	bne.n	80024f4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	3360      	adds	r3, #96	; 0x60
 80024ee:	2205      	movs	r2, #5
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	e0b5      	b.n	8002660 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	3361      	adds	r3, #97	; 0x61
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b06      	cmp	r3, #6
 8002506:	d009      	beq.n	800251c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	3361      	adds	r3, #97	; 0x61
 8002516:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002518:	2b08      	cmp	r3, #8
 800251a:	d150      	bne.n	80025be <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	212c      	movs	r1, #44	; 0x2c
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	4413      	add	r3, r2
 8002528:	335c      	adds	r3, #92	; 0x5c
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	202c      	movs	r0, #44	; 0x2c
 8002534:	fb00 f303 	mul.w	r3, r0, r3
 8002538:	440b      	add	r3, r1
 800253a:	335c      	adds	r3, #92	; 0x5c
 800253c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	212c      	movs	r1, #44	; 0x2c
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	4413      	add	r3, r2
 800254a:	335c      	adds	r3, #92	; 0x5c
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d912      	bls.n	8002578 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	212c      	movs	r1, #44	; 0x2c
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	4413      	add	r3, r2
 800255e:	335c      	adds	r3, #92	; 0x5c
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	212c      	movs	r1, #44	; 0x2c
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4413      	add	r3, r2
 8002570:	3360      	adds	r3, #96	; 0x60
 8002572:	2204      	movs	r2, #4
 8002574:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002576:	e073      	b.n	8002660 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	212c      	movs	r1, #44	; 0x2c
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	4413      	add	r3, r2
 8002584:	3360      	adds	r3, #96	; 0x60
 8002586:	2202      	movs	r2, #2
 8002588:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4413      	add	r3, r2
 8002592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025a0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025a8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b6:	461a      	mov	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80025bc:	e050      	b.n	8002660 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	212c      	movs	r1, #44	; 0x2c
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	3361      	adds	r3, #97	; 0x61
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	d122      	bne.n	8002618 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	212c      	movs	r1, #44	; 0x2c
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	4413      	add	r3, r2
 80025de:	3360      	adds	r3, #96	; 0x60
 80025e0:	2202      	movs	r2, #2
 80025e2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025fa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002602:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002610:	461a      	mov	r2, r3
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e023      	b.n	8002660 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	3361      	adds	r3, #97	; 0x61
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b07      	cmp	r3, #7
 800262a:	d119      	bne.n	8002660 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	335c      	adds	r3, #92	; 0x5c
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	202c      	movs	r0, #44	; 0x2c
 8002644:	fb00 f303 	mul.w	r3, r0, r3
 8002648:	440b      	add	r3, r1
 800264a:	335c      	adds	r3, #92	; 0x5c
 800264c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	212c      	movs	r1, #44	; 0x2c
 8002654:	fb01 f303 	mul.w	r3, r1, r3
 8002658:	4413      	add	r3, r2
 800265a:	3360      	adds	r3, #96	; 0x60
 800265c:	2204      	movs	r2, #4
 800265e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266c:	461a      	mov	r2, r3
 800266e:	2302      	movs	r3, #2
 8002670:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	b2d9      	uxtb	r1, r3
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	202c      	movs	r0, #44	; 0x2c
 800267c:	fb00 f303 	mul.w	r3, r0, r3
 8002680:	4413      	add	r3, r2
 8002682:	3360      	adds	r3, #96	; 0x60
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f005 feed 	bl	8008468 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800268e:	e061      	b.n	8002754 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4413      	add	r3, r2
 8002698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 0310 	and.w	r3, r3, #16
 80026a2:	2b10      	cmp	r3, #16
 80026a4:	d156      	bne.n	8002754 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	212c      	movs	r1, #44	; 0x2c
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	333f      	adds	r3, #63	; 0x3f
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d111      	bne.n	80026de <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	212c      	movs	r1, #44	; 0x2c
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	4413      	add	r3, r2
 80026c6:	335c      	adds	r3, #92	; 0x5c
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f003 fc21 	bl	8005f1e <USB_HC_Halt>
 80026dc:	e031      	b.n	8002742 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	212c      	movs	r1, #44	; 0x2c
 80026e4:	fb01 f303 	mul.w	r3, r1, r3
 80026e8:	4413      	add	r3, r2
 80026ea:	333f      	adds	r3, #63	; 0x3f
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d009      	beq.n	8002706 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	212c      	movs	r1, #44	; 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	333f      	adds	r3, #63	; 0x3f
 8002700:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002702:	2b02      	cmp	r3, #2
 8002704:	d11d      	bne.n	8002742 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	212c      	movs	r1, #44	; 0x2c
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	4413      	add	r3, r2
 8002712:	335c      	adds	r3, #92	; 0x5c
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d110      	bne.n	8002742 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	3361      	adds	r3, #97	; 0x61
 800272e:	2203      	movs	r2, #3
 8002730:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f003 fbee 	bl	8005f1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4413      	add	r3, r2
 800274a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274e:	461a      	mov	r2, r3
 8002750:	2310      	movs	r3, #16
 8002752:	6093      	str	r3, [r2, #8]
}
 8002754:	bf00      	nop
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b088      	sub	sp, #32
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002772:	78fb      	ldrb	r3, [r7, #3]
 8002774:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	4413      	add	r3, r2
 800277e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b04      	cmp	r3, #4
 800278a:	d11a      	bne.n	80027c2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	4413      	add	r3, r2
 8002794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002798:	461a      	mov	r2, r3
 800279a:	2304      	movs	r3, #4
 800279c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	212c      	movs	r1, #44	; 0x2c
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	3361      	adds	r3, #97	; 0x61
 80027ac:	2206      	movs	r2, #6
 80027ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	4611      	mov	r1, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f003 fbaf 	bl	8005f1e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80027c0:	e331      	b.n	8002e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d12e      	bne.n	8002836 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e4:	461a      	mov	r2, r3
 80027e6:	2320      	movs	r3, #32
 80027e8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	212c      	movs	r1, #44	; 0x2c
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	333d      	adds	r3, #61	; 0x3d
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	f040 8313 	bne.w	8002e26 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	212c      	movs	r1, #44	; 0x2c
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	4413      	add	r3, r2
 800280c:	333d      	adds	r3, #61	; 0x3d
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	212c      	movs	r1, #44	; 0x2c
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	3360      	adds	r3, #96	; 0x60
 8002820:	2202      	movs	r2, #2
 8002822:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	4611      	mov	r1, r2
 800282e:	4618      	mov	r0, r3
 8002830:	f003 fb75 	bl	8005f1e <USB_HC_Halt>
}
 8002834:	e2f7      	b.n	8002e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	4413      	add	r3, r2
 800283e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800284c:	d112      	bne.n	8002874 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	4413      	add	r3, r2
 8002856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285a:	461a      	mov	r2, r3
 800285c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002860:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	4611      	mov	r1, r2
 800286c:	4618      	mov	r0, r3
 800286e:	f003 fb56 	bl	8005f1e <USB_HC_Halt>
}
 8002872:	e2d8      	b.n	8002e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b01      	cmp	r3, #1
 8002888:	d140      	bne.n	800290c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	212c      	movs	r1, #44	; 0x2c
 8002890:	fb01 f303 	mul.w	r3, r1, r3
 8002894:	4413      	add	r3, r2
 8002896:	335c      	adds	r3, #92	; 0x5c
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ae:	2b40      	cmp	r3, #64	; 0x40
 80028b0:	d111      	bne.n	80028d6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	212c      	movs	r1, #44	; 0x2c
 80028b8:	fb01 f303 	mul.w	r3, r1, r3
 80028bc:	4413      	add	r3, r2
 80028be:	333d      	adds	r3, #61	; 0x3d
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d0:	461a      	mov	r2, r3
 80028d2:	2340      	movs	r3, #64	; 0x40
 80028d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e2:	461a      	mov	r2, r3
 80028e4:	2301      	movs	r3, #1
 80028e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	212c      	movs	r1, #44	; 0x2c
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	3361      	adds	r3, #97	; 0x61
 80028f6:	2201      	movs	r2, #1
 80028f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f003 fb0a 	bl	8005f1e <USB_HC_Halt>
}
 800290a:	e28c      	b.n	8002e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291e:	2b40      	cmp	r3, #64	; 0x40
 8002920:	d12c      	bne.n	800297c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	212c      	movs	r1, #44	; 0x2c
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	4413      	add	r3, r2
 800292e:	3361      	adds	r3, #97	; 0x61
 8002930:	2204      	movs	r2, #4
 8002932:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	212c      	movs	r1, #44	; 0x2c
 800293a:	fb01 f303 	mul.w	r3, r1, r3
 800293e:	4413      	add	r3, r2
 8002940:	333d      	adds	r3, #61	; 0x3d
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	212c      	movs	r1, #44	; 0x2c
 800294c:	fb01 f303 	mul.w	r3, r1, r3
 8002950:	4413      	add	r3, r2
 8002952:	335c      	adds	r3, #92	; 0x5c
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	4611      	mov	r1, r2
 8002962:	4618      	mov	r0, r3
 8002964:	f003 fadb 	bl	8005f1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	4413      	add	r3, r2
 8002970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002974:	461a      	mov	r2, r3
 8002976:	2340      	movs	r3, #64	; 0x40
 8002978:	6093      	str	r3, [r2, #8]
}
 800297a:	e254      	b.n	8002e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	4413      	add	r3, r2
 8002984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b08      	cmp	r3, #8
 8002990:	d11a      	bne.n	80029c8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	4413      	add	r3, r2
 800299a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299e:	461a      	mov	r2, r3
 80029a0:	2308      	movs	r3, #8
 80029a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	3361      	adds	r3, #97	; 0x61
 80029b2:	2205      	movs	r2, #5
 80029b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	4611      	mov	r1, r2
 80029c0:	4618      	mov	r0, r3
 80029c2:	f003 faac 	bl	8005f1e <USB_HC_Halt>
}
 80029c6:	e22e      	b.n	8002e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 0310 	and.w	r3, r3, #16
 80029da:	2b10      	cmp	r3, #16
 80029dc:	d140      	bne.n	8002a60 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	335c      	adds	r3, #92	; 0x5c
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	3361      	adds	r3, #97	; 0x61
 80029fe:	2203      	movs	r2, #3
 8002a00:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	212c      	movs	r1, #44	; 0x2c
 8002a08:	fb01 f303 	mul.w	r3, r1, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	333d      	adds	r3, #61	; 0x3d
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d112      	bne.n	8002a3c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	212c      	movs	r1, #44	; 0x2c
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	333c      	adds	r3, #60	; 0x3c
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d108      	bne.n	8002a3c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	212c      	movs	r1, #44	; 0x2c
 8002a30:	fb01 f303 	mul.w	r3, r1, r3
 8002a34:	4413      	add	r3, r2
 8002a36:	333d      	adds	r3, #61	; 0x3d
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	b2d2      	uxtb	r2, r2
 8002a44:	4611      	mov	r1, r2
 8002a46:	4618      	mov	r0, r3
 8002a48:	f003 fa69 	bl	8005f1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2310      	movs	r3, #16
 8002a5c:	6093      	str	r3, [r2, #8]
}
 8002a5e:	e1e2      	b.n	8002e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a72:	2b80      	cmp	r3, #128	; 0x80
 8002a74:	d164      	bne.n	8002b40 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d111      	bne.n	8002aa2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	212c      	movs	r1, #44	; 0x2c
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	3361      	adds	r3, #97	; 0x61
 8002a8c:	2206      	movs	r2, #6
 8002a8e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	4611      	mov	r1, r2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f003 fa3f 	bl	8005f1e <USB_HC_Halt>
 8002aa0:	e044      	b.n	8002b2c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	335c      	adds	r3, #92	; 0x5c
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	1c5a      	adds	r2, r3, #1
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	202c      	movs	r0, #44	; 0x2c
 8002aba:	fb00 f303 	mul.w	r3, r0, r3
 8002abe:	440b      	add	r3, r1
 8002ac0:	335c      	adds	r3, #92	; 0x5c
 8002ac2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	212c      	movs	r1, #44	; 0x2c
 8002aca:	fb01 f303 	mul.w	r3, r1, r3
 8002ace:	4413      	add	r3, r2
 8002ad0:	335c      	adds	r3, #92	; 0x5c
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d920      	bls.n	8002b1a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	335c      	adds	r3, #92	; 0x5c
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	212c      	movs	r1, #44	; 0x2c
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	4413      	add	r3, r2
 8002af6:	3360      	adds	r3, #96	; 0x60
 8002af8:	2204      	movs	r2, #4
 8002afa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	b2d9      	uxtb	r1, r3
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	202c      	movs	r0, #44	; 0x2c
 8002b06:	fb00 f303 	mul.w	r3, r0, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3360      	adds	r3, #96	; 0x60
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f005 fca8 	bl	8008468 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b18:	e008      	b.n	8002b2c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	3360      	adds	r3, #96	; 0x60
 8002b28:	2202      	movs	r2, #2
 8002b2a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b38:	461a      	mov	r2, r3
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	6093      	str	r3, [r2, #8]
}
 8002b3e:	e172      	b.n	8002e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b56:	d11b      	bne.n	8002b90 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	212c      	movs	r1, #44	; 0x2c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	3361      	adds	r3, #97	; 0x61
 8002b66:	2208      	movs	r2, #8
 8002b68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f003 f9d2 	bl	8005f1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b86:	461a      	mov	r2, r3
 8002b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b8c:	6093      	str	r3, [r2, #8]
}
 8002b8e:	e14a      	b.n	8002e26 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	f040 813f 	bne.w	8002e26 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	212c      	movs	r1, #44	; 0x2c
 8002bae:	fb01 f303 	mul.w	r3, r1, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3361      	adds	r3, #97	; 0x61
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d17d      	bne.n	8002cb8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	212c      	movs	r1, #44	; 0x2c
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3360      	adds	r3, #96	; 0x60
 8002bca:	2201      	movs	r2, #1
 8002bcc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	212c      	movs	r1, #44	; 0x2c
 8002bd4:	fb01 f303 	mul.w	r3, r1, r3
 8002bd8:	4413      	add	r3, r2
 8002bda:	333f      	adds	r3, #63	; 0x3f
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d00a      	beq.n	8002bf8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	333f      	adds	r3, #63	; 0x3f
 8002bf0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bf2:	2b03      	cmp	r3, #3
 8002bf4:	f040 8100 	bne.w	8002df8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d113      	bne.n	8002c28 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	212c      	movs	r1, #44	; 0x2c
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3355      	adds	r3, #85	; 0x55
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	f083 0301 	eor.w	r3, r3, #1
 8002c14:	b2d8      	uxtb	r0, r3
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	212c      	movs	r1, #44	; 0x2c
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	3355      	adds	r3, #85	; 0x55
 8002c24:	4602      	mov	r2, r0
 8002c26:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	f040 80e3 	bne.w	8002df8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	212c      	movs	r1, #44	; 0x2c
 8002c38:	fb01 f303 	mul.w	r3, r1, r3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	334c      	adds	r3, #76	; 0x4c
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 80d8 	beq.w	8002df8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	334c      	adds	r3, #76	; 0x4c
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	202c      	movs	r0, #44	; 0x2c
 8002c5e:	fb00 f202 	mul.w	r2, r0, r2
 8002c62:	440a      	add	r2, r1
 8002c64:	3240      	adds	r2, #64	; 0x40
 8002c66:	8812      	ldrh	r2, [r2, #0]
 8002c68:	4413      	add	r3, r2
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	202c      	movs	r0, #44	; 0x2c
 8002c72:	fb00 f202 	mul.w	r2, r0, r2
 8002c76:	440a      	add	r2, r1
 8002c78:	3240      	adds	r2, #64	; 0x40
 8002c7a:	8812      	ldrh	r2, [r2, #0]
 8002c7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80b5 	beq.w	8002df8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	212c      	movs	r1, #44	; 0x2c
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	3355      	adds	r3, #85	; 0x55
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	f083 0301 	eor.w	r3, r3, #1
 8002ca2:	b2d8      	uxtb	r0, r3
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	212c      	movs	r1, #44	; 0x2c
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	3355      	adds	r3, #85	; 0x55
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	e09f      	b.n	8002df8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	212c      	movs	r1, #44	; 0x2c
 8002cbe:	fb01 f303 	mul.w	r3, r1, r3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3361      	adds	r3, #97	; 0x61
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d109      	bne.n	8002ce0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	212c      	movs	r1, #44	; 0x2c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3360      	adds	r3, #96	; 0x60
 8002cda:	2202      	movs	r2, #2
 8002cdc:	701a      	strb	r2, [r3, #0]
 8002cde:	e08b      	b.n	8002df8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	212c      	movs	r1, #44	; 0x2c
 8002ce6:	fb01 f303 	mul.w	r3, r1, r3
 8002cea:	4413      	add	r3, r2
 8002cec:	3361      	adds	r3, #97	; 0x61
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d109      	bne.n	8002d08 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3360      	adds	r3, #96	; 0x60
 8002d02:	2202      	movs	r2, #2
 8002d04:	701a      	strb	r2, [r3, #0]
 8002d06:	e077      	b.n	8002df8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	212c      	movs	r1, #44	; 0x2c
 8002d0e:	fb01 f303 	mul.w	r3, r1, r3
 8002d12:	4413      	add	r3, r2
 8002d14:	3361      	adds	r3, #97	; 0x61
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b05      	cmp	r3, #5
 8002d1a:	d109      	bne.n	8002d30 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	3360      	adds	r3, #96	; 0x60
 8002d2a:	2205      	movs	r2, #5
 8002d2c:	701a      	strb	r2, [r3, #0]
 8002d2e:	e063      	b.n	8002df8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	212c      	movs	r1, #44	; 0x2c
 8002d36:	fb01 f303 	mul.w	r3, r1, r3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3361      	adds	r3, #97	; 0x61
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b06      	cmp	r3, #6
 8002d42:	d009      	beq.n	8002d58 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3361      	adds	r3, #97	; 0x61
 8002d52:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d14f      	bne.n	8002df8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	335c      	adds	r3, #92	; 0x5c
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	202c      	movs	r0, #44	; 0x2c
 8002d70:	fb00 f303 	mul.w	r3, r0, r3
 8002d74:	440b      	add	r3, r1
 8002d76:	335c      	adds	r3, #92	; 0x5c
 8002d78:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	212c      	movs	r1, #44	; 0x2c
 8002d80:	fb01 f303 	mul.w	r3, r1, r3
 8002d84:	4413      	add	r3, r2
 8002d86:	335c      	adds	r3, #92	; 0x5c
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d912      	bls.n	8002db4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	212c      	movs	r1, #44	; 0x2c
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	335c      	adds	r3, #92	; 0x5c
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	212c      	movs	r1, #44	; 0x2c
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	4413      	add	r3, r2
 8002dac:	3360      	adds	r3, #96	; 0x60
 8002dae:	2204      	movs	r2, #4
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	e021      	b.n	8002df8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	212c      	movs	r1, #44	; 0x2c
 8002dba:	fb01 f303 	mul.w	r3, r1, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3360      	adds	r3, #96	; 0x60
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	015a      	lsls	r2, r3, #5
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	4413      	add	r3, r2
 8002dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ddc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002de4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	015a      	lsls	r2, r3, #5
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df2:	461a      	mov	r2, r3
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e04:	461a      	mov	r2, r3
 8002e06:	2302      	movs	r3, #2
 8002e08:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	b2d9      	uxtb	r1, r3
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	202c      	movs	r0, #44	; 0x2c
 8002e14:	fb00 f303 	mul.w	r3, r0, r3
 8002e18:	4413      	add	r3, r2
 8002e1a:	3360      	adds	r3, #96	; 0x60
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f005 fb21 	bl	8008468 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e26:	bf00      	nop
 8002e28:	3720      	adds	r7, #32
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b08a      	sub	sp, #40	; 0x28
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	0c5b      	lsrs	r3, r3, #17
 8002e54:	f003 030f 	and.w	r3, r3, #15
 8002e58:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e62:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d004      	beq.n	8002e74 <HCD_RXQLVL_IRQHandler+0x46>
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2b05      	cmp	r3, #5
 8002e6e:	f000 80a9 	beq.w	8002fc4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e72:	e0aa      	b.n	8002fca <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 80a6 	beq.w	8002fc8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3344      	adds	r3, #68	; 0x44
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 809b 	beq.w	8002fc8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	212c      	movs	r1, #44	; 0x2c
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3350      	adds	r3, #80	; 0x50
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	441a      	add	r2, r3
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	202c      	movs	r0, #44	; 0x2c
 8002eac:	fb00 f303 	mul.w	r3, r0, r3
 8002eb0:	440b      	add	r3, r1
 8002eb2:	334c      	adds	r3, #76	; 0x4c
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d87a      	bhi.n	8002fb0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	212c      	movs	r1, #44	; 0x2c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	3344      	adds	r3, #68	; 0x44
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	b292      	uxth	r2, r2
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f002 fb7a 	bl	80055cc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	212c      	movs	r1, #44	; 0x2c
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3344      	adds	r3, #68	; 0x44
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	441a      	add	r2, r3
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	202c      	movs	r0, #44	; 0x2c
 8002ef2:	fb00 f303 	mul.w	r3, r0, r3
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3344      	adds	r3, #68	; 0x44
 8002efa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	212c      	movs	r1, #44	; 0x2c
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	3350      	adds	r3, #80	; 0x50
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	441a      	add	r2, r3
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	202c      	movs	r0, #44	; 0x2c
 8002f16:	fb00 f303 	mul.w	r3, r0, r3
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3350      	adds	r3, #80	; 0x50
 8002f1e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	0cdb      	lsrs	r3, r3, #19
 8002f30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f34:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	212c      	movs	r1, #44	; 0x2c
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	4413      	add	r3, r2
 8002f42:	3340      	adds	r3, #64	; 0x40
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d13c      	bne.n	8002fc8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d039      	beq.n	8002fc8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f6a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f72:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f80:	461a      	mov	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	212c      	movs	r1, #44	; 0x2c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	3354      	adds	r3, #84	; 0x54
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	f083 0301 	eor.w	r3, r3, #1
 8002f9a:	b2d8      	uxtb	r0, r3
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	212c      	movs	r1, #44	; 0x2c
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3354      	adds	r3, #84	; 0x54
 8002faa:	4602      	mov	r2, r0
 8002fac:	701a      	strb	r2, [r3, #0]
      break;
 8002fae:	e00b      	b.n	8002fc8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	212c      	movs	r1, #44	; 0x2c
 8002fb6:	fb01 f303 	mul.w	r3, r1, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	3360      	adds	r3, #96	; 0x60
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	701a      	strb	r2, [r3, #0]
      break;
 8002fc2:	e001      	b.n	8002fc8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002fc4:	bf00      	nop
 8002fc6:	e000      	b.n	8002fca <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002fc8:	bf00      	nop
  }
}
 8002fca:	bf00      	nop
 8002fcc:	3728      	adds	r7, #40	; 0x28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b086      	sub	sp, #24
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ffe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b02      	cmp	r3, #2
 8003008:	d10b      	bne.n	8003022 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b01      	cmp	r3, #1
 8003012:	d102      	bne.n	800301a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f005 fa0b 	bl	8008430 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f043 0302 	orr.w	r3, r3, #2
 8003020:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 0308 	and.w	r3, r3, #8
 8003028:	2b08      	cmp	r3, #8
 800302a:	d132      	bne.n	8003092 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f043 0308 	orr.w	r3, r3, #8
 8003032:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f003 0304 	and.w	r3, r3, #4
 800303a:	2b04      	cmp	r3, #4
 800303c:	d126      	bne.n	800308c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d113      	bne.n	800306e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800304c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003050:	d106      	bne.n	8003060 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2102      	movs	r1, #2
 8003058:	4618      	mov	r0, r3
 800305a:	f002 fc25 	bl	80058a8 <USB_InitFSLSPClkSel>
 800305e:	e011      	b.n	8003084 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2101      	movs	r1, #1
 8003066:	4618      	mov	r0, r3
 8003068:	f002 fc1e 	bl	80058a8 <USB_InitFSLSPClkSel>
 800306c:	e00a      	b.n	8003084 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d106      	bne.n	8003084 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800307c:	461a      	mov	r2, r3
 800307e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003082:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f005 f9fd 	bl	8008484 <HAL_HCD_PortEnabled_Callback>
 800308a:	e002      	b.n	8003092 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f005 fa07 	bl	80084a0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b20      	cmp	r3, #32
 800309a:	d103      	bne.n	80030a4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f043 0320 	orr.w	r3, r3, #32
 80030a2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030aa:	461a      	mov	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	6013      	str	r3, [r2, #0]
}
 80030b0:	bf00      	nop
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e1bd      	b.n	8003446 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a93      	ldr	r2, [pc, #588]	; (800331c <HAL_I2C_Init+0x264>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00e      	beq.n	80030f2 <HAL_I2C_Init+0x3a>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a91      	ldr	r2, [pc, #580]	; (8003320 <HAL_I2C_Init+0x268>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d009      	beq.n	80030f2 <HAL_I2C_Init+0x3a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a90      	ldr	r2, [pc, #576]	; (8003324 <HAL_I2C_Init+0x26c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d004      	beq.n	80030f2 <HAL_I2C_Init+0x3a>
 80030e8:	f44f 71df 	mov.w	r1, #446	; 0x1be
 80030ec:	488e      	ldr	r0, [pc, #568]	; (8003328 <HAL_I2C_Init+0x270>)
 80030ee:	f7fd fd8c 	bl	8000c0a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d004      	beq.n	8003104 <HAL_I2C_Init+0x4c>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4a8b      	ldr	r2, [pc, #556]	; (800332c <HAL_I2C_Init+0x274>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d904      	bls.n	800310e <HAL_I2C_Init+0x56>
 8003104:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003108:	4887      	ldr	r0, [pc, #540]	; (8003328 <HAL_I2C_Init+0x270>)
 800310a:	f7fd fd7e 	bl	8000c0a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d009      	beq.n	800312a <HAL_I2C_Init+0x72>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800311e:	d004      	beq.n	800312a <HAL_I2C_Init+0x72>
 8003120:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8003124:	4880      	ldr	r0, [pc, #512]	; (8003328 <HAL_I2C_Init+0x270>)
 8003126:	f7fd fd70 	bl	8000c0a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003132:	f023 0303 	bic.w	r3, r3, #3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d004      	beq.n	8003144 <HAL_I2C_Init+0x8c>
 800313a:	f240 11c1 	movw	r1, #449	; 0x1c1
 800313e:	487a      	ldr	r0, [pc, #488]	; (8003328 <HAL_I2C_Init+0x270>)
 8003140:	f7fd fd63 	bl	8000c0a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800314c:	d009      	beq.n	8003162 <HAL_I2C_Init+0xaa>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003156:	d004      	beq.n	8003162 <HAL_I2C_Init+0xaa>
 8003158:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800315c:	4872      	ldr	r0, [pc, #456]	; (8003328 <HAL_I2C_Init+0x270>)
 800315e:	f7fd fd54 	bl	8000c0a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <HAL_I2C_Init+0xc4>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d004      	beq.n	800317c <HAL_I2C_Init+0xc4>
 8003172:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003176:	486c      	ldr	r0, [pc, #432]	; (8003328 <HAL_I2C_Init+0x270>)
 8003178:	f7fd fd47 	bl	8000c0a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8003184:	2b00      	cmp	r3, #0
 8003186:	d004      	beq.n	8003192 <HAL_I2C_Init+0xda>
 8003188:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 800318c:	4866      	ldr	r0, [pc, #408]	; (8003328 <HAL_I2C_Init+0x270>)
 800318e:	f7fd fd3c 	bl	8000c0a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d008      	beq.n	80031ac <HAL_I2C_Init+0xf4>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	2b40      	cmp	r3, #64	; 0x40
 80031a0:	d004      	beq.n	80031ac <HAL_I2C_Init+0xf4>
 80031a2:	f240 11c5 	movw	r1, #453	; 0x1c5
 80031a6:	4860      	ldr	r0, [pc, #384]	; (8003328 <HAL_I2C_Init+0x270>)
 80031a8:	f7fd fd2f 	bl	8000c0a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_I2C_Init+0x10e>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	2b80      	cmp	r3, #128	; 0x80
 80031ba:	d004      	beq.n	80031c6 <HAL_I2C_Init+0x10e>
 80031bc:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80031c0:	4859      	ldr	r0, [pc, #356]	; (8003328 <HAL_I2C_Init+0x270>)
 80031c2:	f7fd fd22 	bl	8000c0a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fd fa8a 	bl	80006f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2224      	movs	r2, #36	; 0x24
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003206:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003216:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003218:	f001 fc40 	bl	8004a9c <HAL_RCC_GetPCLK1Freq>
 800321c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4a43      	ldr	r2, [pc, #268]	; (8003330 <HAL_I2C_Init+0x278>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d807      	bhi.n	8003238 <HAL_I2C_Init+0x180>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4a42      	ldr	r2, [pc, #264]	; (8003334 <HAL_I2C_Init+0x27c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	bf94      	ite	ls
 8003230:	2301      	movls	r3, #1
 8003232:	2300      	movhi	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	e006      	b.n	8003246 <HAL_I2C_Init+0x18e>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a3f      	ldr	r2, [pc, #252]	; (8003338 <HAL_I2C_Init+0x280>)
 800323c:	4293      	cmp	r3, r2
 800323e:	bf94      	ite	ls
 8003240:	2301      	movls	r3, #1
 8003242:	2300      	movhi	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e0fb      	b.n	8003446 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4a3a      	ldr	r2, [pc, #232]	; (800333c <HAL_I2C_Init+0x284>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	0c9b      	lsrs	r3, r3, #18
 8003258:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4a2c      	ldr	r2, [pc, #176]	; (8003330 <HAL_I2C_Init+0x278>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d802      	bhi.n	8003288 <HAL_I2C_Init+0x1d0>
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	3301      	adds	r3, #1
 8003286:	e009      	b.n	800329c <HAL_I2C_Init+0x1e4>
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	4a2b      	ldr	r2, [pc, #172]	; (8003340 <HAL_I2C_Init+0x288>)
 8003294:	fba2 2303 	umull	r2, r3, r2, r3
 8003298:	099b      	lsrs	r3, r3, #6
 800329a:	3301      	adds	r3, #1
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	430b      	orrs	r3, r1
 80032a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	491e      	ldr	r1, [pc, #120]	; (8003330 <HAL_I2C_Init+0x278>)
 80032b8:	428b      	cmp	r3, r1
 80032ba:	d819      	bhi.n	80032f0 <HAL_I2C_Init+0x238>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1e59      	subs	r1, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80032ca:	1c59      	adds	r1, r3, #1
 80032cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032d0:	400b      	ands	r3, r1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <HAL_I2C_Init+0x234>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1e59      	subs	r1, r3, #1
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032e4:	3301      	adds	r3, #1
 80032e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ea:	e065      	b.n	80033b8 <HAL_I2C_Init+0x300>
 80032ec:	2304      	movs	r3, #4
 80032ee:	e063      	b.n	80033b8 <HAL_I2C_Init+0x300>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d125      	bne.n	8003344 <HAL_I2C_Init+0x28c>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1e58      	subs	r0, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6859      	ldr	r1, [r3, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	440b      	add	r3, r1
 8003306:	fbb0 f3f3 	udiv	r3, r0, r3
 800330a:	3301      	adds	r3, #1
 800330c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	e026      	b.n	800336a <HAL_I2C_Init+0x2b2>
 800331c:	40005400 	.word	0x40005400
 8003320:	40005800 	.word	0x40005800
 8003324:	40005c00 	.word	0x40005c00
 8003328:	08008c04 	.word	0x08008c04
 800332c:	00061a80 	.word	0x00061a80
 8003330:	000186a0 	.word	0x000186a0
 8003334:	001e847f 	.word	0x001e847f
 8003338:	003d08ff 	.word	0x003d08ff
 800333c:	431bde83 	.word	0x431bde83
 8003340:	10624dd3 	.word	0x10624dd3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1e58      	subs	r0, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6859      	ldr	r1, [r3, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	0099      	lsls	r1, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	fbb0 f3f3 	udiv	r3, r0, r3
 800335a:	3301      	adds	r3, #1
 800335c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003360:	2b00      	cmp	r3, #0
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_I2C_Init+0x2ba>
 800336e:	2301      	movs	r3, #1
 8003370:	e022      	b.n	80033b8 <HAL_I2C_Init+0x300>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10e      	bne.n	8003398 <HAL_I2C_Init+0x2e0>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	1e58      	subs	r0, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6859      	ldr	r1, [r3, #4]
 8003382:	460b      	mov	r3, r1
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	440b      	add	r3, r1
 8003388:	fbb0 f3f3 	udiv	r3, r0, r3
 800338c:	3301      	adds	r3, #1
 800338e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003396:	e00f      	b.n	80033b8 <HAL_I2C_Init+0x300>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1e58      	subs	r0, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	0099      	lsls	r1, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ae:	3301      	adds	r3, #1
 80033b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	6809      	ldr	r1, [r1, #0]
 80033bc:	4313      	orrs	r3, r2
 80033be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69da      	ldr	r2, [r3, #28]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6911      	ldr	r1, [r2, #16]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	68d2      	ldr	r2, [r2, #12]
 80033f2:	4311      	orrs	r1, r2
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6812      	ldr	r2, [r2, #0]
 80033f8:	430b      	orrs	r3, r1
 80033fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695a      	ldr	r2, [r3, #20]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop

08003450 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b088      	sub	sp, #32
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e1e7      	b.n	8003832 <HAL_I2S_Init+0x3e2>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a92      	ldr	r2, [pc, #584]	; (80036b0 <HAL_I2S_Init+0x260>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d018      	beq.n	800349e <HAL_I2S_Init+0x4e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a90      	ldr	r2, [pc, #576]	; (80036b4 <HAL_I2S_Init+0x264>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d013      	beq.n	800349e <HAL_I2S_Init+0x4e>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a8f      	ldr	r2, [pc, #572]	; (80036b8 <HAL_I2S_Init+0x268>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d00e      	beq.n	800349e <HAL_I2S_Init+0x4e>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a8d      	ldr	r2, [pc, #564]	; (80036bc <HAL_I2S_Init+0x26c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d009      	beq.n	800349e <HAL_I2S_Init+0x4e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a8c      	ldr	r2, [pc, #560]	; (80036c0 <HAL_I2S_Init+0x270>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d004      	beq.n	800349e <HAL_I2S_Init+0x4e>
 8003494:	f240 111b 	movw	r1, #283	; 0x11b
 8003498:	488a      	ldr	r0, [pc, #552]	; (80036c4 <HAL_I2S_Init+0x274>)
 800349a:	f7fd fbb6 	bl	8000c0a <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d013      	beq.n	80034ce <HAL_I2S_Init+0x7e>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ae:	d00e      	beq.n	80034ce <HAL_I2S_Init+0x7e>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034b8:	d009      	beq.n	80034ce <HAL_I2S_Init+0x7e>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034c2:	d004      	beq.n	80034ce <HAL_I2S_Init+0x7e>
 80034c4:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80034c8:	487e      	ldr	r0, [pc, #504]	; (80036c4 <HAL_I2S_Init+0x274>)
 80034ca:	f7fd fb9e 	bl	8000c0a <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d014      	beq.n	8003500 <HAL_I2S_Init+0xb0>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	2b10      	cmp	r3, #16
 80034dc:	d010      	beq.n	8003500 <HAL_I2S_Init+0xb0>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d00c      	beq.n	8003500 <HAL_I2S_Init+0xb0>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b30      	cmp	r3, #48	; 0x30
 80034ec:	d008      	beq.n	8003500 <HAL_I2S_Init+0xb0>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2bb0      	cmp	r3, #176	; 0xb0
 80034f4:	d004      	beq.n	8003500 <HAL_I2S_Init+0xb0>
 80034f6:	f240 111d 	movw	r1, #285	; 0x11d
 80034fa:	4872      	ldr	r0, [pc, #456]	; (80036c4 <HAL_I2S_Init+0x274>)
 80034fc:	f7fd fb85 	bl	8000c0a <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d010      	beq.n	800352a <HAL_I2S_Init+0xda>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d00c      	beq.n	800352a <HAL_I2S_Init+0xda>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b03      	cmp	r3, #3
 8003516:	d008      	beq.n	800352a <HAL_I2S_Init+0xda>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	2b05      	cmp	r3, #5
 800351e:	d004      	beq.n	800352a <HAL_I2S_Init+0xda>
 8003520:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8003524:	4867      	ldr	r0, [pc, #412]	; (80036c4 <HAL_I2S_Init+0x274>)
 8003526:	f7fd fb70 	bl	8000c0a <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003532:	d008      	beq.n	8003546 <HAL_I2S_Init+0xf6>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d004      	beq.n	8003546 <HAL_I2S_Init+0xf6>
 800353c:	f240 111f 	movw	r1, #287	; 0x11f
 8003540:	4860      	ldr	r0, [pc, #384]	; (80036c4 <HAL_I2S_Init+0x274>)
 8003542:	f7fd fb62 	bl	8000c0a <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800354e:	d304      	bcc.n	800355a <HAL_I2S_Init+0x10a>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	4a5c      	ldr	r2, [pc, #368]	; (80036c8 <HAL_I2S_Init+0x278>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d908      	bls.n	800356c <HAL_I2S_Init+0x11c>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d004      	beq.n	800356c <HAL_I2S_Init+0x11c>
 8003562:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003566:	4857      	ldr	r0, [pc, #348]	; (80036c4 <HAL_I2S_Init+0x274>)
 8003568:	f7fd fb4f 	bl	8000c0a <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d008      	beq.n	8003586 <HAL_I2S_Init+0x136>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	2b08      	cmp	r3, #8
 800357a:	d004      	beq.n	8003586 <HAL_I2S_Init+0x136>
 800357c:	f240 1121 	movw	r1, #289	; 0x121
 8003580:	4850      	ldr	r0, [pc, #320]	; (80036c4 <HAL_I2S_Init+0x274>)
 8003582:	f7fd fb42 	bl	8000c0a <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d008      	beq.n	80035a0 <HAL_I2S_Init+0x150>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d004      	beq.n	80035a0 <HAL_I2S_Init+0x150>
 8003596:	f44f 7191 	mov.w	r1, #290	; 0x122
 800359a:	484a      	ldr	r0, [pc, #296]	; (80036c4 <HAL_I2S_Init+0x274>)
 800359c:	f7fd fb35 	bl	8000c0a <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d109      	bne.n	80035c0 <HAL_I2S_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a45      	ldr	r2, [pc, #276]	; (80036cc <HAL_I2S_Init+0x27c>)
 80035b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fd f940 	bl	8000840 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6812      	ldr	r2, [r2, #0]
 80035d2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035d6:	f023 030f 	bic.w	r3, r3, #15
 80035da:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2202      	movs	r2, #2
 80035e2:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d073      	beq.n	80036d4 <HAL_I2S_Init+0x284>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d102      	bne.n	80035fa <HAL_I2S_Init+0x1aa>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80035f4:	2310      	movs	r3, #16
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	e001      	b.n	80035fe <HAL_I2S_Init+0x1ae>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80035fa:	2320      	movs	r3, #32
 80035fc:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b20      	cmp	r3, #32
 8003604:	d802      	bhi.n	800360c <HAL_I2S_Init+0x1bc>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800360c:	2001      	movs	r0, #1
 800360e:	f001 fc6f 	bl	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003612:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800361c:	d125      	bne.n	800366a <HAL_I2S_Init+0x21a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d010      	beq.n	8003648 <HAL_I2S_Init+0x1f8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	461a      	mov	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003642:	3305      	adds	r3, #5
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	e01f      	b.n	8003688 <HAL_I2S_Init+0x238>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	461a      	mov	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	fbb2 f3f3 	udiv	r3, r2, r3
 8003664:	3305      	adds	r3, #5
 8003666:	613b      	str	r3, [r7, #16]
 8003668:	e00e      	b.n	8003688 <HAL_I2S_Init+0x238>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003672:	4613      	mov	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4413      	add	r3, r2
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	461a      	mov	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	fbb2 f3f3 	udiv	r3, r2, r3
 8003684:	3305      	adds	r3, #5
 8003686:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	4a11      	ldr	r2, [pc, #68]	; (80036d0 <HAL_I2S_Init+0x280>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	08db      	lsrs	r3, r3, #3
 8003692:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	085b      	lsrs	r3, r3, #1
 80036a4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	61bb      	str	r3, [r7, #24]
 80036ac:	e016      	b.n	80036dc <HAL_I2S_Init+0x28c>
 80036ae:	bf00      	nop
 80036b0:	40013000 	.word	0x40013000
 80036b4:	40003800 	.word	0x40003800
 80036b8:	40003c00 	.word	0x40003c00
 80036bc:	40013400 	.word	0x40013400
 80036c0:	40015000 	.word	0x40015000
 80036c4:	08008c3c 	.word	0x08008c3c
 80036c8:	0002ee00 	.word	0x0002ee00
 80036cc:	08003943 	.word	0x08003943
 80036d0:	cccccccd 	.word	0xcccccccd
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80036d4:	2302      	movs	r3, #2
 80036d6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d902      	bls.n	80036e8 <HAL_I2S_Init+0x298>
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	2bff      	cmp	r3, #255	; 0xff
 80036e6:	d907      	bls.n	80036f8 <HAL_I2S_Init+0x2a8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ec:	f043 0210 	orr.w	r2, r3, #16
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e09c      	b.n	8003832 <HAL_I2S_Init+0x3e2>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	ea42 0103 	orr.w	r1, r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	430a      	orrs	r2, r1
 800370a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003716:	f023 030f 	bic.w	r3, r3, #15
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	6851      	ldr	r1, [r2, #4]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6892      	ldr	r2, [r2, #8]
 8003722:	4311      	orrs	r1, r2
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	68d2      	ldr	r2, [r2, #12]
 8003728:	4311      	orrs	r1, r2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6992      	ldr	r2, [r2, #24]
 800372e:	430a      	orrs	r2, r1
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800373a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_I2S_Init+0x306>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d004      	beq.n	8003756 <HAL_I2S_Init+0x306>
 800374c:	f240 11bd 	movw	r1, #445	; 0x1bd
 8003750:	483a      	ldr	r0, [pc, #232]	; (800383c <HAL_I2S_Init+0x3ec>)
 8003752:	f7fd fa5a 	bl	8000c0a <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d161      	bne.n	8003822 <HAL_I2S_Init+0x3d2>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a37      	ldr	r2, [pc, #220]	; (8003840 <HAL_I2S_Init+0x3f0>)
 8003762:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a36      	ldr	r2, [pc, #216]	; (8003844 <HAL_I2S_Init+0x3f4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d101      	bne.n	8003772 <HAL_I2S_Init+0x322>
 800376e:	4b36      	ldr	r3, [pc, #216]	; (8003848 <HAL_I2S_Init+0x3f8>)
 8003770:	e001      	b.n	8003776 <HAL_I2S_Init+0x326>
 8003772:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6812      	ldr	r2, [r2, #0]
 800377c:	4931      	ldr	r1, [pc, #196]	; (8003844 <HAL_I2S_Init+0x3f4>)
 800377e:	428a      	cmp	r2, r1
 8003780:	d101      	bne.n	8003786 <HAL_I2S_Init+0x336>
 8003782:	4a31      	ldr	r2, [pc, #196]	; (8003848 <HAL_I2S_Init+0x3f8>)
 8003784:	e001      	b.n	800378a <HAL_I2S_Init+0x33a>
 8003786:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800378a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800378e:	f023 030f 	bic.w	r3, r3, #15
 8003792:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a2a      	ldr	r2, [pc, #168]	; (8003844 <HAL_I2S_Init+0x3f4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d101      	bne.n	80037a2 <HAL_I2S_Init+0x352>
 800379e:	4b2a      	ldr	r3, [pc, #168]	; (8003848 <HAL_I2S_Init+0x3f8>)
 80037a0:	e001      	b.n	80037a6 <HAL_I2S_Init+0x356>
 80037a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a6:	2202      	movs	r2, #2
 80037a8:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a25      	ldr	r2, [pc, #148]	; (8003844 <HAL_I2S_Init+0x3f4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d101      	bne.n	80037b8 <HAL_I2S_Init+0x368>
 80037b4:	4b24      	ldr	r3, [pc, #144]	; (8003848 <HAL_I2S_Init+0x3f8>)
 80037b6:	e001      	b.n	80037bc <HAL_I2S_Init+0x36c>
 80037b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037c8:	d003      	beq.n	80037d2 <HAL_I2S_Init+0x382>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d103      	bne.n	80037da <HAL_I2S_Init+0x38a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80037d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	e001      	b.n	80037de <HAL_I2S_Init+0x38e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80037da:	2300      	movs	r3, #0
 80037dc:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80037e8:	4313      	orrs	r3, r2
 80037ea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80037f2:	4313      	orrs	r3, r2
 80037f4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80037fc:	4313      	orrs	r3, r2
 80037fe:	b29a      	uxth	r2, r3
 8003800:	897b      	ldrh	r3, [r7, #10]
 8003802:	4313      	orrs	r3, r2
 8003804:	b29b      	uxth	r3, r3
 8003806:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800380a:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a0c      	ldr	r2, [pc, #48]	; (8003844 <HAL_I2S_Init+0x3f4>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d101      	bne.n	800381a <HAL_I2S_Init+0x3ca>
 8003816:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <HAL_I2S_Init+0x3f8>)
 8003818:	e001      	b.n	800381e <HAL_I2S_Init+0x3ce>
 800381a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800381e:	897a      	ldrh	r2, [r7, #10]
 8003820:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3720      	adds	r7, #32
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	08008c3c 	.word	0x08008c3c
 8003840:	08003a59 	.word	0x08003a59
 8003844:	40003800 	.word	0x40003800
 8003848:	40003400 	.word	0x40003400

0800384c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	881a      	ldrh	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	1c9a      	adds	r2, r3, #2
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10e      	bne.n	80038dc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038cc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff ffb8 	bl	800384c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80038dc:	bf00      	nop
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	b292      	uxth	r2, r2
 80038f8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fe:	1c9a      	adds	r2, r3, #2
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003916:	b29b      	uxth	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10e      	bne.n	800393a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800392a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff ff93 	bl	8003860 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b086      	sub	sp, #24
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b04      	cmp	r3, #4
 800395c:	d13a      	bne.n	80039d4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b01      	cmp	r3, #1
 8003966:	d109      	bne.n	800397c <I2S_IRQHandler+0x3a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003972:	2b40      	cmp	r3, #64	; 0x40
 8003974:	d102      	bne.n	800397c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ffb4 	bl	80038e4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003982:	2b40      	cmp	r3, #64	; 0x40
 8003984:	d126      	bne.n	80039d4 <I2S_IRQHandler+0x92>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b20      	cmp	r3, #32
 8003992:	d11f      	bne.n	80039d4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039a2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039a4:	2300      	movs	r3, #0
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f043 0202 	orr.w	r2, r3, #2
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff ff50 	bl	8003874 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d136      	bne.n	8003a4e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d109      	bne.n	80039fe <I2S_IRQHandler+0xbc>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f4:	2b80      	cmp	r3, #128	; 0x80
 80039f6:	d102      	bne.n	80039fe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ff45 	bl	8003888 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d122      	bne.n	8003a4e <I2S_IRQHandler+0x10c>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d11b      	bne.n	8003a4e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a24:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a40:	f043 0204 	orr.w	r2, r3, #4
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff ff13 	bl	8003874 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a4e:	bf00      	nop
 8003a50:	3718      	adds	r7, #24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a92      	ldr	r2, [pc, #584]	; (8003cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d101      	bne.n	8003a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003a72:	4b92      	ldr	r3, [pc, #584]	; (8003cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a74:	e001      	b.n	8003a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003a76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a8b      	ldr	r2, [pc, #556]	; (8003cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d101      	bne.n	8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003a90:	4b8a      	ldr	r3, [pc, #552]	; (8003cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a92:	e001      	b.n	8003a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003a94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aa4:	d004      	beq.n	8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f040 8099 	bne.w	8003be2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d107      	bne.n	8003aca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f925 	bl	8003d14 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d107      	bne.n	8003ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f9c8 	bl	8003e74 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aea:	2b40      	cmp	r3, #64	; 0x40
 8003aec:	d13a      	bne.n	8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f003 0320 	and.w	r3, r3, #32
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d035      	beq.n	8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a6e      	ldr	r2, [pc, #440]	; (8003cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d101      	bne.n	8003b06 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003b02:	4b6e      	ldr	r3, [pc, #440]	; (8003cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b04:	e001      	b.n	8003b0a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003b06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4969      	ldr	r1, [pc, #420]	; (8003cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b12:	428b      	cmp	r3, r1
 8003b14:	d101      	bne.n	8003b1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003b16:	4b69      	ldr	r3, [pc, #420]	; (8003cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b18:	e001      	b.n	8003b1e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003b1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b22:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b34:	2300      	movs	r3, #0
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	f043 0202 	orr.w	r2, r3, #2
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff fe88 	bl	8003874 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	f040 80c3 	bne.w	8003cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 80bd 	beq.w	8003cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b8a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a49      	ldr	r2, [pc, #292]	; (8003cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d101      	bne.n	8003b9a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003b96:	4b49      	ldr	r3, [pc, #292]	; (8003cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b98:	e001      	b.n	8003b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003b9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4944      	ldr	r1, [pc, #272]	; (8003cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ba6:	428b      	cmp	r3, r1
 8003ba8:	d101      	bne.n	8003bae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003baa:	4b44      	ldr	r3, [pc, #272]	; (8003cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bac:	e001      	b.n	8003bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003bae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bb6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	60bb      	str	r3, [r7, #8]
 8003bc4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	f043 0204 	orr.w	r2, r3, #4
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7ff fe4a 	bl	8003874 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003be0:	e089      	b.n	8003cf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d107      	bne.n	8003bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f000 f8be 	bl	8003d78 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d107      	bne.n	8003c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f8fd 	bl	8003e10 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1c:	2b40      	cmp	r3, #64	; 0x40
 8003c1e:	d12f      	bne.n	8003c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d02a      	beq.n	8003c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c38:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a1e      	ldr	r2, [pc, #120]	; (8003cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d101      	bne.n	8003c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003c44:	4b1d      	ldr	r3, [pc, #116]	; (8003cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c46:	e001      	b.n	8003c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003c48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4919      	ldr	r1, [pc, #100]	; (8003cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c54:	428b      	cmp	r3, r1
 8003c56:	d101      	bne.n	8003c5c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003c58:	4b18      	ldr	r3, [pc, #96]	; (8003cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c5a:	e001      	b.n	8003c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003c5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c64:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	f043 0202 	orr.w	r2, r3, #2
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff fdfa 	bl	8003874 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d136      	bne.n	8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f003 0320 	and.w	r3, r3, #32
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d031      	beq.n	8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a07      	ldr	r2, [pc, #28]	; (8003cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d101      	bne.n	8003ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003c9e:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ca0:	e001      	b.n	8003ca6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003ca2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4902      	ldr	r1, [pc, #8]	; (8003cb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cae:	428b      	cmp	r3, r1
 8003cb0:	d106      	bne.n	8003cc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003cb2:	4b02      	ldr	r3, [pc, #8]	; (8003cbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cb4:	e006      	b.n	8003cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003cb6:	bf00      	nop
 8003cb8:	40003800 	.word	0x40003800
 8003cbc:	40003400 	.word	0x40003400
 8003cc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cc8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cd8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	f043 0204 	orr.w	r2, r3, #4
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff fdc0 	bl	8003874 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cf4:	e000      	b.n	8003cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003cf6:	bf00      	nop
}
 8003cf8:	bf00      	nop
 8003cfa:	3720      	adds	r7, #32
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	1c99      	adds	r1, r3, #2
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6251      	str	r1, [r2, #36]	; 0x24
 8003d26:	881a      	ldrh	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d113      	bne.n	8003d6e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d106      	bne.n	8003d6e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff ffc9 	bl	8003d00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	1c99      	adds	r1, r3, #2
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6251      	str	r1, [r2, #36]	; 0x24
 8003d8a:	8819      	ldrh	r1, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1d      	ldr	r2, [pc, #116]	; (8003e08 <I2SEx_TxISR_I2SExt+0x90>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d101      	bne.n	8003d9a <I2SEx_TxISR_I2SExt+0x22>
 8003d96:	4b1d      	ldr	r3, [pc, #116]	; (8003e0c <I2SEx_TxISR_I2SExt+0x94>)
 8003d98:	e001      	b.n	8003d9e <I2SEx_TxISR_I2SExt+0x26>
 8003d9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d9e:	460a      	mov	r2, r1
 8003da0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d121      	bne.n	8003dfe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <I2SEx_TxISR_I2SExt+0x90>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d101      	bne.n	8003dc8 <I2SEx_TxISR_I2SExt+0x50>
 8003dc4:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <I2SEx_TxISR_I2SExt+0x94>)
 8003dc6:	e001      	b.n	8003dcc <I2SEx_TxISR_I2SExt+0x54>
 8003dc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	490d      	ldr	r1, [pc, #52]	; (8003e08 <I2SEx_TxISR_I2SExt+0x90>)
 8003dd4:	428b      	cmp	r3, r1
 8003dd6:	d101      	bne.n	8003ddc <I2SEx_TxISR_I2SExt+0x64>
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <I2SEx_TxISR_I2SExt+0x94>)
 8003dda:	e001      	b.n	8003de0 <I2SEx_TxISR_I2SExt+0x68>
 8003ddc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003de0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003de4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d106      	bne.n	8003dfe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff ff81 	bl	8003d00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dfe:	bf00      	nop
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40003800 	.word	0x40003800
 8003e0c:	40003400 	.word	0x40003400

08003e10 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68d8      	ldr	r0, [r3, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	1c99      	adds	r1, r3, #2
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e28:	b282      	uxth	r2, r0
 8003e2a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d113      	bne.n	8003e6c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e52:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d106      	bne.n	8003e6c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7ff ff4a 	bl	8003d00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e6c:	bf00      	nop
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a20      	ldr	r2, [pc, #128]	; (8003f04 <I2SEx_RxISR_I2SExt+0x90>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d101      	bne.n	8003e8a <I2SEx_RxISR_I2SExt+0x16>
 8003e86:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <I2SEx_RxISR_I2SExt+0x94>)
 8003e88:	e001      	b.n	8003e8e <I2SEx_RxISR_I2SExt+0x1a>
 8003e8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e8e:	68d8      	ldr	r0, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	1c99      	adds	r1, r3, #2
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e9a:	b282      	uxth	r2, r0
 8003e9c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d121      	bne.n	8003efa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a12      	ldr	r2, [pc, #72]	; (8003f04 <I2SEx_RxISR_I2SExt+0x90>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d101      	bne.n	8003ec4 <I2SEx_RxISR_I2SExt+0x50>
 8003ec0:	4b11      	ldr	r3, [pc, #68]	; (8003f08 <I2SEx_RxISR_I2SExt+0x94>)
 8003ec2:	e001      	b.n	8003ec8 <I2SEx_RxISR_I2SExt+0x54>
 8003ec4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	490d      	ldr	r1, [pc, #52]	; (8003f04 <I2SEx_RxISR_I2SExt+0x90>)
 8003ed0:	428b      	cmp	r3, r1
 8003ed2:	d101      	bne.n	8003ed8 <I2SEx_RxISR_I2SExt+0x64>
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <I2SEx_RxISR_I2SExt+0x94>)
 8003ed6:	e001      	b.n	8003edc <I2SEx_RxISR_I2SExt+0x68>
 8003ed8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003edc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ee0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d106      	bne.n	8003efa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff ff03 	bl	8003d00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40003800 	.word	0x40003800
 8003f08:	40003400 	.word	0x40003400

08003f0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e314      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b0f      	cmp	r3, #15
 8003f24:	d903      	bls.n	8003f2e <HAL_RCC_OscConfig+0x22>
 8003f26:	21e6      	movs	r1, #230	; 0xe6
 8003f28:	4897      	ldr	r0, [pc, #604]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8003f2a:	f7fc fe6e 	bl	8000c0a <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 8088 	beq.w	800404c <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00d      	beq.n	8003f60 <HAL_RCC_OscConfig+0x54>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f4c:	d008      	beq.n	8003f60 <HAL_RCC_OscConfig+0x54>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f56:	d003      	beq.n	8003f60 <HAL_RCC_OscConfig+0x54>
 8003f58:	21eb      	movs	r1, #235	; 0xeb
 8003f5a:	488b      	ldr	r0, [pc, #556]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8003f5c:	f7fc fe55 	bl	8000c0a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f60:	4b8a      	ldr	r3, [pc, #552]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 030c 	and.w	r3, r3, #12
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d00c      	beq.n	8003f86 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f6c:	4b87      	ldr	r3, [pc, #540]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d112      	bne.n	8003f9e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f78:	4b84      	ldr	r3, [pc, #528]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f84:	d10b      	bne.n	8003f9e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f86:	4b81      	ldr	r3, [pc, #516]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d05b      	beq.n	800404a <HAL_RCC_OscConfig+0x13e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d157      	bne.n	800404a <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e2d4      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa6:	d106      	bne.n	8003fb6 <HAL_RCC_OscConfig+0xaa>
 8003fa8:	4b78      	ldr	r3, [pc, #480]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a77      	ldr	r2, [pc, #476]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	e01d      	b.n	8003ff2 <HAL_RCC_OscConfig+0xe6>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fbe:	d10c      	bne.n	8003fda <HAL_RCC_OscConfig+0xce>
 8003fc0:	4b72      	ldr	r3, [pc, #456]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a71      	ldr	r2, [pc, #452]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003fc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	4b6f      	ldr	r3, [pc, #444]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a6e      	ldr	r2, [pc, #440]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	e00b      	b.n	8003ff2 <HAL_RCC_OscConfig+0xe6>
 8003fda:	4b6c      	ldr	r3, [pc, #432]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a6b      	ldr	r2, [pc, #428]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	4b69      	ldr	r3, [pc, #420]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a68      	ldr	r2, [pc, #416]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8003fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ff0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d013      	beq.n	8004022 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffa:	f7fc ffcb 	bl	8000f94 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004002:	f7fc ffc7 	bl	8000f94 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b64      	cmp	r3, #100	; 0x64
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e299      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004014:	4b5d      	ldr	r3, [pc, #372]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0f0      	beq.n	8004002 <HAL_RCC_OscConfig+0xf6>
 8004020:	e014      	b.n	800404c <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004022:	f7fc ffb7 	bl	8000f94 <HAL_GetTick>
 8004026:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800402a:	f7fc ffb3 	bl	8000f94 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b64      	cmp	r3, #100	; 0x64
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e285      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403c:	4b53      	ldr	r3, [pc, #332]	; (800418c <HAL_RCC_OscConfig+0x280>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1f0      	bne.n	800402a <HAL_RCC_OscConfig+0x11e>
 8004048:	e000      	b.n	800404c <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800404a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d079      	beq.n	800414c <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d008      	beq.n	8004072 <HAL_RCC_OscConfig+0x166>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d004      	beq.n	8004072 <HAL_RCC_OscConfig+0x166>
 8004068:	f240 111d 	movw	r1, #285	; 0x11d
 800406c:	4846      	ldr	r0, [pc, #280]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 800406e:	f7fc fdcc 	bl	8000c0a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b1f      	cmp	r3, #31
 8004078:	d904      	bls.n	8004084 <HAL_RCC_OscConfig+0x178>
 800407a:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800407e:	4842      	ldr	r0, [pc, #264]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 8004080:	f7fc fdc3 	bl	8000c0a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004084:	4b41      	ldr	r3, [pc, #260]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 030c 	and.w	r3, r3, #12
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00b      	beq.n	80040a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004090:	4b3e      	ldr	r3, [pc, #248]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004098:	2b08      	cmp	r3, #8
 800409a:	d11c      	bne.n	80040d6 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800409c:	4b3b      	ldr	r3, [pc, #236]	; (800418c <HAL_RCC_OscConfig+0x280>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d116      	bne.n	80040d6 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a8:	4b38      	ldr	r3, [pc, #224]	; (800418c <HAL_RCC_OscConfig+0x280>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <HAL_RCC_OscConfig+0x1b4>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d001      	beq.n	80040c0 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e243      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c0:	4b32      	ldr	r3, [pc, #200]	; (800418c <HAL_RCC_OscConfig+0x280>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	492f      	ldr	r1, [pc, #188]	; (800418c <HAL_RCC_OscConfig+0x280>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d4:	e03a      	b.n	800414c <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d020      	beq.n	8004120 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040de:	4b2c      	ldr	r3, [pc, #176]	; (8004190 <HAL_RCC_OscConfig+0x284>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fc ff56 	bl	8000f94 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ec:	f7fc ff52 	bl	8000f94 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e224      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fe:	4b23      	ldr	r3, [pc, #140]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410a:	4b20      	ldr	r3, [pc, #128]	; (800418c <HAL_RCC_OscConfig+0x280>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	491c      	ldr	r1, [pc, #112]	; (800418c <HAL_RCC_OscConfig+0x280>)
 800411a:	4313      	orrs	r3, r2
 800411c:	600b      	str	r3, [r1, #0]
 800411e:	e015      	b.n	800414c <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004120:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <HAL_RCC_OscConfig+0x284>)
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004126:	f7fc ff35 	bl	8000f94 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800412e:	f7fc ff31 	bl	8000f94 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e203      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004140:	4b12      	ldr	r3, [pc, #72]	; (800418c <HAL_RCC_OscConfig+0x280>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f0      	bne.n	800412e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b00      	cmp	r3, #0
 8004156:	d045      	beq.n	80041e4 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_RCC_OscConfig+0x266>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d004      	beq.n	8004172 <HAL_RCC_OscConfig+0x266>
 8004168:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800416c:	4806      	ldr	r0, [pc, #24]	; (8004188 <HAL_RCC_OscConfig+0x27c>)
 800416e:	f7fc fd4c 	bl	8000c0a <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01e      	beq.n	80041b8 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800417a:	4b06      	ldr	r3, [pc, #24]	; (8004194 <HAL_RCC_OscConfig+0x288>)
 800417c:	2201      	movs	r2, #1
 800417e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004180:	f7fc ff08 	bl	8000f94 <HAL_GetTick>
 8004184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004186:	e010      	b.n	80041aa <HAL_RCC_OscConfig+0x29e>
 8004188:	08008c74 	.word	0x08008c74
 800418c:	40023800 	.word	0x40023800
 8004190:	42470000 	.word	0x42470000
 8004194:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004198:	f7fc fefc 	bl	8000f94 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e1ce      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041aa:	4b5e      	ldr	r3, [pc, #376]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80041ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f0      	beq.n	8004198 <HAL_RCC_OscConfig+0x28c>
 80041b6:	e015      	b.n	80041e4 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b8:	4b5b      	ldr	r3, [pc, #364]	; (8004328 <HAL_RCC_OscConfig+0x41c>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041be:	f7fc fee9 	bl	8000f94 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x2cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041c6:	f7fc fee5 	bl	8000f94 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e1b7      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d8:	4b52      	ldr	r3, [pc, #328]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80041da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1f0      	bne.n	80041c6 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 80b0 	beq.w	8004352 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f2:	2300      	movs	r3, #0
 80041f4:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00c      	beq.n	8004218 <HAL_RCC_OscConfig+0x30c>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d008      	beq.n	8004218 <HAL_RCC_OscConfig+0x30c>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b05      	cmp	r3, #5
 800420c:	d004      	beq.n	8004218 <HAL_RCC_OscConfig+0x30c>
 800420e:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8004212:	4846      	ldr	r0, [pc, #280]	; (800432c <HAL_RCC_OscConfig+0x420>)
 8004214:	f7fc fcf9 	bl	8000c0a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004218:	4b42      	ldr	r3, [pc, #264]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10f      	bne.n	8004244 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004224:	2300      	movs	r3, #0
 8004226:	60bb      	str	r3, [r7, #8]
 8004228:	4b3e      	ldr	r3, [pc, #248]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	4a3d      	ldr	r2, [pc, #244]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 800422e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004232:	6413      	str	r3, [r2, #64]	; 0x40
 8004234:	4b3b      	ldr	r3, [pc, #236]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004240:	2301      	movs	r3, #1
 8004242:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004244:	4b3a      	ldr	r3, [pc, #232]	; (8004330 <HAL_RCC_OscConfig+0x424>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d118      	bne.n	8004282 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004250:	4b37      	ldr	r3, [pc, #220]	; (8004330 <HAL_RCC_OscConfig+0x424>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a36      	ldr	r2, [pc, #216]	; (8004330 <HAL_RCC_OscConfig+0x424>)
 8004256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800425c:	f7fc fe9a 	bl	8000f94 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004264:	f7fc fe96 	bl	8000f94 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e168      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004276:	4b2e      	ldr	r3, [pc, #184]	; (8004330 <HAL_RCC_OscConfig+0x424>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0f0      	beq.n	8004264 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d106      	bne.n	8004298 <HAL_RCC_OscConfig+0x38c>
 800428a:	4b26      	ldr	r3, [pc, #152]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	4a25      	ldr	r2, [pc, #148]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	6713      	str	r3, [r2, #112]	; 0x70
 8004296:	e01c      	b.n	80042d2 <HAL_RCC_OscConfig+0x3c6>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b05      	cmp	r3, #5
 800429e:	d10c      	bne.n	80042ba <HAL_RCC_OscConfig+0x3ae>
 80042a0:	4b20      	ldr	r3, [pc, #128]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80042a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a4:	4a1f      	ldr	r2, [pc, #124]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80042a6:	f043 0304 	orr.w	r3, r3, #4
 80042aa:	6713      	str	r3, [r2, #112]	; 0x70
 80042ac:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80042ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b0:	4a1c      	ldr	r2, [pc, #112]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80042b2:	f043 0301 	orr.w	r3, r3, #1
 80042b6:	6713      	str	r3, [r2, #112]	; 0x70
 80042b8:	e00b      	b.n	80042d2 <HAL_RCC_OscConfig+0x3c6>
 80042ba:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042be:	4a19      	ldr	r2, [pc, #100]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80042c0:	f023 0301 	bic.w	r3, r3, #1
 80042c4:	6713      	str	r3, [r2, #112]	; 0x70
 80042c6:	4b17      	ldr	r3, [pc, #92]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	4a16      	ldr	r2, [pc, #88]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80042cc:	f023 0304 	bic.w	r3, r3, #4
 80042d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d015      	beq.n	8004306 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042da:	f7fc fe5b 	bl	8000f94 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e0:	e00a      	b.n	80042f8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e2:	f7fc fe57 	bl	8000f94 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e127      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f8:	4b0a      	ldr	r3, [pc, #40]	; (8004324 <HAL_RCC_OscConfig+0x418>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ee      	beq.n	80042e2 <HAL_RCC_OscConfig+0x3d6>
 8004304:	e01c      	b.n	8004340 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004306:	f7fc fe45 	bl	8000f94 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800430c:	e012      	b.n	8004334 <HAL_RCC_OscConfig+0x428>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fc fe41 	bl	8000f94 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	; 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d909      	bls.n	8004334 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e111      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
 8004324:	40023800 	.word	0x40023800
 8004328:	42470e80 	.word	0x42470e80
 800432c:	08008c74 	.word	0x08008c74
 8004330:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004334:	4b86      	ldr	r3, [pc, #536]	; (8004550 <HAL_RCC_OscConfig+0x644>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e6      	bne.n	800430e <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004340:	7dfb      	ldrb	r3, [r7, #23]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d105      	bne.n	8004352 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004346:	4b82      	ldr	r3, [pc, #520]	; (8004550 <HAL_RCC_OscConfig+0x644>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	4a81      	ldr	r2, [pc, #516]	; (8004550 <HAL_RCC_OscConfig+0x644>)
 800434c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004350:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00c      	beq.n	8004374 <HAL_RCC_OscConfig+0x468>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d008      	beq.n	8004374 <HAL_RCC_OscConfig+0x468>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d004      	beq.n	8004374 <HAL_RCC_OscConfig+0x468>
 800436a:	f240 11cd 	movw	r1, #461	; 0x1cd
 800436e:	4879      	ldr	r0, [pc, #484]	; (8004554 <HAL_RCC_OscConfig+0x648>)
 8004370:	f7fc fc4b 	bl	8000c0a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 80e4 	beq.w	8004546 <HAL_RCC_OscConfig+0x63a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800437e:	4b74      	ldr	r3, [pc, #464]	; (8004550 <HAL_RCC_OscConfig+0x644>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
 8004386:	2b08      	cmp	r3, #8
 8004388:	f000 80a5 	beq.w	80044d6 <HAL_RCC_OscConfig+0x5ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	2b02      	cmp	r3, #2
 8004392:	f040 8089 	bne.w	80044a8 <HAL_RCC_OscConfig+0x59c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d009      	beq.n	80043b2 <HAL_RCC_OscConfig+0x4a6>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043a6:	d004      	beq.n	80043b2 <HAL_RCC_OscConfig+0x4a6>
 80043a8:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
 80043ac:	4869      	ldr	r0, [pc, #420]	; (8004554 <HAL_RCC_OscConfig+0x648>)
 80043ae:	f7fc fc2c 	bl	8000c0a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	2b3f      	cmp	r3, #63	; 0x3f
 80043b8:	d904      	bls.n	80043c4 <HAL_RCC_OscConfig+0x4b8>
 80043ba:	f240 11d7 	movw	r1, #471	; 0x1d7
 80043be:	4865      	ldr	r0, [pc, #404]	; (8004554 <HAL_RCC_OscConfig+0x648>)
 80043c0:	f7fc fc23 	bl	8000c0a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	2b31      	cmp	r3, #49	; 0x31
 80043ca:	d904      	bls.n	80043d6 <HAL_RCC_OscConfig+0x4ca>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80043d4:	d904      	bls.n	80043e0 <HAL_RCC_OscConfig+0x4d4>
 80043d6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80043da:	485e      	ldr	r0, [pc, #376]	; (8004554 <HAL_RCC_OscConfig+0x648>)
 80043dc:	f7fc fc15 	bl	8000c0a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d010      	beq.n	800440a <HAL_RCC_OscConfig+0x4fe>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d00c      	beq.n	800440a <HAL_RCC_OscConfig+0x4fe>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f4:	2b06      	cmp	r3, #6
 80043f6:	d008      	beq.n	800440a <HAL_RCC_OscConfig+0x4fe>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d004      	beq.n	800440a <HAL_RCC_OscConfig+0x4fe>
 8004400:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004404:	4853      	ldr	r0, [pc, #332]	; (8004554 <HAL_RCC_OscConfig+0x648>)
 8004406:	f7fc fc00 	bl	8000c0a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	2b01      	cmp	r3, #1
 8004410:	d903      	bls.n	800441a <HAL_RCC_OscConfig+0x50e>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004416:	2b0f      	cmp	r3, #15
 8004418:	d904      	bls.n	8004424 <HAL_RCC_OscConfig+0x518>
 800441a:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800441e:	484d      	ldr	r0, [pc, #308]	; (8004554 <HAL_RCC_OscConfig+0x648>)
 8004420:	f7fc fbf3 	bl	8000c0a <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004424:	4b4c      	ldr	r3, [pc, #304]	; (8004558 <HAL_RCC_OscConfig+0x64c>)
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442a:	f7fc fdb3 	bl	8000f94 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x538>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004432:	f7fc fdaf 	bl	8000f94 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x538>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e081      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004444:	4b42      	ldr	r3, [pc, #264]	; (8004550 <HAL_RCC_OscConfig+0x644>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f0      	bne.n	8004432 <HAL_RCC_OscConfig+0x526>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69da      	ldr	r2, [r3, #28]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445e:	019b      	lsls	r3, r3, #6
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004466:	085b      	lsrs	r3, r3, #1
 8004468:	3b01      	subs	r3, #1
 800446a:	041b      	lsls	r3, r3, #16
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004472:	061b      	lsls	r3, r3, #24
 8004474:	4936      	ldr	r1, [pc, #216]	; (8004550 <HAL_RCC_OscConfig+0x644>)
 8004476:	4313      	orrs	r3, r2
 8004478:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800447a:	4b37      	ldr	r3, [pc, #220]	; (8004558 <HAL_RCC_OscConfig+0x64c>)
 800447c:	2201      	movs	r2, #1
 800447e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004480:	f7fc fd88 	bl	8000f94 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004488:	f7fc fd84 	bl	8000f94 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e056      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800449a:	4b2d      	ldr	r3, [pc, #180]	; (8004550 <HAL_RCC_OscConfig+0x644>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x57c>
 80044a6:	e04e      	b.n	8004546 <HAL_RCC_OscConfig+0x63a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a8:	4b2b      	ldr	r3, [pc, #172]	; (8004558 <HAL_RCC_OscConfig+0x64c>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ae:	f7fc fd71 	bl	8000f94 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b6:	f7fc fd6d 	bl	8000f94 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e03f      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c8:	4b21      	ldr	r3, [pc, #132]	; (8004550 <HAL_RCC_OscConfig+0x644>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1f0      	bne.n	80044b6 <HAL_RCC_OscConfig+0x5aa>
 80044d4:	e037      	b.n	8004546 <HAL_RCC_OscConfig+0x63a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e032      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044e2:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <HAL_RCC_OscConfig+0x644>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d028      	beq.n	8004542 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d121      	bne.n	8004542 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004508:	429a      	cmp	r2, r3
 800450a:	d11a      	bne.n	8004542 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004512:	4013      	ands	r3, r2
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004518:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800451a:	4293      	cmp	r3, r2
 800451c:	d111      	bne.n	8004542 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	085b      	lsrs	r3, r3, #1
 800452a:	3b01      	subs	r3, #1
 800452c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800452e:	429a      	cmp	r2, r3
 8004530:	d107      	bne.n	8004542 <HAL_RCC_OscConfig+0x636>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800453e:	429a      	cmp	r2, r3
 8004540:	d001      	beq.n	8004546 <HAL_RCC_OscConfig+0x63a>
#endif
        {
          return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <HAL_RCC_OscConfig+0x63c>
        }
      }
    }
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40023800 	.word	0x40023800
 8004554:	08008c74 	.word	0x08008c74
 8004558:	42470060 	.word	0x42470060

0800455c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e174      	b.n	800485a <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_RCC_ClockConfig+0x24>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b0f      	cmp	r3, #15
 800457e:	d904      	bls.n	800458a <HAL_RCC_ClockConfig+0x2e>
 8004580:	f240 215a 	movw	r1, #602	; 0x25a
 8004584:	487b      	ldr	r0, [pc, #492]	; (8004774 <HAL_RCC_ClockConfig+0x218>)
 8004586:	f7fc fb40 	bl	8000c0a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d019      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x68>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d016      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x68>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b02      	cmp	r3, #2
 800459a:	d013      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x68>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d010      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x68>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d00d      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x68>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b05      	cmp	r3, #5
 80045ac:	d00a      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x68>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b06      	cmp	r3, #6
 80045b2:	d007      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x68>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	2b07      	cmp	r3, #7
 80045b8:	d004      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x68>
 80045ba:	f240 215b 	movw	r1, #603	; 0x25b
 80045be:	486d      	ldr	r0, [pc, #436]	; (8004774 <HAL_RCC_ClockConfig+0x218>)
 80045c0:	f7fc fb23 	bl	8000c0a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045c4:	4b6c      	ldr	r3, [pc, #432]	; (8004778 <HAL_RCC_ClockConfig+0x21c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d90c      	bls.n	80045ec <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d2:	4b69      	ldr	r3, [pc, #420]	; (8004778 <HAL_RCC_ClockConfig+0x21c>)
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045da:	4b67      	ldr	r3, [pc, #412]	; (8004778 <HAL_RCC_ClockConfig+0x21c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d001      	beq.n	80045ec <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e136      	b.n	800485a <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d049      	beq.n	800468c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	2b00      	cmp	r3, #0
 8004602:	d005      	beq.n	8004610 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004604:	4b5d      	ldr	r3, [pc, #372]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	4a5c      	ldr	r2, [pc, #368]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 800460a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800460e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800461c:	4b57      	ldr	r3, [pc, #348]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	4a56      	ldr	r2, [pc, #344]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 8004622:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004626:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d024      	beq.n	800467a <HAL_RCC_ClockConfig+0x11e>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b80      	cmp	r3, #128	; 0x80
 8004636:	d020      	beq.n	800467a <HAL_RCC_ClockConfig+0x11e>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b90      	cmp	r3, #144	; 0x90
 800463e:	d01c      	beq.n	800467a <HAL_RCC_ClockConfig+0x11e>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	2ba0      	cmp	r3, #160	; 0xa0
 8004646:	d018      	beq.n	800467a <HAL_RCC_ClockConfig+0x11e>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2bb0      	cmp	r3, #176	; 0xb0
 800464e:	d014      	beq.n	800467a <HAL_RCC_ClockConfig+0x11e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2bc0      	cmp	r3, #192	; 0xc0
 8004656:	d010      	beq.n	800467a <HAL_RCC_ClockConfig+0x11e>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2bd0      	cmp	r3, #208	; 0xd0
 800465e:	d00c      	beq.n	800467a <HAL_RCC_ClockConfig+0x11e>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2be0      	cmp	r3, #224	; 0xe0
 8004666:	d008      	beq.n	800467a <HAL_RCC_ClockConfig+0x11e>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2bf0      	cmp	r3, #240	; 0xf0
 800466e:	d004      	beq.n	800467a <HAL_RCC_ClockConfig+0x11e>
 8004670:	f240 217e 	movw	r1, #638	; 0x27e
 8004674:	483f      	ldr	r0, [pc, #252]	; (8004774 <HAL_RCC_ClockConfig+0x218>)
 8004676:	f7fc fac8 	bl	8000c0a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800467a:	4b40      	ldr	r3, [pc, #256]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	493d      	ldr	r1, [pc, #244]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 8004688:	4313      	orrs	r3, r2
 800468a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d059      	beq.n	800474c <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d010      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x166>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d00c      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x166>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d008      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x166>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d004      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x166>
 80046b8:	f240 2185 	movw	r1, #645	; 0x285
 80046bc:	482d      	ldr	r0, [pc, #180]	; (8004774 <HAL_RCC_ClockConfig+0x218>)
 80046be:	f7fc faa4 	bl	8000c0a <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d107      	bne.n	80046da <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ca:	4b2c      	ldr	r3, [pc, #176]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d119      	bne.n	800470a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e0bf      	b.n	800485a <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d003      	beq.n	80046ea <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d107      	bne.n	80046fa <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ea:	4b24      	ldr	r3, [pc, #144]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d109      	bne.n	800470a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e0af      	b.n	800485a <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046fa:	4b20      	ldr	r3, [pc, #128]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e0a7      	b.n	800485a <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800470a:	4b1c      	ldr	r3, [pc, #112]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f023 0203 	bic.w	r2, r3, #3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	4919      	ldr	r1, [pc, #100]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 8004718:	4313      	orrs	r3, r2
 800471a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800471c:	f7fc fc3a 	bl	8000f94 <HAL_GetTick>
 8004720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004722:	e00a      	b.n	800473a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004724:	f7fc fc36 	bl	8000f94 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e08f      	b.n	800485a <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473a:	4b10      	ldr	r3, [pc, #64]	; (800477c <HAL_RCC_ClockConfig+0x220>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 020c 	and.w	r2, r3, #12
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	429a      	cmp	r2, r3
 800474a:	d1eb      	bne.n	8004724 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <HAL_RCC_ClockConfig+0x21c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d212      	bcs.n	8004780 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475a:	4b07      	ldr	r3, [pc, #28]	; (8004778 <HAL_RCC_ClockConfig+0x21c>)
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004762:	4b05      	ldr	r3, [pc, #20]	; (8004778 <HAL_RCC_ClockConfig+0x21c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d007      	beq.n	8004780 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e072      	b.n	800485a <HAL_RCC_ClockConfig+0x2fe>
 8004774:	08008c74 	.word	0x08008c74
 8004778:	40023c00 	.word	0x40023c00
 800477c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d025      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d018      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x26a>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479c:	d013      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x26a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047a6:	d00e      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x26a>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80047b0:	d009      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x26a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80047ba:	d004      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x26a>
 80047bc:	f240 21c3 	movw	r1, #707	; 0x2c3
 80047c0:	4828      	ldr	r0, [pc, #160]	; (8004864 <HAL_RCC_ClockConfig+0x308>)
 80047c2:	f7fc fa22 	bl	8000c0a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c6:	4b28      	ldr	r3, [pc, #160]	; (8004868 <HAL_RCC_ClockConfig+0x30c>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	4925      	ldr	r1, [pc, #148]	; (8004868 <HAL_RCC_ClockConfig+0x30c>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d026      	beq.n	8004832 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d018      	beq.n	800481e <HAL_RCC_ClockConfig+0x2c2>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f4:	d013      	beq.n	800481e <HAL_RCC_ClockConfig+0x2c2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047fe:	d00e      	beq.n	800481e <HAL_RCC_ClockConfig+0x2c2>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004808:	d009      	beq.n	800481e <HAL_RCC_ClockConfig+0x2c2>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004812:	d004      	beq.n	800481e <HAL_RCC_ClockConfig+0x2c2>
 8004814:	f240 21ca 	movw	r1, #714	; 0x2ca
 8004818:	4812      	ldr	r0, [pc, #72]	; (8004864 <HAL_RCC_ClockConfig+0x308>)
 800481a:	f7fc f9f6 	bl	8000c0a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800481e:	4b12      	ldr	r3, [pc, #72]	; (8004868 <HAL_RCC_ClockConfig+0x30c>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	490e      	ldr	r1, [pc, #56]	; (8004868 <HAL_RCC_ClockConfig+0x30c>)
 800482e:	4313      	orrs	r3, r2
 8004830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004832:	f000 f821 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8004836:	4602      	mov	r2, r0
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <HAL_RCC_ClockConfig+0x30c>)
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	091b      	lsrs	r3, r3, #4
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	490a      	ldr	r1, [pc, #40]	; (800486c <HAL_RCC_ClockConfig+0x310>)
 8004844:	5ccb      	ldrb	r3, [r1, r3]
 8004846:	fa22 f303 	lsr.w	r3, r2, r3
 800484a:	4a09      	ldr	r2, [pc, #36]	; (8004870 <HAL_RCC_ClockConfig+0x314>)
 800484c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800484e:	4b09      	ldr	r3, [pc, #36]	; (8004874 <HAL_RCC_ClockConfig+0x318>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7fc fb5a 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	08008c74 	.word	0x08008c74
 8004868:	40023800 	.word	0x40023800
 800486c:	08008d24 	.word	0x08008d24
 8004870:	2000000c 	.word	0x2000000c
 8004874:	20000010 	.word	0x20000010

08004878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800487c:	b094      	sub	sp, #80	; 0x50
 800487e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	647b      	str	r3, [r7, #68]	; 0x44
 8004884:	2300      	movs	r3, #0
 8004886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004888:	2300      	movs	r3, #0
 800488a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004890:	4b79      	ldr	r3, [pc, #484]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 030c 	and.w	r3, r3, #12
 8004898:	2b08      	cmp	r3, #8
 800489a:	d00d      	beq.n	80048b8 <HAL_RCC_GetSysClockFreq+0x40>
 800489c:	2b08      	cmp	r3, #8
 800489e:	f200 80e1 	bhi.w	8004a64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <HAL_RCC_GetSysClockFreq+0x34>
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d003      	beq.n	80048b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80048aa:	e0db      	b.n	8004a64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048ac:	4b73      	ldr	r3, [pc, #460]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x204>)
 80048ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80048b0:	e0db      	b.n	8004a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048b2:	4b73      	ldr	r3, [pc, #460]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x208>)
 80048b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048b6:	e0d8      	b.n	8004a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048b8:	4b6f      	ldr	r3, [pc, #444]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048c2:	4b6d      	ldr	r3, [pc, #436]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d063      	beq.n	8004996 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ce:	4b6a      	ldr	r3, [pc, #424]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	099b      	lsrs	r3, r3, #6
 80048d4:	2200      	movs	r2, #0
 80048d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80048d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e0:	633b      	str	r3, [r7, #48]	; 0x30
 80048e2:	2300      	movs	r3, #0
 80048e4:	637b      	str	r3, [r7, #52]	; 0x34
 80048e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048ea:	4622      	mov	r2, r4
 80048ec:	462b      	mov	r3, r5
 80048ee:	f04f 0000 	mov.w	r0, #0
 80048f2:	f04f 0100 	mov.w	r1, #0
 80048f6:	0159      	lsls	r1, r3, #5
 80048f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048fc:	0150      	lsls	r0, r2, #5
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4621      	mov	r1, r4
 8004904:	1a51      	subs	r1, r2, r1
 8004906:	6139      	str	r1, [r7, #16]
 8004908:	4629      	mov	r1, r5
 800490a:	eb63 0301 	sbc.w	r3, r3, r1
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	f04f 0300 	mov.w	r3, #0
 8004918:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800491c:	4659      	mov	r1, fp
 800491e:	018b      	lsls	r3, r1, #6
 8004920:	4651      	mov	r1, sl
 8004922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004926:	4651      	mov	r1, sl
 8004928:	018a      	lsls	r2, r1, #6
 800492a:	4651      	mov	r1, sl
 800492c:	ebb2 0801 	subs.w	r8, r2, r1
 8004930:	4659      	mov	r1, fp
 8004932:	eb63 0901 	sbc.w	r9, r3, r1
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800494a:	4690      	mov	r8, r2
 800494c:	4699      	mov	r9, r3
 800494e:	4623      	mov	r3, r4
 8004950:	eb18 0303 	adds.w	r3, r8, r3
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	462b      	mov	r3, r5
 8004958:	eb49 0303 	adc.w	r3, r9, r3
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800496a:	4629      	mov	r1, r5
 800496c:	024b      	lsls	r3, r1, #9
 800496e:	4621      	mov	r1, r4
 8004970:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004974:	4621      	mov	r1, r4
 8004976:	024a      	lsls	r2, r1, #9
 8004978:	4610      	mov	r0, r2
 800497a:	4619      	mov	r1, r3
 800497c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800497e:	2200      	movs	r2, #0
 8004980:	62bb      	str	r3, [r7, #40]	; 0x28
 8004982:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004984:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004988:	f7fb fc26 	bl	80001d8 <__aeabi_uldivmod>
 800498c:	4602      	mov	r2, r0
 800498e:	460b      	mov	r3, r1
 8004990:	4613      	mov	r3, r2
 8004992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004994:	e058      	b.n	8004a48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004996:	4b38      	ldr	r3, [pc, #224]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	099b      	lsrs	r3, r3, #6
 800499c:	2200      	movs	r2, #0
 800499e:	4618      	mov	r0, r3
 80049a0:	4611      	mov	r1, r2
 80049a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049a6:	623b      	str	r3, [r7, #32]
 80049a8:	2300      	movs	r3, #0
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
 80049ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049b0:	4642      	mov	r2, r8
 80049b2:	464b      	mov	r3, r9
 80049b4:	f04f 0000 	mov.w	r0, #0
 80049b8:	f04f 0100 	mov.w	r1, #0
 80049bc:	0159      	lsls	r1, r3, #5
 80049be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049c2:	0150      	lsls	r0, r2, #5
 80049c4:	4602      	mov	r2, r0
 80049c6:	460b      	mov	r3, r1
 80049c8:	4641      	mov	r1, r8
 80049ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80049ce:	4649      	mov	r1, r9
 80049d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049e8:	ebb2 040a 	subs.w	r4, r2, sl
 80049ec:	eb63 050b 	sbc.w	r5, r3, fp
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	00eb      	lsls	r3, r5, #3
 80049fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049fe:	00e2      	lsls	r2, r4, #3
 8004a00:	4614      	mov	r4, r2
 8004a02:	461d      	mov	r5, r3
 8004a04:	4643      	mov	r3, r8
 8004a06:	18e3      	adds	r3, r4, r3
 8004a08:	603b      	str	r3, [r7, #0]
 8004a0a:	464b      	mov	r3, r9
 8004a0c:	eb45 0303 	adc.w	r3, r5, r3
 8004a10:	607b      	str	r3, [r7, #4]
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a1e:	4629      	mov	r1, r5
 8004a20:	028b      	lsls	r3, r1, #10
 8004a22:	4621      	mov	r1, r4
 8004a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a28:	4621      	mov	r1, r4
 8004a2a:	028a      	lsls	r2, r1, #10
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	4619      	mov	r1, r3
 8004a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a32:	2200      	movs	r2, #0
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	61fa      	str	r2, [r7, #28]
 8004a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a3c:	f7fb fbcc 	bl	80001d8 <__aeabi_uldivmod>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4613      	mov	r3, r2
 8004a46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a48:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	0c1b      	lsrs	r3, r3, #16
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	3301      	adds	r3, #1
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a62:	e002      	b.n	8004a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3750      	adds	r7, #80	; 0x50
 8004a70:	46bd      	mov	sp, r7
 8004a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a76:	bf00      	nop
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	00f42400 	.word	0x00f42400
 8004a80:	007a1200 	.word	0x007a1200

08004a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a88:	4b03      	ldr	r3, [pc, #12]	; (8004a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	2000000c 	.word	0x2000000c

08004a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004aa0:	f7ff fff0 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	4b05      	ldr	r3, [pc, #20]	; (8004abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	0a9b      	lsrs	r3, r3, #10
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	4903      	ldr	r1, [pc, #12]	; (8004ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ab2:	5ccb      	ldrb	r3, [r1, r3]
 8004ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	08008d34 	.word	0x08008d34

08004ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b0f      	cmp	r3, #15
 8004ae2:	d904      	bls.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8004ae4:	f640 11d7 	movw	r1, #2519	; 0x9d7
 8004ae8:	4834      	ldr	r0, [pc, #208]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004aea:	f7fc f88e 	bl	8000c0a <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d105      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d066      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d903      	bls.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	2b07      	cmp	r3, #7
 8004b14:	d904      	bls.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004b16:	f640 11de 	movw	r1, #2526	; 0x9de
 8004b1a:	4828      	ldr	r0, [pc, #160]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004b1c:	f7fc f875 	bl	8000c0a <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2b31      	cmp	r3, #49	; 0x31
 8004b26:	d904      	bls.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004b30:	d904      	bls.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004b32:	f640 11df 	movw	r1, #2527	; 0x9df
 8004b36:	4821      	ldr	r0, [pc, #132]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004b38:	f7fc f867 	bl	8000c0a <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d903      	bls.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x88>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	2b3f      	cmp	r3, #63	; 0x3f
 8004b4a:	d904      	bls.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8004b4c:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8004b50:	481a      	ldr	r0, [pc, #104]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8004b52:	f7fc f85a 	bl	8000c0a <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b56:	4b1a      	ldr	r3, [pc, #104]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b5c:	f7fc fa1a 	bl	8000f94 <HAL_GetTick>
 8004b60:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b62:	e008      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b64:	f7fc fa16 	bl	8000f94 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d901      	bls.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e1b3      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b76:	4b13      	ldr	r3, [pc, #76]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1f0      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	019b      	lsls	r3, r3, #6
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	071b      	lsls	r3, r3, #28
 8004b94:	490b      	ldr	r1, [pc, #44]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b9c:	4b08      	ldr	r3, [pc, #32]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ba2:	f7fc f9f7 	bl	8000f94 <HAL_GetTick>
 8004ba6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ba8:	e00e      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x104>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004baa:	f7fc f9f3 	bl	8000f94 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d907      	bls.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x104>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e190      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004bbc:	08008cac 	.word	0x08008cac
 8004bc0:	42470068 	.word	0x42470068
 8004bc4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bc8:	4b88      	ldr	r3, [pc, #544]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0ea      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 8173 	beq.w	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x404>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bea:	f000 80a6 	beq.w	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bf6:	f000 80a0 	beq.w	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	4a7c      	ldr	r2, [pc, #496]	; (8004df0 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	f000 809a 	beq.w	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	4a7a      	ldr	r2, [pc, #488]	; (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	f000 8094 	beq.w	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	4a78      	ldr	r2, [pc, #480]	; (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	f000 808e 	beq.w	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	4a76      	ldr	r2, [pc, #472]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	f000 8088 	beq.w	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	4a74      	ldr	r2, [pc, #464]	; (8004e00 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	f000 8082 	beq.w	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	4a72      	ldr	r2, [pc, #456]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d07c      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	4a70      	ldr	r2, [pc, #448]	; (8004e08 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d077      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	4a6f      	ldr	r2, [pc, #444]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d072      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	4a6d      	ldr	r2, [pc, #436]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d06d      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	4a6c      	ldr	r2, [pc, #432]	; (8004e14 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d068      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	4a6a      	ldr	r2, [pc, #424]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d063      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	4a69      	ldr	r2, [pc, #420]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d05e      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	4a67      	ldr	r2, [pc, #412]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d059      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	4a66      	ldr	r2, [pc, #408]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d054      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	4a64      	ldr	r2, [pc, #400]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d04f      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	4a63      	ldr	r2, [pc, #396]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d04a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	4a61      	ldr	r2, [pc, #388]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d045      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	4a60      	ldr	r2, [pc, #384]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d040      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	4a5e      	ldr	r2, [pc, #376]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d03b      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	4a5d      	ldr	r2, [pc, #372]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d036      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	4a5b      	ldr	r2, [pc, #364]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d031      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	4a5a      	ldr	r2, [pc, #360]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x380>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d02c      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	4a58      	ldr	r2, [pc, #352]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d027      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	4a57      	ldr	r2, [pc, #348]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x388>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d022      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	4a55      	ldr	r2, [pc, #340]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d01d      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	4a54      	ldr	r2, [pc, #336]	; (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d018      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	4a52      	ldr	r2, [pc, #328]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d013      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	4a51      	ldr	r2, [pc, #324]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00e      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	4a4f      	ldr	r2, [pc, #316]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d009      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	4a4e      	ldr	r2, [pc, #312]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d004      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8004d30:	f44f 6121 	mov.w	r1, #2576	; 0xa10
 8004d34:	484c      	ldr	r0, [pc, #304]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8004d36:	f7fb ff68 	bl	8000c0a <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	4b2b      	ldr	r3, [pc, #172]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	4a2a      	ldr	r2, [pc, #168]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d48:	6413      	str	r3, [r2, #64]	; 0x40
 8004d4a:	4b28      	ldr	r3, [pc, #160]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d56:	4b45      	ldr	r3, [pc, #276]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a44      	ldr	r2, [pc, #272]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d62:	f7fc f917 	bl	8000f94 <HAL_GetTick>
 8004d66:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d68:	e008      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d6a:	f7fc f913 	bl	8000f94 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      {
        return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e0b0      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x41a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d7c:	4b3b      	ldr	r3, [pc, #236]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0f0      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d88:	4b18      	ldr	r3, [pc, #96]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d90:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d073      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d06c      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004da6:	4b11      	ldr	r3, [pc, #68]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004db0:	4b2f      	ldr	r3, [pc, #188]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8004db2:	2201      	movs	r2, #1
 8004db4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004db6:	4b2e      	ldr	r3, [pc, #184]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004dbc:	4a0b      	ldr	r2, [pc, #44]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d158      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004dce:	f7fc f8e1 	bl	8000f94 <HAL_GetTick>
 8004dd2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd4:	e04e      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dd6:	f7fc f8dd 	bl	8000f94 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d945      	bls.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
          {
            return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e078      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004dec:	40023800 	.word	0x40023800
 8004df0:	00020300 	.word	0x00020300
 8004df4:	00030300 	.word	0x00030300
 8004df8:	00040300 	.word	0x00040300
 8004dfc:	00050300 	.word	0x00050300
 8004e00:	00060300 	.word	0x00060300
 8004e04:	00070300 	.word	0x00070300
 8004e08:	00080300 	.word	0x00080300
 8004e0c:	00090300 	.word	0x00090300
 8004e10:	000a0300 	.word	0x000a0300
 8004e14:	000b0300 	.word	0x000b0300
 8004e18:	000c0300 	.word	0x000c0300
 8004e1c:	000d0300 	.word	0x000d0300
 8004e20:	000e0300 	.word	0x000e0300
 8004e24:	000f0300 	.word	0x000f0300
 8004e28:	00100300 	.word	0x00100300
 8004e2c:	00110300 	.word	0x00110300
 8004e30:	00120300 	.word	0x00120300
 8004e34:	00130300 	.word	0x00130300
 8004e38:	00140300 	.word	0x00140300
 8004e3c:	00150300 	.word	0x00150300
 8004e40:	00160300 	.word	0x00160300
 8004e44:	00170300 	.word	0x00170300
 8004e48:	00180300 	.word	0x00180300
 8004e4c:	00190300 	.word	0x00190300
 8004e50:	001a0300 	.word	0x001a0300
 8004e54:	001b0300 	.word	0x001b0300
 8004e58:	001c0300 	.word	0x001c0300
 8004e5c:	001d0300 	.word	0x001d0300
 8004e60:	001e0300 	.word	0x001e0300
 8004e64:	001f0300 	.word	0x001f0300
 8004e68:	08008cac 	.word	0x08008cac
 8004e6c:	40007000 	.word	0x40007000
 8004e70:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e74:	4b1c      	ldr	r3, [pc, #112]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0aa      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x312>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e8c:	d10d      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004e8e:	4b16      	ldr	r3, [pc, #88]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea2:	4911      	ldr	r1, [pc, #68]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	608b      	str	r3, [r1, #8]
 8004ea8:	e005      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8004eaa:	4b0f      	ldr	r3, [pc, #60]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	4a0e      	ldr	r2, [pc, #56]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004eb0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004eb4:	6093      	str	r3, [r2, #8]
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004eb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ec2:	4909      	ldr	r1, [pc, #36]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x418>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	7d1a      	ldrb	r2, [r3, #20]
 8004ed8:	4b04      	ldr	r3, [pc, #16]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8004eda:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	424711e0 	.word	0x424711e0

08004ef0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d140      	bne.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004f0e:	4b24      	ldr	r3, [pc, #144]	; (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d005      	beq.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d131      	bne.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f24:	4b1f      	ldr	r3, [pc, #124]	; (8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004f26:	617b      	str	r3, [r7, #20]
          break;
 8004f28:	e031      	b.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004f2a:	4b1d      	ldr	r3, [pc, #116]	; (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f36:	d109      	bne.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004f38:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f42:	4a19      	ldr	r2, [pc, #100]	; (8004fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f48:	613b      	str	r3, [r7, #16]
 8004f4a:	e008      	b.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004f4c:	4b14      	ldr	r3, [pc, #80]	; (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f56:	4a15      	ldr	r2, [pc, #84]	; (8004fac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5c:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004f5e:	4b10      	ldr	r3, [pc, #64]	; (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f64:	099b      	lsrs	r3, r3, #6
 8004f66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	fb02 f303 	mul.w	r3, r2, r3
 8004f70:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004f72:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f78:	0f1b      	lsrs	r3, r3, #28
 8004f7a:	f003 0307 	and.w	r3, r3, #7
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f84:	617b      	str	r3, [r7, #20]
          break;
 8004f86:	e002      	b.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	617b      	str	r3, [r7, #20]
          break;
 8004f8c:	bf00      	nop
        }
      }
      break;
 8004f8e:	bf00      	nop
    }
  }
  return frequency;
 8004f90:	697b      	ldr	r3, [r7, #20]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	371c      	adds	r7, #28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	00bb8000 	.word	0x00bb8000
 8004fa8:	007a1200 	.word	0x007a1200
 8004fac:	00f42400 	.word	0x00f42400

08004fb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e18c      	b.n	80052dc <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a75      	ldr	r2, [pc, #468]	; (800519c <HAL_SPI_Init+0x1ec>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d018      	beq.n	8004ffe <HAL_SPI_Init+0x4e>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a73      	ldr	r2, [pc, #460]	; (80051a0 <HAL_SPI_Init+0x1f0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d013      	beq.n	8004ffe <HAL_SPI_Init+0x4e>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a72      	ldr	r2, [pc, #456]	; (80051a4 <HAL_SPI_Init+0x1f4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d00e      	beq.n	8004ffe <HAL_SPI_Init+0x4e>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a70      	ldr	r2, [pc, #448]	; (80051a8 <HAL_SPI_Init+0x1f8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d009      	beq.n	8004ffe <HAL_SPI_Init+0x4e>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a6f      	ldr	r2, [pc, #444]	; (80051ac <HAL_SPI_Init+0x1fc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d004      	beq.n	8004ffe <HAL_SPI_Init+0x4e>
 8004ff4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004ff8:	486d      	ldr	r0, [pc, #436]	; (80051b0 <HAL_SPI_Init+0x200>)
 8004ffa:	f7fb fe06 	bl	8000c0a <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d009      	beq.n	800501a <HAL_SPI_Init+0x6a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800500e:	d004      	beq.n	800501a <HAL_SPI_Init+0x6a>
 8005010:	f240 1141 	movw	r1, #321	; 0x141
 8005014:	4866      	ldr	r0, [pc, #408]	; (80051b0 <HAL_SPI_Init+0x200>)
 8005016:	f7fb fdf8 	bl	8000c0a <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00e      	beq.n	8005040 <HAL_SPI_Init+0x90>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800502a:	d009      	beq.n	8005040 <HAL_SPI_Init+0x90>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005034:	d004      	beq.n	8005040 <HAL_SPI_Init+0x90>
 8005036:	f44f 71a1 	mov.w	r1, #322	; 0x142
 800503a:	485d      	ldr	r0, [pc, #372]	; (80051b0 <HAL_SPI_Init+0x200>)
 800503c:	f7fb fde5 	bl	8000c0a <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005048:	d008      	beq.n	800505c <HAL_SPI_Init+0xac>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d004      	beq.n	800505c <HAL_SPI_Init+0xac>
 8005052:	f240 1143 	movw	r1, #323	; 0x143
 8005056:	4856      	ldr	r0, [pc, #344]	; (80051b0 <HAL_SPI_Init+0x200>)
 8005058:	f7fb fdd7 	bl	8000c0a <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005064:	d00d      	beq.n	8005082 <HAL_SPI_Init+0xd2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d009      	beq.n	8005082 <HAL_SPI_Init+0xd2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005076:	d004      	beq.n	8005082 <HAL_SPI_Init+0xd2>
 8005078:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800507c:	484c      	ldr	r0, [pc, #304]	; (80051b0 <HAL_SPI_Init+0x200>)
 800507e:	f7fb fdc4 	bl	8000c0a <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d020      	beq.n	80050cc <HAL_SPI_Init+0x11c>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	2b08      	cmp	r3, #8
 8005090:	d01c      	beq.n	80050cc <HAL_SPI_Init+0x11c>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	2b10      	cmp	r3, #16
 8005098:	d018      	beq.n	80050cc <HAL_SPI_Init+0x11c>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	2b18      	cmp	r3, #24
 80050a0:	d014      	beq.n	80050cc <HAL_SPI_Init+0x11c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	d010      	beq.n	80050cc <HAL_SPI_Init+0x11c>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	2b28      	cmp	r3, #40	; 0x28
 80050b0:	d00c      	beq.n	80050cc <HAL_SPI_Init+0x11c>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	2b30      	cmp	r3, #48	; 0x30
 80050b8:	d008      	beq.n	80050cc <HAL_SPI_Init+0x11c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	2b38      	cmp	r3, #56	; 0x38
 80050c0:	d004      	beq.n	80050cc <HAL_SPI_Init+0x11c>
 80050c2:	f240 1145 	movw	r1, #325	; 0x145
 80050c6:	483a      	ldr	r0, [pc, #232]	; (80051b0 <HAL_SPI_Init+0x200>)
 80050c8:	f7fb fd9f 	bl	8000c0a <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_SPI_Init+0x136>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	2b80      	cmp	r3, #128	; 0x80
 80050da:	d004      	beq.n	80050e6 <HAL_SPI_Init+0x136>
 80050dc:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80050e0:	4833      	ldr	r0, [pc, #204]	; (80051b0 <HAL_SPI_Init+0x200>)
 80050e2:	f7fb fd92 	bl	8000c0a <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d008      	beq.n	8005100 <HAL_SPI_Init+0x150>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	2b10      	cmp	r3, #16
 80050f4:	d004      	beq.n	8005100 <HAL_SPI_Init+0x150>
 80050f6:	f240 1147 	movw	r1, #327	; 0x147
 80050fa:	482d      	ldr	r0, [pc, #180]	; (80051b0 <HAL_SPI_Init+0x200>)
 80050fc:	f7fb fd85 	bl	8000c0a <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	2b00      	cmp	r3, #0
 8005106:	d155      	bne.n	80051b4 <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d008      	beq.n	8005122 <HAL_SPI_Init+0x172>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2b02      	cmp	r3, #2
 8005116:	d004      	beq.n	8005122 <HAL_SPI_Init+0x172>
 8005118:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800511c:	4824      	ldr	r0, [pc, #144]	; (80051b0 <HAL_SPI_Init+0x200>)
 800511e:	f7fb fd74 	bl	8000c0a <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d008      	beq.n	800513c <HAL_SPI_Init+0x18c>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d004      	beq.n	800513c <HAL_SPI_Init+0x18c>
 8005132:	f240 114b 	movw	r1, #331	; 0x14b
 8005136:	481e      	ldr	r0, [pc, #120]	; (80051b0 <HAL_SPI_Init+0x200>)
 8005138:	f7fb fd67 	bl	8000c0a <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005144:	d125      	bne.n	8005192 <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d05d      	beq.n	800520a <HAL_SPI_Init+0x25a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	2b08      	cmp	r3, #8
 8005154:	d059      	beq.n	800520a <HAL_SPI_Init+0x25a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	2b10      	cmp	r3, #16
 800515c:	d055      	beq.n	800520a <HAL_SPI_Init+0x25a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	2b18      	cmp	r3, #24
 8005164:	d051      	beq.n	800520a <HAL_SPI_Init+0x25a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	2b20      	cmp	r3, #32
 800516c:	d04d      	beq.n	800520a <HAL_SPI_Init+0x25a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	2b28      	cmp	r3, #40	; 0x28
 8005174:	d049      	beq.n	800520a <HAL_SPI_Init+0x25a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	2b30      	cmp	r3, #48	; 0x30
 800517c:	d045      	beq.n	800520a <HAL_SPI_Init+0x25a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	2b38      	cmp	r3, #56	; 0x38
 8005184:	d041      	beq.n	800520a <HAL_SPI_Init+0x25a>
 8005186:	f240 114f 	movw	r1, #335	; 0x14f
 800518a:	4809      	ldr	r0, [pc, #36]	; (80051b0 <HAL_SPI_Init+0x200>)
 800518c:	f7fb fd3d 	bl	8000c0a <assert_failed>
 8005190:	e03b      	b.n	800520a <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	61da      	str	r2, [r3, #28]
 8005198:	e037      	b.n	800520a <HAL_SPI_Init+0x25a>
 800519a:	bf00      	nop
 800519c:	40013000 	.word	0x40013000
 80051a0:	40003800 	.word	0x40003800
 80051a4:	40003c00 	.word	0x40003c00
 80051a8:	40013400 	.word	0x40013400
 80051ac:	40015000 	.word	0x40015000
 80051b0:	08008ce8 	.word	0x08008ce8
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d020      	beq.n	80051fe <HAL_SPI_Init+0x24e>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d01c      	beq.n	80051fe <HAL_SPI_Init+0x24e>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d018      	beq.n	80051fe <HAL_SPI_Init+0x24e>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	2b18      	cmp	r3, #24
 80051d2:	d014      	beq.n	80051fe <HAL_SPI_Init+0x24e>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	2b20      	cmp	r3, #32
 80051da:	d010      	beq.n	80051fe <HAL_SPI_Init+0x24e>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	2b28      	cmp	r3, #40	; 0x28
 80051e2:	d00c      	beq.n	80051fe <HAL_SPI_Init+0x24e>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	2b30      	cmp	r3, #48	; 0x30
 80051ea:	d008      	beq.n	80051fe <HAL_SPI_Init+0x24e>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	69db      	ldr	r3, [r3, #28]
 80051f0:	2b38      	cmp	r3, #56	; 0x38
 80051f2:	d004      	beq.n	80051fe <HAL_SPI_Init+0x24e>
 80051f4:	f240 1159 	movw	r1, #345	; 0x159
 80051f8:	483a      	ldr	r0, [pc, #232]	; (80052e4 <HAL_SPI_Init+0x334>)
 80051fa:	f7fb fd06 	bl	8000c0a <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d106      	bne.n	800522a <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7fb fd31 	bl	8000c8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2202      	movs	r2, #2
 800522e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005240:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528e:	ea42 0103 	orr.w	r1, r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005296:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	0c1b      	lsrs	r3, r3, #16
 80052a8:	f003 0104 	and.w	r1, r3, #4
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	f003 0210 	and.w	r2, r3, #16
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	69da      	ldr	r2, [r3, #28]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	08008ce8 	.word	0x08008ce8

080052e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052e8:	b084      	sub	sp, #16
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b084      	sub	sp, #16
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	f107 001c 	add.w	r0, r7, #28
 80052f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d122      	bne.n	8005346 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800532a:	2b01      	cmp	r3, #1
 800532c:	d105      	bne.n	800533a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f9c0 	bl	80056c0 <USB_CoreReset>
 8005340:	4603      	mov	r3, r0
 8005342:	73fb      	strb	r3, [r7, #15]
 8005344:	e01a      	b.n	800537c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f9b4 	bl	80056c0 <USB_CoreReset>
 8005358:	4603      	mov	r3, r0
 800535a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800535c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005366:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	639a      	str	r2, [r3, #56]	; 0x38
 800536e:	e005      	b.n	800537c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537e:	2b01      	cmp	r3, #1
 8005380:	d10b      	bne.n	800539a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f043 0206 	orr.w	r2, r3, #6
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f043 0220 	orr.w	r2, r3, #32
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800539a:	7bfb      	ldrb	r3, [r7, #15]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053a6:	b004      	add	sp, #16
 80053a8:	4770      	bx	lr

080053aa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f043 0201 	orr.w	r2, r3, #1
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f023 0201 	bic.w	r2, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	460b      	mov	r3, r1
 80053f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800540a:	78fb      	ldrb	r3, [r7, #3]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d115      	bne.n	800543c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800541c:	2001      	movs	r0, #1
 800541e:	f7fb fdc5 	bl	8000fac <HAL_Delay>
      ms++;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	3301      	adds	r3, #1
 8005426:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f93a 	bl	80056a2 <USB_GetMode>
 800542e:	4603      	mov	r3, r0
 8005430:	2b01      	cmp	r3, #1
 8005432:	d01e      	beq.n	8005472 <USB_SetCurrentMode+0x84>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b31      	cmp	r3, #49	; 0x31
 8005438:	d9f0      	bls.n	800541c <USB_SetCurrentMode+0x2e>
 800543a:	e01a      	b.n	8005472 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d115      	bne.n	800546e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800544e:	2001      	movs	r0, #1
 8005450:	f7fb fdac 	bl	8000fac <HAL_Delay>
      ms++;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3301      	adds	r3, #1
 8005458:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f921 	bl	80056a2 <USB_GetMode>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <USB_SetCurrentMode+0x84>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b31      	cmp	r3, #49	; 0x31
 800546a:	d9f0      	bls.n	800544e <USB_SetCurrentMode+0x60>
 800546c:	e001      	b.n	8005472 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e005      	b.n	800547e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2b32      	cmp	r3, #50	; 0x32
 8005476:	d101      	bne.n	800547c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	3301      	adds	r3, #1
 800549a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4a13      	ldr	r2, [pc, #76]	; (80054ec <USB_FlushTxFifo+0x64>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d901      	bls.n	80054a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e01b      	b.n	80054e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	daf2      	bge.n	8005496 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	019b      	lsls	r3, r3, #6
 80054b8:	f043 0220 	orr.w	r2, r3, #32
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3301      	adds	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	4a08      	ldr	r2, [pc, #32]	; (80054ec <USB_FlushTxFifo+0x64>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d901      	bls.n	80054d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e006      	b.n	80054e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f003 0320 	and.w	r3, r3, #32
 80054da:	2b20      	cmp	r3, #32
 80054dc:	d0f0      	beq.n	80054c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	00030d40 	.word	0x00030d40

080054f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	3301      	adds	r3, #1
 8005500:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	4a11      	ldr	r2, [pc, #68]	; (800554c <USB_FlushRxFifo+0x5c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d901      	bls.n	800550e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e018      	b.n	8005540 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	daf2      	bge.n	80054fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2210      	movs	r2, #16
 800551e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3301      	adds	r3, #1
 8005524:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4a08      	ldr	r2, [pc, #32]	; (800554c <USB_FlushRxFifo+0x5c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e006      	b.n	8005540 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0310 	and.w	r3, r3, #16
 800553a:	2b10      	cmp	r3, #16
 800553c:	d0f0      	beq.n	8005520 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	00030d40 	.word	0x00030d40

08005550 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005550:	b480      	push	{r7}
 8005552:	b089      	sub	sp, #36	; 0x24
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	4611      	mov	r1, r2
 800555c:	461a      	mov	r2, r3
 800555e:	460b      	mov	r3, r1
 8005560:	71fb      	strb	r3, [r7, #7]
 8005562:	4613      	mov	r3, r2
 8005564:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800556e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005572:	2b00      	cmp	r3, #0
 8005574:	d123      	bne.n	80055be <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005576:	88bb      	ldrh	r3, [r7, #4]
 8005578:	3303      	adds	r3, #3
 800557a:	089b      	lsrs	r3, r3, #2
 800557c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800557e:	2300      	movs	r3, #0
 8005580:	61bb      	str	r3, [r7, #24]
 8005582:	e018      	b.n	80055b6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005584:	79fb      	ldrb	r3, [r7, #7]
 8005586:	031a      	lsls	r2, r3, #12
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	4413      	add	r3, r2
 800558c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005590:	461a      	mov	r2, r3
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	3301      	adds	r3, #1
 800559c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	3301      	adds	r3, #1
 80055a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	3301      	adds	r3, #1
 80055a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	3301      	adds	r3, #1
 80055ae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	3301      	adds	r3, #1
 80055b4:	61bb      	str	r3, [r7, #24]
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d3e2      	bcc.n	8005584 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3724      	adds	r7, #36	; 0x24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b08b      	sub	sp, #44	; 0x2c
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	4613      	mov	r3, r2
 80055d8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80055e2:	88fb      	ldrh	r3, [r7, #6]
 80055e4:	089b      	lsrs	r3, r3, #2
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	f003 0303 	and.w	r3, r3, #3
 80055f0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80055f2:	2300      	movs	r3, #0
 80055f4:	623b      	str	r3, [r7, #32]
 80055f6:	e014      	b.n	8005622 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	601a      	str	r2, [r3, #0]
    pDest++;
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	3301      	adds	r3, #1
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	3301      	adds	r3, #1
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	3301      	adds	r3, #1
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	3301      	adds	r3, #1
 800561a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	3301      	adds	r3, #1
 8005620:	623b      	str	r3, [r7, #32]
 8005622:	6a3a      	ldr	r2, [r7, #32]
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	429a      	cmp	r2, r3
 8005628:	d3e6      	bcc.n	80055f8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800562a:	8bfb      	ldrh	r3, [r7, #30]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01e      	beq.n	800566e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800563a:	461a      	mov	r2, r3
 800563c:	f107 0310 	add.w	r3, r7, #16
 8005640:	6812      	ldr	r2, [r2, #0]
 8005642:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	b2db      	uxtb	r3, r3
 800564a:	00db      	lsls	r3, r3, #3
 800564c:	fa22 f303 	lsr.w	r3, r2, r3
 8005650:	b2da      	uxtb	r2, r3
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	701a      	strb	r2, [r3, #0]
      i++;
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	3301      	adds	r3, #1
 800565a:	623b      	str	r3, [r7, #32]
      pDest++;
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	3301      	adds	r3, #1
 8005660:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005662:	8bfb      	ldrh	r3, [r7, #30]
 8005664:	3b01      	subs	r3, #1
 8005666:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005668:	8bfb      	ldrh	r3, [r7, #30]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1ea      	bne.n	8005644 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005670:	4618      	mov	r0, r3
 8005672:	372c      	adds	r7, #44	; 0x2c
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4013      	ands	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005694:	68fb      	ldr	r3, [r7, #12]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f003 0301 	and.w	r3, r3, #1
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
	...

080056c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3301      	adds	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4a13      	ldr	r2, [pc, #76]	; (8005724 <USB_CoreReset+0x64>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d901      	bls.n	80056de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e01b      	b.n	8005716 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	daf2      	bge.n	80056cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f043 0201 	orr.w	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3301      	adds	r3, #1
 80056fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4a09      	ldr	r2, [pc, #36]	; (8005724 <USB_CoreReset+0x64>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d901      	bls.n	8005708 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e006      	b.n	8005716 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b01      	cmp	r3, #1
 8005712:	d0f0      	beq.n	80056f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	00030d40 	.word	0x00030d40

08005728 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005728:	b084      	sub	sp, #16
 800572a:	b580      	push	{r7, lr}
 800572c:	b086      	sub	sp, #24
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005748:	461a      	mov	r2, r3
 800574a:	2300      	movs	r3, #0
 800574c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577a:	2b00      	cmp	r3, #0
 800577c:	d018      	beq.n	80057b0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005780:	2b01      	cmp	r3, #1
 8005782:	d10a      	bne.n	800579a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005792:	f043 0304 	orr.w	r3, r3, #4
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	e014      	b.n	80057c4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057a8:	f023 0304 	bic.w	r3, r3, #4
 80057ac:	6013      	str	r3, [r2, #0]
 80057ae:	e009      	b.n	80057c4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057be:	f023 0304 	bic.w	r3, r3, #4
 80057c2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057c4:	2110      	movs	r1, #16
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff fe5e 	bl	8005488 <USB_FlushTxFifo>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7ff fe8a 	bl	80054f0 <USB_FlushRxFifo>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80057e6:	2300      	movs	r3, #0
 80057e8:	613b      	str	r3, [r7, #16]
 80057ea:	e015      	b.n	8005818 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f8:	461a      	mov	r2, r3
 80057fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057fe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4413      	add	r3, r2
 8005808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580c:	461a      	mov	r2, r3
 800580e:	2300      	movs	r3, #0
 8005810:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	3301      	adds	r3, #1
 8005816:	613b      	str	r3, [r7, #16]
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	429a      	cmp	r2, r3
 800581e:	d3e5      	bcc.n	80057ec <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800582c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00b      	beq.n	8005852 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005840:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a13      	ldr	r2, [pc, #76]	; (8005894 <USB_HostInit+0x16c>)
 8005846:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a13      	ldr	r2, [pc, #76]	; (8005898 <USB_HostInit+0x170>)
 800584c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005850:	e009      	b.n	8005866 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2280      	movs	r2, #128	; 0x80
 8005856:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a10      	ldr	r2, [pc, #64]	; (800589c <USB_HostInit+0x174>)
 800585c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a0f      	ldr	r2, [pc, #60]	; (80058a0 <USB_HostInit+0x178>)
 8005862:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	2b00      	cmp	r3, #0
 800586a:	d105      	bne.n	8005878 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	f043 0210 	orr.w	r2, r3, #16
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699a      	ldr	r2, [r3, #24]
 800587c:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <USB_HostInit+0x17c>)
 800587e:	4313      	orrs	r3, r2
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005884:	7dfb      	ldrb	r3, [r7, #23]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005890:	b004      	add	sp, #16
 8005892:	4770      	bx	lr
 8005894:	01000200 	.word	0x01000200
 8005898:	00e00300 	.word	0x00e00300
 800589c:	00600080 	.word	0x00600080
 80058a0:	004000e0 	.word	0x004000e0
 80058a4:	a3200008 	.word	0xa3200008

080058a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058c6:	f023 0303 	bic.w	r3, r3, #3
 80058ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	78fb      	ldrb	r3, [r7, #3]
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	68f9      	ldr	r1, [r7, #12]
 80058dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058e0:	4313      	orrs	r3, r2
 80058e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80058e4:	78fb      	ldrb	r3, [r7, #3]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d107      	bne.n	80058fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058f0:	461a      	mov	r2, r3
 80058f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80058f6:	6053      	str	r3, [r2, #4]
 80058f8:	e009      	b.n	800590e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80058fa:	78fb      	ldrb	r3, [r7, #3]
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d106      	bne.n	800590e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005906:	461a      	mov	r2, r3
 8005908:	f241 7370 	movw	r3, #6000	; 0x1770
 800590c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800593c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800594a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800594c:	2064      	movs	r0, #100	; 0x64
 800594e:	f7fb fb2d 	bl	8000fac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800595a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800595e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005960:	200a      	movs	r0, #10
 8005962:	f7fb fb23 	bl	8000fac <HAL_Delay>

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	460b      	mov	r3, r1
 800597a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005980:	2300      	movs	r3, #0
 8005982:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005994:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d109      	bne.n	80059b4 <USB_DriveVbus+0x44>
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d106      	bne.n	80059b4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80059ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80059b2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059be:	d109      	bne.n	80059d4 <USB_DriveVbus+0x64>
 80059c0:	78fb      	ldrb	r3, [r7, #3]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d106      	bne.n	80059d4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80059ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059d2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b085      	sub	sp, #20
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	0c5b      	lsrs	r3, r3, #17
 8005a00:	f003 0303 	and.w	r3, r3, #3
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	b29b      	uxth	r3, r3
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
	...

08005a34 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	4608      	mov	r0, r1
 8005a3e:	4611      	mov	r1, r2
 8005a40:	461a      	mov	r2, r3
 8005a42:	4603      	mov	r3, r0
 8005a44:	70fb      	strb	r3, [r7, #3]
 8005a46:	460b      	mov	r3, r1
 8005a48:	70bb      	strb	r3, [r7, #2]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005a56:	78fb      	ldrb	r3, [r7, #3]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a62:	461a      	mov	r2, r3
 8005a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a68:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005a6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d87e      	bhi.n	8005b70 <USB_HC_Init+0x13c>
 8005a72:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <USB_HC_Init+0x44>)
 8005a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a78:	08005a89 	.word	0x08005a89
 8005a7c:	08005b33 	.word	0x08005b33
 8005a80:	08005a89 	.word	0x08005a89
 8005a84:	08005af5 	.word	0x08005af5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a88:	78fb      	ldrb	r3, [r7, #3]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a94:	461a      	mov	r2, r3
 8005a96:	f240 439d 	movw	r3, #1181	; 0x49d
 8005a9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005a9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	da10      	bge.n	8005ac6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005aa4:	78fb      	ldrb	r3, [r7, #3]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	78fa      	ldrb	r2, [r7, #3]
 8005ab4:	0151      	lsls	r1, r2, #5
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	440a      	add	r2, r1
 8005aba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005ac4:	e057      	b.n	8005b76 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d051      	beq.n	8005b76 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005ad2:	78fb      	ldrb	r3, [r7, #3]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	78fa      	ldrb	r2, [r7, #3]
 8005ae2:	0151      	lsls	r1, r2, #5
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	440a      	add	r2, r1
 8005ae8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005af0:	60d3      	str	r3, [r2, #12]
      break;
 8005af2:	e040      	b.n	8005b76 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005af4:	78fb      	ldrb	r3, [r7, #3]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b00:	461a      	mov	r2, r3
 8005b02:	f240 639d 	movw	r3, #1693	; 0x69d
 8005b06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	da34      	bge.n	8005b7a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005b10:	78fb      	ldrb	r3, [r7, #3]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	78fa      	ldrb	r2, [r7, #3]
 8005b20:	0151      	lsls	r1, r2, #5
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	440a      	add	r2, r1
 8005b26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b2e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005b30:	e023      	b.n	8005b7a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005b32:	78fb      	ldrb	r3, [r7, #3]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3e:	461a      	mov	r2, r3
 8005b40:	f240 2325 	movw	r3, #549	; 0x225
 8005b44:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005b46:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	da17      	bge.n	8005b7e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005b4e:	78fb      	ldrb	r3, [r7, #3]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	78fa      	ldrb	r2, [r7, #3]
 8005b5e:	0151      	lsls	r1, r2, #5
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	440a      	add	r2, r1
 8005b64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b68:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005b6c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005b6e:	e006      	b.n	8005b7e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	77fb      	strb	r3, [r7, #31]
      break;
 8005b74:	e004      	b.n	8005b80 <USB_HC_Init+0x14c>
      break;
 8005b76:	bf00      	nop
 8005b78:	e002      	b.n	8005b80 <USB_HC_Init+0x14c>
      break;
 8005b7a:	bf00      	nop
 8005b7c:	e000      	b.n	8005b80 <USB_HC_Init+0x14c>
      break;
 8005b7e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	78fa      	ldrb	r2, [r7, #3]
 8005b90:	0151      	lsls	r1, r2, #5
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	440a      	add	r2, r1
 8005b96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b9a:	f043 0302 	orr.w	r3, r3, #2
 8005b9e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ba6:	699a      	ldr	r2, [r3, #24]
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	2101      	movs	r1, #1
 8005bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb4:	6939      	ldr	r1, [r7, #16]
 8005bb6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005bca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	da03      	bge.n	8005bda <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bd6:	61bb      	str	r3, [r7, #24]
 8005bd8:	e001      	b.n	8005bde <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff feff 	bl	80059e2 <USB_GetHostSpeed>
 8005be4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005be6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d106      	bne.n	8005bfc <USB_HC_Init+0x1c8>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d003      	beq.n	8005bfc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005bf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	e001      	b.n	8005c00 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c00:	787b      	ldrb	r3, [r7, #1]
 8005c02:	059b      	lsls	r3, r3, #22
 8005c04:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c08:	78bb      	ldrb	r3, [r7, #2]
 8005c0a:	02db      	lsls	r3, r3, #11
 8005c0c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c10:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c16:	049b      	lsls	r3, r3, #18
 8005c18:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005c1c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c1e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005c20:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005c24:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c2a:	78fb      	ldrb	r3, [r7, #3]
 8005c2c:	0159      	lsls	r1, r3, #5
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	440b      	add	r3, r1
 8005c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c36:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005c3c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005c3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	d003      	beq.n	8005c4e <USB_HC_Init+0x21a>
 8005c46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d10f      	bne.n	8005c6e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005c4e:	78fb      	ldrb	r3, [r7, #3]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	78fa      	ldrb	r2, [r7, #3]
 8005c5e:	0151      	lsls	r1, r2, #5
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	440a      	add	r2, r1
 8005c64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c6c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005c6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3720      	adds	r7, #32
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08c      	sub	sp, #48	; 0x30
 8005c7c:	af02      	add	r7, sp, #8
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	4613      	mov	r3, r2
 8005c84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	785b      	ldrb	r3, [r3, #1]
 8005c8e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c94:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d02d      	beq.n	8005cfe <USB_HC_StartXfer+0x86>
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	791b      	ldrb	r3, [r3, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d129      	bne.n	8005cfe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005caa:	79fb      	ldrb	r3, [r7, #7]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d117      	bne.n	8005ce0 <USB_HC_StartXfer+0x68>
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	79db      	ldrb	r3, [r3, #7]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <USB_HC_StartXfer+0x48>
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	79db      	ldrb	r3, [r3, #7]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d10f      	bne.n	8005ce0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	0151      	lsls	r1, r2, #5
 8005cd2:	6a3a      	ldr	r2, [r7, #32]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cde:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10b      	bne.n	8005cfe <USB_HC_StartXfer+0x86>
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	795b      	ldrb	r3, [r3, #5]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d107      	bne.n	8005cfe <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	785b      	ldrb	r3, [r3, #1]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 fa0f 	bl	8006118 <USB_DoPing>
      return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	e0f8      	b.n	8005ef0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d018      	beq.n	8005d38 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	68ba      	ldr	r2, [r7, #8]
 8005d0c:	8912      	ldrh	r2, [r2, #8]
 8005d0e:	4413      	add	r3, r2
 8005d10:	3b01      	subs	r3, #1
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	8912      	ldrh	r2, [r2, #8]
 8005d16:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d1a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005d1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005d1e:	8b7b      	ldrh	r3, [r7, #26]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d90b      	bls.n	8005d3c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005d24:	8b7b      	ldrh	r3, [r7, #26]
 8005d26:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	8912      	ldrh	r2, [r2, #8]
 8005d2e:	fb03 f202 	mul.w	r2, r3, r2
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	611a      	str	r2, [r3, #16]
 8005d36:	e001      	b.n	8005d3c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	78db      	ldrb	r3, [r3, #3]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d007      	beq.n	8005d54 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	8912      	ldrh	r2, [r2, #8]
 8005d4a:	fb03 f202 	mul.w	r2, r3, r2
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	611a      	str	r2, [r3, #16]
 8005d52:	e003      	b.n	8005d5c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	695a      	ldr	r2, [r3, #20]
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005d66:	04d9      	lsls	r1, r3, #19
 8005d68:	4b63      	ldr	r3, [pc, #396]	; (8005ef8 <USB_HC_StartXfer+0x280>)
 8005d6a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d6c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	7a9b      	ldrb	r3, [r3, #10]
 8005d72:	075b      	lsls	r3, r3, #29
 8005d74:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d78:	69f9      	ldr	r1, [r7, #28]
 8005d7a:	0148      	lsls	r0, r1, #5
 8005d7c:	6a39      	ldr	r1, [r7, #32]
 8005d7e:	4401      	add	r1, r0
 8005d80:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005d84:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005d86:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d009      	beq.n	8005da2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	68d9      	ldr	r1, [r3, #12]
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9e:	460a      	mov	r2, r1
 8005da0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	bf0c      	ite	eq
 8005db2:	2301      	moveq	r3, #1
 8005db4:	2300      	movne	r3, #0
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	0151      	lsls	r1, r2, #5
 8005dcc:	6a3a      	ldr	r2, [r7, #32]
 8005dce:	440a      	add	r2, r1
 8005dd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dd4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005dd8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	7e7b      	ldrb	r3, [r7, #25]
 8005dea:	075b      	lsls	r3, r3, #29
 8005dec:	69f9      	ldr	r1, [r7, #28]
 8005dee:	0148      	lsls	r0, r1, #5
 8005df0:	6a39      	ldr	r1, [r7, #32]
 8005df2:	4401      	add	r1, r0
 8005df4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	6a3b      	ldr	r3, [r7, #32]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e12:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	78db      	ldrb	r3, [r3, #3]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d004      	beq.n	8005e26 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e22:	613b      	str	r3, [r7, #16]
 8005e24:	e003      	b.n	8005e2e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005e2c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e34:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e42:	461a      	mov	r2, r3
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	e04e      	b.n	8005ef0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	78db      	ldrb	r3, [r3, #3]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d149      	bne.n	8005eee <USB_HC_StartXfer+0x276>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d045      	beq.n	8005eee <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	79db      	ldrb	r3, [r3, #7]
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d830      	bhi.n	8005ecc <USB_HC_StartXfer+0x254>
 8005e6a:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <USB_HC_StartXfer+0x1f8>)
 8005e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e70:	08005e81 	.word	0x08005e81
 8005e74:	08005ea5 	.word	0x08005ea5
 8005e78:	08005e81 	.word	0x08005e81
 8005e7c:	08005ea5 	.word	0x08005ea5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	3303      	adds	r3, #3
 8005e86:	089b      	lsrs	r3, r3, #2
 8005e88:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005e8a:	8afa      	ldrh	r2, [r7, #22]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d91c      	bls.n	8005ed0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	f043 0220 	orr.w	r2, r3, #32
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	619a      	str	r2, [r3, #24]
        }
        break;
 8005ea2:	e015      	b.n	8005ed0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	3303      	adds	r3, #3
 8005eaa:	089b      	lsrs	r3, r3, #2
 8005eac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005eae:	8afa      	ldrh	r2, [r7, #22]
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d90a      	bls.n	8005ed4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	619a      	str	r2, [r3, #24]
        }
        break;
 8005eca:	e003      	b.n	8005ed4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005ecc:	bf00      	nop
 8005ece:	e002      	b.n	8005ed6 <USB_HC_StartXfer+0x25e>
        break;
 8005ed0:	bf00      	nop
 8005ed2:	e000      	b.n	8005ed6 <USB_HC_StartXfer+0x25e>
        break;
 8005ed4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	68d9      	ldr	r1, [r3, #12]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	785a      	ldrb	r2, [r3, #1]
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	9000      	str	r0, [sp, #0]
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f7ff fb31 	bl	8005550 <USB_WritePacket>
  }

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3728      	adds	r7, #40	; 0x28
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	1ff80000 	.word	0x1ff80000

08005efc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	b29b      	uxth	r3, r3
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3714      	adds	r7, #20
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b089      	sub	sp, #36	; 0x24
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	460b      	mov	r3, r1
 8005f28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005f2e:	78fb      	ldrb	r3, [r7, #3]
 8005f30:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	0c9b      	lsrs	r3, r3, #18
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	0fdb      	lsrs	r3, r3, #31
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 0320 	and.w	r3, r3, #32
 8005f6a:	2b20      	cmp	r3, #32
 8005f6c:	d104      	bne.n	8005f78 <USB_HC_Halt+0x5a>
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	e0c8      	b.n	800610a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <USB_HC_Halt+0x66>
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d163      	bne.n	800604c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	0151      	lsls	r1, r2, #5
 8005f96:	69fa      	ldr	r2, [r7, #28]
 8005f98:	440a      	add	r2, r1
 8005f9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fa2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f003 0320 	and.w	r3, r3, #32
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f040 80ab 	bne.w	8006108 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d133      	bne.n	8006026 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	0151      	lsls	r1, r2, #5
 8005fd0:	69fa      	ldr	r2, [r7, #28]
 8005fd2:	440a      	add	r2, r1
 8005fd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fdc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	0151      	lsls	r1, r2, #5
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	440a      	add	r2, r1
 8005ff4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ffc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3301      	adds	r3, #1
 8006002:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800600a:	d81d      	bhi.n	8006048 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	4413      	add	r3, r2
 8006014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800601e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006022:	d0ec      	beq.n	8005ffe <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006024:	e070      	b.n	8006108 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	4413      	add	r3, r2
 800602e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	0151      	lsls	r1, r2, #5
 8006038:	69fa      	ldr	r2, [r7, #28]
 800603a:	440a      	add	r2, r1
 800603c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006040:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006044:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006046:	e05f      	b.n	8006108 <USB_HC_Halt+0x1ea>
            break;
 8006048:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800604a:	e05d      	b.n	8006108 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	4413      	add	r3, r2
 8006054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	0151      	lsls	r1, r2, #5
 800605e:	69fa      	ldr	r2, [r7, #28]
 8006060:	440a      	add	r2, r1
 8006062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006066:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800606a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006078:	2b00      	cmp	r3, #0
 800607a:	d133      	bne.n	80060e4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	4413      	add	r3, r2
 8006084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	69fa      	ldr	r2, [r7, #28]
 8006090:	440a      	add	r2, r1
 8006092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006096:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800609a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	0151      	lsls	r1, r2, #5
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	440a      	add	r2, r1
 80060b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060ba:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3301      	adds	r3, #1
 80060c0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060c8:	d81d      	bhi.n	8006106 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060e0:	d0ec      	beq.n	80060bc <USB_HC_Halt+0x19e>
 80060e2:	e011      	b.n	8006108 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	69fa      	ldr	r2, [r7, #28]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	e000      	b.n	8006108 <USB_HC_Halt+0x1ea>
          break;
 8006106:	bf00      	nop
    }
  }

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3724      	adds	r7, #36	; 0x24
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
	...

08006118 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	460b      	mov	r3, r1
 8006122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800612c:	2301      	movs	r3, #1
 800612e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	04da      	lsls	r2, r3, #19
 8006134:	4b15      	ldr	r3, [pc, #84]	; (800618c <USB_DoPing+0x74>)
 8006136:	4013      	ands	r3, r2
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	0151      	lsls	r1, r2, #5
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	440a      	add	r2, r1
 8006140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006144:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006148:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	4413      	add	r3, r2
 8006152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006160:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006168:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	4413      	add	r3, r2
 8006172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006176:	461a      	mov	r2, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	371c      	adds	r7, #28
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	1ff80000 	.word	0x1ff80000

08006190 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7ff f911 	bl	80053cc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80061aa:	2110      	movs	r1, #16
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7ff f96b 	bl	8005488 <USB_FlushTxFifo>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f7ff f997 	bl	80054f0 <USB_FlushRxFifo>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80061cc:	2300      	movs	r3, #0
 80061ce:	61bb      	str	r3, [r7, #24]
 80061d0:	e01f      	b.n	8006212 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061e8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061f8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	4413      	add	r3, r2
 8006202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006206:	461a      	mov	r2, r3
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	3301      	adds	r3, #1
 8006210:	61bb      	str	r3, [r7, #24]
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2b0f      	cmp	r3, #15
 8006216:	d9dc      	bls.n	80061d2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006218:	2300      	movs	r3, #0
 800621a:	61bb      	str	r3, [r7, #24]
 800621c:	e034      	b.n	8006288 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	4413      	add	r3, r2
 8006226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006234:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800623c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006244:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	4413      	add	r3, r2
 800624e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006252:	461a      	mov	r2, r3
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3301      	adds	r3, #1
 800625c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006264:	d80c      	bhi.n	8006280 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	4413      	add	r3, r2
 800626e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800627c:	d0ec      	beq.n	8006258 <USB_StopHost+0xc8>
 800627e:	e000      	b.n	8006282 <USB_StopHost+0xf2>
        break;
 8006280:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	3301      	adds	r3, #1
 8006286:	61bb      	str	r3, [r7, #24]
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	2b0f      	cmp	r3, #15
 800628c:	d9c7      	bls.n	800621e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006294:	461a      	mov	r2, r3
 8006296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800629a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062a2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff f880 	bl	80053aa <USB_EnableGlobalInt>

  return ret;
 80062aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3720      	adds	r7, #32
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80062b4:	b590      	push	{r4, r7, lr}
 80062b6:	b089      	sub	sp, #36	; 0x24
 80062b8:	af04      	add	r7, sp, #16
 80062ba:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80062bc:	2301      	movs	r3, #1
 80062be:	2202      	movs	r2, #2
 80062c0:	2102      	movs	r1, #2
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fc66 	bl	8006b94 <USBH_FindInterface>
 80062c8:	4603      	mov	r3, r0
 80062ca:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
 80062ce:	2bff      	cmp	r3, #255	; 0xff
 80062d0:	d002      	beq.n	80062d8 <USBH_CDC_InterfaceInit+0x24>
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d901      	bls.n	80062dc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80062d8:	2302      	movs	r3, #2
 80062da:	e13d      	b.n	8006558 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	4619      	mov	r1, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fc3b 	bl	8006b5c <USBH_SelectInterface>
 80062e6:	4603      	mov	r3, r0
 80062e8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80062ea:	7bbb      	ldrb	r3, [r7, #14]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80062f0:	2302      	movs	r3, #2
 80062f2:	e131      	b.n	8006558 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80062fa:	2050      	movs	r0, #80	; 0x50
 80062fc:	f002 fad2 	bl	80088a4 <malloc>
 8006300:	4603      	mov	r3, r0
 8006302:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800630a:	69db      	ldr	r3, [r3, #28]
 800630c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006314:	2302      	movs	r3, #2
 8006316:	e11f      	b.n	8006558 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006318:	2250      	movs	r2, #80	; 0x50
 800631a:	2100      	movs	r1, #0
 800631c:	68b8      	ldr	r0, [r7, #8]
 800631e:	f002 fb7d 	bl	8008a1c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006322:	7bfb      	ldrb	r3, [r7, #15]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	211a      	movs	r1, #26
 8006328:	fb01 f303 	mul.w	r3, r1, r3
 800632c:	4413      	add	r3, r2
 800632e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	b25b      	sxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	da15      	bge.n	8006366 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	211a      	movs	r1, #26
 8006340:	fb01 f303 	mul.w	r3, r1, r3
 8006344:	4413      	add	r3, r2
 8006346:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800634a:	781a      	ldrb	r2, [r3, #0]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	211a      	movs	r1, #26
 8006356:	fb01 f303 	mul.w	r3, r1, r3
 800635a:	4413      	add	r3, r2
 800635c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006360:	881a      	ldrh	r2, [r3, #0]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	785b      	ldrb	r3, [r3, #1]
 800636a:	4619      	mov	r1, r3
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f001 ff2e 	bl	80081ce <USBH_AllocPipe>
 8006372:	4603      	mov	r3, r0
 8006374:	461a      	mov	r2, r3
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	7819      	ldrb	r1, [r3, #0]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	7858      	ldrb	r0, [r3, #1]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	8952      	ldrh	r2, [r2, #10]
 8006392:	9202      	str	r2, [sp, #8]
 8006394:	2203      	movs	r2, #3
 8006396:	9201      	str	r2, [sp, #4]
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	4623      	mov	r3, r4
 800639c:	4602      	mov	r2, r0
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f001 fee6 	bl	8008170 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2200      	movs	r2, #0
 80063aa:	4619      	mov	r1, r3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f002 f9f5 	bl	800879c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80063b2:	2300      	movs	r3, #0
 80063b4:	2200      	movs	r2, #0
 80063b6:	210a      	movs	r1, #10
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fbeb 	bl	8006b94 <USBH_FindInterface>
 80063be:	4603      	mov	r3, r0
 80063c0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
 80063c4:	2bff      	cmp	r3, #255	; 0xff
 80063c6:	d002      	beq.n	80063ce <USBH_CDC_InterfaceInit+0x11a>
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d901      	bls.n	80063d2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80063ce:	2302      	movs	r3, #2
 80063d0:	e0c2      	b.n	8006558 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	211a      	movs	r1, #26
 80063d8:	fb01 f303 	mul.w	r3, r1, r3
 80063dc:	4413      	add	r3, r2
 80063de:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	b25b      	sxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	da16      	bge.n	8006418 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	211a      	movs	r1, #26
 80063f0:	fb01 f303 	mul.w	r3, r1, r3
 80063f4:	4413      	add	r3, r2
 80063f6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80063fa:	781a      	ldrb	r2, [r3, #0]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	211a      	movs	r1, #26
 8006406:	fb01 f303 	mul.w	r3, r1, r3
 800640a:	4413      	add	r3, r2
 800640c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006410:	881a      	ldrh	r2, [r3, #0]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	835a      	strh	r2, [r3, #26]
 8006416:	e015      	b.n	8006444 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006418:	7bfb      	ldrb	r3, [r7, #15]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	211a      	movs	r1, #26
 800641e:	fb01 f303 	mul.w	r3, r1, r3
 8006422:	4413      	add	r3, r2
 8006424:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006428:	781a      	ldrb	r2, [r3, #0]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800642e:	7bfb      	ldrb	r3, [r7, #15]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	211a      	movs	r1, #26
 8006434:	fb01 f303 	mul.w	r3, r1, r3
 8006438:	4413      	add	r3, r2
 800643a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800643e:	881a      	ldrh	r2, [r3, #0]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	211a      	movs	r1, #26
 800644a:	fb01 f303 	mul.w	r3, r1, r3
 800644e:	4413      	add	r3, r2
 8006450:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	b25b      	sxtb	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	da16      	bge.n	800648a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	211a      	movs	r1, #26
 8006462:	fb01 f303 	mul.w	r3, r1, r3
 8006466:	4413      	add	r3, r2
 8006468:	f203 3356 	addw	r3, r3, #854	; 0x356
 800646c:	781a      	ldrb	r2, [r3, #0]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006472:	7bfb      	ldrb	r3, [r7, #15]
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	211a      	movs	r1, #26
 8006478:	fb01 f303 	mul.w	r3, r1, r3
 800647c:	4413      	add	r3, r2
 800647e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006482:	881a      	ldrh	r2, [r3, #0]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	835a      	strh	r2, [r3, #26]
 8006488:	e015      	b.n	80064b6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800648a:	7bfb      	ldrb	r3, [r7, #15]
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	211a      	movs	r1, #26
 8006490:	fb01 f303 	mul.w	r3, r1, r3
 8006494:	4413      	add	r3, r2
 8006496:	f203 3356 	addw	r3, r3, #854	; 0x356
 800649a:	781a      	ldrb	r2, [r3, #0]
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	211a      	movs	r1, #26
 80064a6:	fb01 f303 	mul.w	r3, r1, r3
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80064b0:	881a      	ldrh	r2, [r3, #0]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	7b9b      	ldrb	r3, [r3, #14]
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f001 fe86 	bl	80081ce <USBH_AllocPipe>
 80064c2:	4603      	mov	r3, r0
 80064c4:	461a      	mov	r2, r3
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	7bdb      	ldrb	r3, [r3, #15]
 80064ce:	4619      	mov	r1, r3
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f001 fe7c 	bl	80081ce <USBH_AllocPipe>
 80064d6:	4603      	mov	r3, r0
 80064d8:	461a      	mov	r2, r3
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	7b59      	ldrb	r1, [r3, #13]
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	7b98      	ldrb	r0, [r3, #14]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	8b12      	ldrh	r2, [r2, #24]
 80064f6:	9202      	str	r2, [sp, #8]
 80064f8:	2202      	movs	r2, #2
 80064fa:	9201      	str	r2, [sp, #4]
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	4623      	mov	r3, r4
 8006500:	4602      	mov	r2, r0
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 fe34 	bl	8008170 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	7b19      	ldrb	r1, [r3, #12]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	7bd8      	ldrb	r0, [r3, #15]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	8b52      	ldrh	r2, [r2, #26]
 8006520:	9202      	str	r2, [sp, #8]
 8006522:	2202      	movs	r2, #2
 8006524:	9201      	str	r2, [sp, #4]
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	4623      	mov	r3, r4
 800652a:	4602      	mov	r2, r0
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f001 fe1f 	bl	8008170 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	7b5b      	ldrb	r3, [r3, #13]
 800653e:	2200      	movs	r2, #0
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f002 f92a 	bl	800879c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	7b1b      	ldrb	r3, [r3, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f002 f923 	bl	800879c <USBH_LL_SetToggle>

  return USBH_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3714      	adds	r7, #20
 800655c:	46bd      	mov	sp, r7
 800655e:	bd90      	pop	{r4, r7, pc}

08006560 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00e      	beq.n	8006598 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	4619      	mov	r1, r3
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f001 fe14 	bl	80081ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f001 fe3f 	bl	8008210 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	7b1b      	ldrb	r3, [r3, #12]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00e      	beq.n	80065be <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	7b1b      	ldrb	r3, [r3, #12]
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f001 fe01 	bl	80081ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	7b1b      	ldrb	r3, [r3, #12]
 80065b0:	4619      	mov	r1, r3
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f001 fe2c 	bl	8008210 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2200      	movs	r2, #0
 80065bc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	7b5b      	ldrb	r3, [r3, #13]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00e      	beq.n	80065e4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	7b5b      	ldrb	r3, [r3, #13]
 80065ca:	4619      	mov	r1, r3
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f001 fdee 	bl	80081ae <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	7b5b      	ldrb	r3, [r3, #13]
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 fe19 	bl	8008210 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00b      	beq.n	8006608 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f002 f95b 	bl	80088b4 <free>
    phost->pActiveClass->pData = 0U;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006604:	2200      	movs	r2, #0
 8006606:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3340      	adds	r3, #64	; 0x40
 8006628:	4619      	mov	r1, r3
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f8b1 	bl	8006792 <GetLineCoding>
 8006630:	4603      	mov	r3, r0
 8006632:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006634:	7afb      	ldrb	r3, [r7, #11]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d105      	bne.n	8006646 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006640:	2102      	movs	r1, #2
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006646:	7afb      	ldrb	r3, [r7, #11]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006658:	2301      	movs	r3, #1
 800665a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006666:	69db      	ldr	r3, [r3, #28]
 8006668:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006670:	2b04      	cmp	r3, #4
 8006672:	d877      	bhi.n	8006764 <USBH_CDC_Process+0x114>
 8006674:	a201      	add	r2, pc, #4	; (adr r2, 800667c <USBH_CDC_Process+0x2c>)
 8006676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667a:	bf00      	nop
 800667c:	08006691 	.word	0x08006691
 8006680:	08006697 	.word	0x08006697
 8006684:	080066c7 	.word	0x080066c7
 8006688:	0800673b 	.word	0x0800673b
 800668c:	08006749 	.word	0x08006749
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006690:	2300      	movs	r3, #0
 8006692:	73fb      	strb	r3, [r7, #15]
      break;
 8006694:	e06d      	b.n	8006772 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800669a:	4619      	mov	r1, r3
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f897 	bl	80067d0 <SetLineCoding>
 80066a2:	4603      	mov	r3, r0
 80066a4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066a6:	7bbb      	ldrb	r3, [r7, #14]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d104      	bne.n	80066b6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2202      	movs	r2, #2
 80066b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80066b4:	e058      	b.n	8006768 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80066b6:	7bbb      	ldrb	r3, [r7, #14]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d055      	beq.n	8006768 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	2204      	movs	r2, #4
 80066c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80066c4:	e050      	b.n	8006768 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	3340      	adds	r3, #64	; 0x40
 80066ca:	4619      	mov	r1, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f860 	bl	8006792 <GetLineCoding>
 80066d2:	4603      	mov	r3, r0
 80066d4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066d6:	7bbb      	ldrb	r3, [r7, #14]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d126      	bne.n	800672a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ee:	791b      	ldrb	r3, [r3, #4]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d13b      	bne.n	800676c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066fe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006700:	429a      	cmp	r2, r3
 8006702:	d133      	bne.n	800676c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800670e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006710:	429a      	cmp	r2, r3
 8006712:	d12b      	bne.n	800676c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800671c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800671e:	429a      	cmp	r2, r3
 8006720:	d124      	bne.n	800676c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 f958 	bl	80069d8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006728:	e020      	b.n	800676c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800672a:	7bbb      	ldrb	r3, [r7, #14]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d01d      	beq.n	800676c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2204      	movs	r2, #4
 8006734:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006738:	e018      	b.n	800676c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f867 	bl	800680e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f8da 	bl	80068fa <CDC_ProcessReception>
      break;
 8006746:	e014      	b.n	8006772 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006748:	2100      	movs	r1, #0
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 ffef 	bl	800772e <USBH_ClrFeature>
 8006750:	4603      	mov	r3, r0
 8006752:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006754:	7bbb      	ldrb	r3, [r7, #14]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10a      	bne.n	8006770 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006762:	e005      	b.n	8006770 <USBH_CDC_Process+0x120>

    default:
      break;
 8006764:	bf00      	nop
 8006766:	e004      	b.n	8006772 <USBH_CDC_Process+0x122>
      break;
 8006768:	bf00      	nop
 800676a:	e002      	b.n	8006772 <USBH_CDC_Process+0x122>
      break;
 800676c:	bf00      	nop
 800676e:	e000      	b.n	8006772 <USBH_CDC_Process+0x122>
      break;
 8006770:	bf00      	nop

  }

  return status;
 8006772:	7bfb      	ldrb	r3, [r7, #15]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b082      	sub	sp, #8
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	22a1      	movs	r2, #161	; 0xa1
 80067a0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2221      	movs	r2, #33	; 0x21
 80067a6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2207      	movs	r2, #7
 80067b8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2207      	movs	r2, #7
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 fa83 	bl	8007ccc <USBH_CtlReq>
 80067c6:	4603      	mov	r3, r0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2221      	movs	r2, #33	; 0x21
 80067de:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2220      	movs	r2, #32
 80067e4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2207      	movs	r2, #7
 80067f6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	2207      	movs	r2, #7
 80067fc:	4619      	mov	r1, r3
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 fa64 	bl	8007ccc <USBH_CtlReq>
 8006804:	4603      	mov	r3, r0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b086      	sub	sp, #24
 8006812:	af02      	add	r7, sp, #8
 8006814:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006820:	2300      	movs	r3, #0
 8006822:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800682a:	2b01      	cmp	r3, #1
 800682c:	d002      	beq.n	8006834 <CDC_ProcessTransmission+0x26>
 800682e:	2b02      	cmp	r3, #2
 8006830:	d023      	beq.n	800687a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006832:	e05e      	b.n	80068f2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	8b12      	ldrh	r2, [r2, #24]
 800683c:	4293      	cmp	r3, r2
 800683e:	d90b      	bls.n	8006858 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	69d9      	ldr	r1, [r3, #28]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8b1a      	ldrh	r2, [r3, #24]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	7b5b      	ldrb	r3, [r3, #13]
 800684c:	2001      	movs	r0, #1
 800684e:	9000      	str	r0, [sp, #0]
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 fc4a 	bl	80080ea <USBH_BulkSendData>
 8006856:	e00b      	b.n	8006870 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006860:	b29a      	uxth	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	7b5b      	ldrb	r3, [r3, #13]
 8006866:	2001      	movs	r0, #1
 8006868:	9000      	str	r0, [sp, #0]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f001 fc3d 	bl	80080ea <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006878:	e03b      	b.n	80068f2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	7b5b      	ldrb	r3, [r3, #13]
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f001 ff61 	bl	8008748 <USBH_LL_GetURBState>
 8006886:	4603      	mov	r3, r0
 8006888:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800688a:	7afb      	ldrb	r3, [r7, #11]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d128      	bne.n	80068e2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	8b12      	ldrh	r2, [r2, #24]
 8006898:	4293      	cmp	r3, r2
 800689a:	d90e      	bls.n	80068ba <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	8b12      	ldrh	r2, [r2, #24]
 80068a4:	1a9a      	subs	r2, r3, r2
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	8b12      	ldrh	r2, [r2, #24]
 80068b2:	441a      	add	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	61da      	str	r2, [r3, #28]
 80068b8:	e002      	b.n	80068c0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d004      	beq.n	80068d2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80068d0:	e00e      	b.n	80068f0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f868 	bl	80069b0 <USBH_CDC_TransmitCallback>
      break;
 80068e0:	e006      	b.n	80068f0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80068e2:	7afb      	ldrb	r3, [r7, #11]
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d103      	bne.n	80068f0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80068f0:	bf00      	nop
  }
}
 80068f2:	bf00      	nop
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b086      	sub	sp, #24
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800690c:	2300      	movs	r3, #0
 800690e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006916:	2b03      	cmp	r3, #3
 8006918:	d002      	beq.n	8006920 <CDC_ProcessReception+0x26>
 800691a:	2b04      	cmp	r3, #4
 800691c:	d00e      	beq.n	800693c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800691e:	e043      	b.n	80069a8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	6a19      	ldr	r1, [r3, #32]
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	8b5a      	ldrh	r2, [r3, #26]
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	7b1b      	ldrb	r3, [r3, #12]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f001 fc01 	bl	8008134 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2204      	movs	r2, #4
 8006936:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800693a:	e035      	b.n	80069a8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	7b1b      	ldrb	r3, [r3, #12]
 8006940:	4619      	mov	r1, r3
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f001 ff00 	bl	8008748 <USBH_LL_GetURBState>
 8006948:	4603      	mov	r3, r0
 800694a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800694c:	7cfb      	ldrb	r3, [r7, #19]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d129      	bne.n	80069a6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	7b1b      	ldrb	r3, [r3, #12]
 8006956:	4619      	mov	r1, r3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f001 fe63 	bl	8008624 <USBH_LL_GetLastXferSize>
 800695e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	429a      	cmp	r2, r3
 8006968:	d016      	beq.n	8006998 <CDC_ProcessReception+0x9e>
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	8b5b      	ldrh	r3, [r3, #26]
 800696e:	461a      	mov	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4293      	cmp	r3, r2
 8006974:	d910      	bls.n	8006998 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	1ad2      	subs	r2, r2, r3
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	6a1a      	ldr	r2, [r3, #32]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	441a      	add	r2, r3
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2203      	movs	r2, #3
 8006992:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006996:	e006      	b.n	80069a6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 f80f 	bl	80069c4 <USBH_CDC_ReceiveCallback>
      break;
 80069a6:	bf00      	nop
  }
}
 80069a8:	bf00      	nop
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	4613      	mov	r3, r2
 80069f8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006a00:	2302      	movs	r3, #2
 8006a02:	e029      	b.n	8006a58 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	79fa      	ldrb	r2, [r7, #7]
 8006a08:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f000 f81f 	bl	8006a60 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f001 fd33 	bl	80084bc <USBH_LL_Init>

  return USBH_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	e009      	b.n	8006a86 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	33e0      	adds	r3, #224	; 0xe0
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	3301      	adds	r3, #1
 8006a84:	60fb      	str	r3, [r7, #12]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b0f      	cmp	r3, #15
 8006a8a:	d9f2      	bls.n	8006a72 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	e009      	b.n	8006aa6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	60fb      	str	r3, [r7, #12]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aac:	d3f1      	bcc.n	8006a92 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2240      	movs	r2, #64	; 0x40
 8006ad2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d016      	beq.n	8006b4a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10e      	bne.n	8006b44 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006b2c:	1c59      	adds	r1, r3, #1
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	33de      	adds	r3, #222	; 0xde
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	73fb      	strb	r3, [r7, #15]
 8006b42:	e004      	b.n	8006b4e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006b44:	2302      	movs	r3, #2
 8006b46:	73fb      	strb	r3, [r7, #15]
 8006b48:	e001      	b.n	8006b4e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3714      	adds	r7, #20
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	460b      	mov	r3, r1
 8006b66:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006b72:	78fa      	ldrb	r2, [r7, #3]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d204      	bcs.n	8006b82 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	78fa      	ldrb	r2, [r7, #3]
 8006b7c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006b80:	e001      	b.n	8006b86 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006b82:	2302      	movs	r3, #2
 8006b84:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	4608      	mov	r0, r1
 8006b9e:	4611      	mov	r1, r2
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	70fb      	strb	r3, [r7, #3]
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	70bb      	strb	r3, [r7, #2]
 8006baa:	4613      	mov	r3, r2
 8006bac:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006bbc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006bbe:	e025      	b.n	8006c0c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006bc0:	7dfb      	ldrb	r3, [r7, #23]
 8006bc2:	221a      	movs	r2, #26
 8006bc4:	fb02 f303 	mul.w	r3, r2, r3
 8006bc8:	3308      	adds	r3, #8
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	4413      	add	r3, r2
 8006bce:	3302      	adds	r3, #2
 8006bd0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	795b      	ldrb	r3, [r3, #5]
 8006bd6:	78fa      	ldrb	r2, [r7, #3]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d002      	beq.n	8006be2 <USBH_FindInterface+0x4e>
 8006bdc:	78fb      	ldrb	r3, [r7, #3]
 8006bde:	2bff      	cmp	r3, #255	; 0xff
 8006be0:	d111      	bne.n	8006c06 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006be6:	78ba      	ldrb	r2, [r7, #2]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d002      	beq.n	8006bf2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006bec:	78bb      	ldrb	r3, [r7, #2]
 8006bee:	2bff      	cmp	r3, #255	; 0xff
 8006bf0:	d109      	bne.n	8006c06 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006bf6:	787a      	ldrb	r2, [r7, #1]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d002      	beq.n	8006c02 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006bfc:	787b      	ldrb	r3, [r7, #1]
 8006bfe:	2bff      	cmp	r3, #255	; 0xff
 8006c00:	d101      	bne.n	8006c06 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006c02:	7dfb      	ldrb	r3, [r7, #23]
 8006c04:	e006      	b.n	8006c14 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006c06:	7dfb      	ldrb	r3, [r7, #23]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c0c:	7dfb      	ldrb	r3, [r7, #23]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d9d6      	bls.n	8006bc0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006c12:	23ff      	movs	r3, #255	; 0xff
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	371c      	adds	r7, #28
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f001 fc83 	bl	8008534 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006c2e:	2101      	movs	r1, #1
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 fd9c 	bl	800876e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af04      	add	r7, sp, #16
 8006c46:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006c48:	2302      	movs	r3, #2
 8006c4a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d102      	bne.n	8006c62 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2203      	movs	r2, #3
 8006c60:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b0b      	cmp	r3, #11
 8006c6a:	f200 81be 	bhi.w	8006fea <USBH_Process+0x3aa>
 8006c6e:	a201      	add	r2, pc, #4	; (adr r2, 8006c74 <USBH_Process+0x34>)
 8006c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c74:	08006ca5 	.word	0x08006ca5
 8006c78:	08006cd7 	.word	0x08006cd7
 8006c7c:	08006d3f 	.word	0x08006d3f
 8006c80:	08006f85 	.word	0x08006f85
 8006c84:	08006feb 	.word	0x08006feb
 8006c88:	08006de3 	.word	0x08006de3
 8006c8c:	08006f2b 	.word	0x08006f2b
 8006c90:	08006e19 	.word	0x08006e19
 8006c94:	08006e39 	.word	0x08006e39
 8006c98:	08006e59 	.word	0x08006e59
 8006c9c:	08006e9d 	.word	0x08006e9d
 8006ca0:	08006f6d 	.word	0x08006f6d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 819e 	beq.w	8006fee <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006cb8:	20c8      	movs	r0, #200	; 0xc8
 8006cba:	f001 fd9f 	bl	80087fc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f001 fc95 	bl	80085ee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006cd4:	e18b      	b.n	8006fee <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d107      	bne.n	8006cf0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006cee:	e18d      	b.n	800700c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006cf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cfa:	d914      	bls.n	8006d26 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006d02:	3301      	adds	r3, #1
 8006d04:	b2da      	uxtb	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	d903      	bls.n	8006d1e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	220d      	movs	r2, #13
 8006d1a:	701a      	strb	r2, [r3, #0]
      break;
 8006d1c:	e176      	b.n	800700c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	701a      	strb	r2, [r3, #0]
      break;
 8006d24:	e172      	b.n	800700c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006d2c:	f103 020a 	add.w	r2, r3, #10
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006d36:	200a      	movs	r0, #10
 8006d38:	f001 fd60 	bl	80087fc <USBH_Delay>
      break;
 8006d3c:	e166      	b.n	800700c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d005      	beq.n	8006d54 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d4e:	2104      	movs	r1, #4
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006d54:	2064      	movs	r0, #100	; 0x64
 8006d56:	f001 fd51 	bl	80087fc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f001 fc20 	bl	80085a0 <USBH_LL_GetSpeed>
 8006d60:	4603      	mov	r3, r0
 8006d62:	461a      	mov	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2205      	movs	r2, #5
 8006d6e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006d70:	2100      	movs	r1, #0
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f001 fa2b 	bl	80081ce <USBH_AllocPipe>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006d80:	2180      	movs	r1, #128	; 0x80
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f001 fa23 	bl	80081ce <USBH_AllocPipe>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	7919      	ldrb	r1, [r3, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006da4:	b292      	uxth	r2, r2
 8006da6:	9202      	str	r2, [sp, #8]
 8006da8:	2200      	movs	r2, #0
 8006daa:	9201      	str	r2, [sp, #4]
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	4603      	mov	r3, r0
 8006db0:	2280      	movs	r2, #128	; 0x80
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f001 f9dc 	bl	8008170 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	7959      	ldrb	r1, [r3, #5]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006dcc:	b292      	uxth	r2, r2
 8006dce:	9202      	str	r2, [sp, #8]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	9201      	str	r2, [sp, #4]
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2200      	movs	r2, #0
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 f9c8 	bl	8008170 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006de0:	e114      	b.n	800700c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f918 	bl	8007018 <USBH_HandleEnum>
 8006de8:	4603      	mov	r3, r0
 8006dea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006dec:	7bbb      	ldrb	r3, [r7, #14]
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f040 80fe 	bne.w	8006ff2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d103      	bne.n	8006e10 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2208      	movs	r2, #8
 8006e0c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e0e:	e0f0      	b.n	8006ff2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2207      	movs	r2, #7
 8006e14:	701a      	strb	r2, [r3, #0]
      break;
 8006e16:	e0ec      	b.n	8006ff2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 80e9 	beq.w	8006ff6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2208      	movs	r2, #8
 8006e34:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006e36:	e0de      	b.n	8006ff6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fc2c 	bl	80076a0 <USBH_SetCfg>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f040 80d5 	bne.w	8006ffa <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2209      	movs	r2, #9
 8006e54:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e56:	e0d0      	b.n	8006ffa <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006e5e:	f003 0320 	and.w	r3, r3, #32
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d016      	beq.n	8006e94 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006e66:	2101      	movs	r1, #1
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fc3c 	bl	80076e6 <USBH_SetFeature>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d103      	bne.n	8006e82 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	220a      	movs	r2, #10
 8006e7e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e80:	e0bd      	b.n	8006ffe <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006e82:	7bbb      	ldrb	r3, [r7, #14]
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b03      	cmp	r3, #3
 8006e88:	f040 80b9 	bne.w	8006ffe <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	220a      	movs	r2, #10
 8006e90:	701a      	strb	r2, [r3, #0]
      break;
 8006e92:	e0b4      	b.n	8006ffe <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	220a      	movs	r2, #10
 8006e98:	701a      	strb	r2, [r3, #0]
      break;
 8006e9a:	e0b0      	b.n	8006ffe <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 80ad 	beq.w	8007002 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	73fb      	strb	r3, [r7, #15]
 8006eb4:	e016      	b.n	8006ee4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006eb6:	7bfa      	ldrb	r2, [r7, #15]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	32de      	adds	r2, #222	; 0xde
 8006ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec0:	791a      	ldrb	r2, [r3, #4]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d108      	bne.n	8006ede <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006ecc:	7bfa      	ldrb	r2, [r7, #15]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	32de      	adds	r2, #222	; 0xde
 8006ed2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006edc:	e005      	b.n	8006eea <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	73fb      	strb	r3, [r7, #15]
 8006ee4:	7bfb      	ldrb	r3, [r7, #15]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d0e5      	beq.n	8006eb6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d016      	beq.n	8006f22 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	4798      	blx	r3
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d109      	bne.n	8006f1a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2206      	movs	r2, #6
 8006f0a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f12:	2103      	movs	r1, #3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f18:	e073      	b.n	8007002 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	220d      	movs	r2, #13
 8006f1e:	701a      	strb	r2, [r3, #0]
      break;
 8006f20:	e06f      	b.n	8007002 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	220d      	movs	r2, #13
 8006f26:	701a      	strb	r2, [r3, #0]
      break;
 8006f28:	e06b      	b.n	8007002 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d017      	beq.n	8006f64 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	4798      	blx	r3
 8006f40:	4603      	mov	r3, r0
 8006f42:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006f44:	7bbb      	ldrb	r3, [r7, #14]
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d103      	bne.n	8006f54 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	220b      	movs	r2, #11
 8006f50:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f52:	e058      	b.n	8007006 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006f54:	7bbb      	ldrb	r3, [r7, #14]
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d154      	bne.n	8007006 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	220d      	movs	r2, #13
 8006f60:	701a      	strb	r2, [r3, #0]
      break;
 8006f62:	e050      	b.n	8007006 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	220d      	movs	r2, #13
 8006f68:	701a      	strb	r2, [r3, #0]
      break;
 8006f6a:	e04c      	b.n	8007006 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d049      	beq.n	800700a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	4798      	blx	r3
      }
      break;
 8006f82:	e042      	b.n	800700a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff fd67 	bl	8006a60 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d009      	beq.n	8006fb0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d005      	beq.n	8006fc6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fc0:	2105      	movs	r1, #5
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d107      	bne.n	8006fe2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7ff fe20 	bl	8006c20 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006fe0:	e014      	b.n	800700c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f001 faa6 	bl	8008534 <USBH_LL_Start>
      break;
 8006fe8:	e010      	b.n	800700c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006fea:	bf00      	nop
 8006fec:	e00e      	b.n	800700c <USBH_Process+0x3cc>
      break;
 8006fee:	bf00      	nop
 8006ff0:	e00c      	b.n	800700c <USBH_Process+0x3cc>
      break;
 8006ff2:	bf00      	nop
 8006ff4:	e00a      	b.n	800700c <USBH_Process+0x3cc>
    break;
 8006ff6:	bf00      	nop
 8006ff8:	e008      	b.n	800700c <USBH_Process+0x3cc>
      break;
 8006ffa:	bf00      	nop
 8006ffc:	e006      	b.n	800700c <USBH_Process+0x3cc>
      break;
 8006ffe:	bf00      	nop
 8007000:	e004      	b.n	800700c <USBH_Process+0x3cc>
      break;
 8007002:	bf00      	nop
 8007004:	e002      	b.n	800700c <USBH_Process+0x3cc>
      break;
 8007006:	bf00      	nop
 8007008:	e000      	b.n	800700c <USBH_Process+0x3cc>
      break;
 800700a:	bf00      	nop
  }
  return USBH_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop

08007018 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b088      	sub	sp, #32
 800701c:	af04      	add	r7, sp, #16
 800701e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007020:	2301      	movs	r3, #1
 8007022:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007024:	2301      	movs	r3, #1
 8007026:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	785b      	ldrb	r3, [r3, #1]
 800702c:	2b07      	cmp	r3, #7
 800702e:	f200 81c1 	bhi.w	80073b4 <USBH_HandleEnum+0x39c>
 8007032:	a201      	add	r2, pc, #4	; (adr r2, 8007038 <USBH_HandleEnum+0x20>)
 8007034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007038:	08007059 	.word	0x08007059
 800703c:	08007117 	.word	0x08007117
 8007040:	08007181 	.word	0x08007181
 8007044:	0800720f 	.word	0x0800720f
 8007048:	08007279 	.word	0x08007279
 800704c:	080072e9 	.word	0x080072e9
 8007050:	0800732f 	.word	0x0800732f
 8007054:	08007375 	.word	0x08007375
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007058:	2108      	movs	r1, #8
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fa50 	bl	8007500 <USBH_Get_DevDesc>
 8007060:	4603      	mov	r3, r0
 8007062:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007064:	7bbb      	ldrb	r3, [r7, #14]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d130      	bne.n	80070cc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	7919      	ldrb	r1, [r3, #4]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800708e:	b292      	uxth	r2, r2
 8007090:	9202      	str	r2, [sp, #8]
 8007092:	2200      	movs	r2, #0
 8007094:	9201      	str	r2, [sp, #4]
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	4603      	mov	r3, r0
 800709a:	2280      	movs	r2, #128	; 0x80
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 f867 	bl	8008170 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	7959      	ldrb	r1, [r3, #5]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80070b6:	b292      	uxth	r2, r2
 80070b8:	9202      	str	r2, [sp, #8]
 80070ba:	2200      	movs	r2, #0
 80070bc:	9201      	str	r2, [sp, #4]
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	4603      	mov	r3, r0
 80070c2:	2200      	movs	r2, #0
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f001 f853 	bl	8008170 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80070ca:	e175      	b.n	80073b8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	2b03      	cmp	r3, #3
 80070d0:	f040 8172 	bne.w	80073b8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070da:	3301      	adds	r3, #1
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	d903      	bls.n	80070f6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	220d      	movs	r2, #13
 80070f2:	701a      	strb	r2, [r3, #0]
      break;
 80070f4:	e160      	b.n	80073b8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	795b      	ldrb	r3, [r3, #5]
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f001 f887 	bl	8008210 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	791b      	ldrb	r3, [r3, #4]
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f001 f881 	bl	8008210 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	701a      	strb	r2, [r3, #0]
      break;
 8007114:	e150      	b.n	80073b8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007116:	2112      	movs	r1, #18
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f9f1 	bl	8007500 <USBH_Get_DevDesc>
 800711e:	4603      	mov	r3, r0
 8007120:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007122:	7bbb      	ldrb	r3, [r7, #14]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d103      	bne.n	8007130 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2202      	movs	r2, #2
 800712c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800712e:	e145      	b.n	80073bc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007130:	7bbb      	ldrb	r3, [r7, #14]
 8007132:	2b03      	cmp	r3, #3
 8007134:	f040 8142 	bne.w	80073bc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800713e:	3301      	adds	r3, #1
 8007140:	b2da      	uxtb	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800714e:	2b03      	cmp	r3, #3
 8007150:	d903      	bls.n	800715a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	220d      	movs	r2, #13
 8007156:	701a      	strb	r2, [r3, #0]
      break;
 8007158:	e130      	b.n	80073bc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	795b      	ldrb	r3, [r3, #5]
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f001 f855 	bl	8008210 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	791b      	ldrb	r3, [r3, #4]
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f001 f84f 	bl	8008210 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	701a      	strb	r2, [r3, #0]
      break;
 800717e:	e11d      	b.n	80073bc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007180:	2101      	movs	r1, #1
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fa68 	bl	8007658 <USBH_SetAddress>
 8007188:	4603      	mov	r3, r0
 800718a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800718c:	7bbb      	ldrb	r3, [r7, #14]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d132      	bne.n	80071f8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007192:	2002      	movs	r0, #2
 8007194:	f001 fb32 	bl	80087fc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2203      	movs	r2, #3
 80071a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	7919      	ldrb	r1, [r3, #4]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80071ba:	b292      	uxth	r2, r2
 80071bc:	9202      	str	r2, [sp, #8]
 80071be:	2200      	movs	r2, #0
 80071c0:	9201      	str	r2, [sp, #4]
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	4603      	mov	r3, r0
 80071c6:	2280      	movs	r2, #128	; 0x80
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 ffd1 	bl	8008170 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	7959      	ldrb	r1, [r3, #5]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80071e2:	b292      	uxth	r2, r2
 80071e4:	9202      	str	r2, [sp, #8]
 80071e6:	2200      	movs	r2, #0
 80071e8:	9201      	str	r2, [sp, #4]
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	4603      	mov	r3, r0
 80071ee:	2200      	movs	r2, #0
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 ffbd 	bl	8008170 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80071f6:	e0e3      	b.n	80073c0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071f8:	7bbb      	ldrb	r3, [r7, #14]
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	f040 80e0 	bne.w	80073c0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	220d      	movs	r2, #13
 8007204:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	705a      	strb	r2, [r3, #1]
      break;
 800720c:	e0d8      	b.n	80073c0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800720e:	2109      	movs	r1, #9
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f99d 	bl	8007550 <USBH_Get_CfgDesc>
 8007216:	4603      	mov	r3, r0
 8007218:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800721a:	7bbb      	ldrb	r3, [r7, #14]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d103      	bne.n	8007228 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2204      	movs	r2, #4
 8007224:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007226:	e0cd      	b.n	80073c4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007228:	7bbb      	ldrb	r3, [r7, #14]
 800722a:	2b03      	cmp	r3, #3
 800722c:	f040 80ca 	bne.w	80073c4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007236:	3301      	adds	r3, #1
 8007238:	b2da      	uxtb	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007246:	2b03      	cmp	r3, #3
 8007248:	d903      	bls.n	8007252 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	220d      	movs	r2, #13
 800724e:	701a      	strb	r2, [r3, #0]
      break;
 8007250:	e0b8      	b.n	80073c4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	795b      	ldrb	r3, [r3, #5]
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 ffd9 	bl	8008210 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	791b      	ldrb	r3, [r3, #4]
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 ffd3 	bl	8008210 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	701a      	strb	r2, [r3, #0]
      break;
 8007276:	e0a5      	b.n	80073c4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f965 	bl	8007550 <USBH_Get_CfgDesc>
 8007286:	4603      	mov	r3, r0
 8007288:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800728a:	7bbb      	ldrb	r3, [r7, #14]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d103      	bne.n	8007298 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2205      	movs	r2, #5
 8007294:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007296:	e097      	b.n	80073c8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007298:	7bbb      	ldrb	r3, [r7, #14]
 800729a:	2b03      	cmp	r3, #3
 800729c:	f040 8094 	bne.w	80073c8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072a6:	3301      	adds	r3, #1
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80072b6:	2b03      	cmp	r3, #3
 80072b8:	d903      	bls.n	80072c2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	220d      	movs	r2, #13
 80072be:	701a      	strb	r2, [r3, #0]
      break;
 80072c0:	e082      	b.n	80073c8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	795b      	ldrb	r3, [r3, #5]
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 ffa1 	bl	8008210 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	791b      	ldrb	r3, [r3, #4]
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 ff9b 	bl	8008210 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	701a      	strb	r2, [r3, #0]
      break;
 80072e6:	e06f      	b.n	80073c8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d019      	beq.n	8007326 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80072fe:	23ff      	movs	r3, #255	; 0xff
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f949 	bl	8007598 <USBH_Get_StringDesc>
 8007306:	4603      	mov	r3, r0
 8007308:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800730a:	7bbb      	ldrb	r3, [r7, #14]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d103      	bne.n	8007318 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2206      	movs	r2, #6
 8007314:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007316:	e059      	b.n	80073cc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007318:	7bbb      	ldrb	r3, [r7, #14]
 800731a:	2b03      	cmp	r3, #3
 800731c:	d156      	bne.n	80073cc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2206      	movs	r2, #6
 8007322:	705a      	strb	r2, [r3, #1]
      break;
 8007324:	e052      	b.n	80073cc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2206      	movs	r2, #6
 800732a:	705a      	strb	r2, [r3, #1]
      break;
 800732c:	e04e      	b.n	80073cc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007334:	2b00      	cmp	r3, #0
 8007336:	d019      	beq.n	800736c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007344:	23ff      	movs	r3, #255	; 0xff
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f926 	bl	8007598 <USBH_Get_StringDesc>
 800734c:	4603      	mov	r3, r0
 800734e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007350:	7bbb      	ldrb	r3, [r7, #14]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d103      	bne.n	800735e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2207      	movs	r2, #7
 800735a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800735c:	e038      	b.n	80073d0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800735e:	7bbb      	ldrb	r3, [r7, #14]
 8007360:	2b03      	cmp	r3, #3
 8007362:	d135      	bne.n	80073d0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2207      	movs	r2, #7
 8007368:	705a      	strb	r2, [r3, #1]
      break;
 800736a:	e031      	b.n	80073d0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2207      	movs	r2, #7
 8007370:	705a      	strb	r2, [r3, #1]
      break;
 8007372:	e02d      	b.n	80073d0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800737a:	2b00      	cmp	r3, #0
 800737c:	d017      	beq.n	80073ae <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800738a:	23ff      	movs	r3, #255	; 0xff
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f903 	bl	8007598 <USBH_Get_StringDesc>
 8007392:	4603      	mov	r3, r0
 8007394:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007396:	7bbb      	ldrb	r3, [r7, #14]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d102      	bne.n	80073a2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80073a0:	e018      	b.n	80073d4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d115      	bne.n	80073d4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	73fb      	strb	r3, [r7, #15]
      break;
 80073ac:	e012      	b.n	80073d4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	73fb      	strb	r3, [r7, #15]
      break;
 80073b2:	e00f      	b.n	80073d4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80073b4:	bf00      	nop
 80073b6:	e00e      	b.n	80073d6 <USBH_HandleEnum+0x3be>
      break;
 80073b8:	bf00      	nop
 80073ba:	e00c      	b.n	80073d6 <USBH_HandleEnum+0x3be>
      break;
 80073bc:	bf00      	nop
 80073be:	e00a      	b.n	80073d6 <USBH_HandleEnum+0x3be>
      break;
 80073c0:	bf00      	nop
 80073c2:	e008      	b.n	80073d6 <USBH_HandleEnum+0x3be>
      break;
 80073c4:	bf00      	nop
 80073c6:	e006      	b.n	80073d6 <USBH_HandleEnum+0x3be>
      break;
 80073c8:	bf00      	nop
 80073ca:	e004      	b.n	80073d6 <USBH_HandleEnum+0x3be>
      break;
 80073cc:	bf00      	nop
 80073ce:	e002      	b.n	80073d6 <USBH_HandleEnum+0x3be>
      break;
 80073d0:	bf00      	nop
 80073d2:	e000      	b.n	80073d6 <USBH_HandleEnum+0x3be>
      break;
 80073d4:	bf00      	nop
  }
  return Status;
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3710      	adds	r7, #16
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80073f2:	bf00      	nop
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b082      	sub	sp, #8
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f804 	bl	8007422 <USBH_HandleSof>
}
 800741a:	bf00      	nop
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b082      	sub	sp, #8
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b0b      	cmp	r3, #11
 8007432:	d10a      	bne.n	800744a <USBH_HandleSof+0x28>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800743a:	2b00      	cmp	r3, #0
 800743c:	d005      	beq.n	800744a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	4798      	blx	r3
  }
}
 800744a:	bf00      	nop
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007452:	b480      	push	{r7}
 8007454:	b083      	sub	sp, #12
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007462:	bf00      	nop
}
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800746e:	b480      	push	{r7}
 8007470:	b083      	sub	sp, #12
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800747e:	bf00      	nop
}
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f001 f846 	bl	800856a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	791b      	ldrb	r3, [r3, #4]
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fe93 	bl	8008210 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	795b      	ldrb	r3, [r3, #5]
 80074ee:	4619      	mov	r1, r3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fe8d 	bl	8008210 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af02      	add	r7, sp, #8
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007512:	78fb      	ldrb	r3, [r7, #3]
 8007514:	b29b      	uxth	r3, r3
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	4613      	mov	r3, r2
 800751a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800751e:	2100      	movs	r1, #0
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f864 	bl	80075ee <USBH_GetDescriptor>
 8007526:	4603      	mov	r3, r0
 8007528:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800752a:	7bfb      	ldrb	r3, [r7, #15]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10a      	bne.n	8007546 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800753c:	78fa      	ldrb	r2, [r7, #3]
 800753e:	b292      	uxth	r2, r2
 8007540:	4619      	mov	r1, r3
 8007542:	f000 f919 	bl	8007778 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007546:	7bfb      	ldrb	r3, [r7, #15]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af02      	add	r7, sp, #8
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	460b      	mov	r3, r1
 800755a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	331c      	adds	r3, #28
 8007560:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007562:	887b      	ldrh	r3, [r7, #2]
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800756c:	2100      	movs	r1, #0
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f83d 	bl	80075ee <USBH_GetDescriptor>
 8007574:	4603      	mov	r3, r0
 8007576:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007578:	7bfb      	ldrb	r3, [r7, #15]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d107      	bne.n	800758e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800757e:	887b      	ldrh	r3, [r7, #2]
 8007580:	461a      	mov	r2, r3
 8007582:	68b9      	ldr	r1, [r7, #8]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f989 	bl	800789c <USBH_ParseCfgDesc>
 800758a:	4603      	mov	r3, r0
 800758c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800758e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b088      	sub	sp, #32
 800759c:	af02      	add	r7, sp, #8
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	607a      	str	r2, [r7, #4]
 80075a2:	461a      	mov	r2, r3
 80075a4:	460b      	mov	r3, r1
 80075a6:	72fb      	strb	r3, [r7, #11]
 80075a8:	4613      	mov	r3, r2
 80075aa:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80075ac:	7afb      	ldrb	r3, [r7, #11]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80075b4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80075bc:	893b      	ldrh	r3, [r7, #8]
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	460b      	mov	r3, r1
 80075c2:	2100      	movs	r1, #0
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f000 f812 	bl	80075ee <USBH_GetDescriptor>
 80075ca:	4603      	mov	r3, r0
 80075cc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d107      	bne.n	80075e4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80075da:	893a      	ldrh	r2, [r7, #8]
 80075dc:	6879      	ldr	r1, [r7, #4]
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 fb26 	bl	8007c30 <USBH_ParseStringDesc>
  }

  return status;
 80075e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b084      	sub	sp, #16
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	60f8      	str	r0, [r7, #12]
 80075f6:	607b      	str	r3, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	72fb      	strb	r3, [r7, #11]
 80075fc:	4613      	mov	r3, r2
 80075fe:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	789b      	ldrb	r3, [r3, #2]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d11c      	bne.n	8007642 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007608:	7afb      	ldrb	r3, [r7, #11]
 800760a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800760e:	b2da      	uxtb	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2206      	movs	r2, #6
 8007618:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	893a      	ldrh	r2, [r7, #8]
 800761e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007620:	893b      	ldrh	r3, [r7, #8]
 8007622:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007626:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800762a:	d104      	bne.n	8007636 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f240 4209 	movw	r2, #1033	; 0x409
 8007632:	829a      	strh	r2, [r3, #20]
 8007634:	e002      	b.n	800763c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8b3a      	ldrh	r2, [r7, #24]
 8007640:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007642:	8b3b      	ldrh	r3, [r7, #24]
 8007644:	461a      	mov	r2, r3
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 fb3f 	bl	8007ccc <USBH_CtlReq>
 800764e:	4603      	mov	r3, r0
}
 8007650:	4618      	mov	r0, r3
 8007652:	3710      	adds	r7, #16
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	460b      	mov	r3, r1
 8007662:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	789b      	ldrb	r3, [r3, #2]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d10f      	bne.n	800768c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2205      	movs	r2, #5
 8007676:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007678:	78fb      	ldrb	r3, [r7, #3]
 800767a:	b29a      	uxth	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800768c:	2200      	movs	r2, #0
 800768e:	2100      	movs	r1, #0
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fb1b 	bl	8007ccc <USBH_CtlReq>
 8007696:	4603      	mov	r3, r0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	789b      	ldrb	r3, [r3, #2]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d10e      	bne.n	80076d2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2209      	movs	r2, #9
 80076be:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	887a      	ldrh	r2, [r7, #2]
 80076c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076d2:	2200      	movs	r2, #0
 80076d4:	2100      	movs	r1, #0
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 faf8 	bl	8007ccc <USBH_CtlReq>
 80076dc:	4603      	mov	r3, r0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	460b      	mov	r3, r1
 80076f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	789b      	ldrb	r3, [r3, #2]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d10f      	bne.n	800771a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2203      	movs	r2, #3
 8007704:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007706:	78fb      	ldrb	r3, [r7, #3]
 8007708:	b29a      	uxth	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800771a:	2200      	movs	r2, #0
 800771c:	2100      	movs	r1, #0
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fad4 	bl	8007ccc <USBH_CtlReq>
 8007724:	4603      	mov	r3, r0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b082      	sub	sp, #8
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	460b      	mov	r3, r1
 8007738:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	789b      	ldrb	r3, [r3, #2]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d10f      	bne.n	8007762 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2202      	movs	r2, #2
 8007746:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007754:	78fb      	ldrb	r3, [r7, #3]
 8007756:	b29a      	uxth	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007762:	2200      	movs	r2, #0
 8007764:	2100      	movs	r1, #0
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fab0 	bl	8007ccc <USBH_CtlReq>
 800776c:	4603      	mov	r3, r0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
	...

08007778 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	4613      	mov	r3, r2
 8007784:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	781a      	ldrb	r2, [r3, #0]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	785a      	ldrb	r2, [r3, #1]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	3302      	adds	r3, #2
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	b29a      	uxth	r2, r3
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	3303      	adds	r3, #3
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	021b      	lsls	r3, r3, #8
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	4313      	orrs	r3, r2
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	791a      	ldrb	r2, [r3, #4]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	795a      	ldrb	r2, [r3, #5]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	799a      	ldrb	r2, [r3, #6]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	79da      	ldrb	r2, [r3, #7]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	79db      	ldrb	r3, [r3, #7]
 80077d6:	2b20      	cmp	r3, #32
 80077d8:	dc0f      	bgt.n	80077fa <USBH_ParseDevDesc+0x82>
 80077da:	2b08      	cmp	r3, #8
 80077dc:	db14      	blt.n	8007808 <USBH_ParseDevDesc+0x90>
 80077de:	3b08      	subs	r3, #8
 80077e0:	4a2d      	ldr	r2, [pc, #180]	; (8007898 <USBH_ParseDevDesc+0x120>)
 80077e2:	fa22 f303 	lsr.w	r3, r2, r3
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	bf14      	ite	ne
 80077ee:	2301      	movne	r3, #1
 80077f0:	2300      	moveq	r3, #0
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d102      	bne.n	80077fe <USBH_ParseDevDesc+0x86>
 80077f8:	e006      	b.n	8007808 <USBH_ParseDevDesc+0x90>
 80077fa:	2b40      	cmp	r3, #64	; 0x40
 80077fc:	d104      	bne.n	8007808 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	79da      	ldrb	r2, [r3, #7]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	71da      	strb	r2, [r3, #7]
      break;
 8007806:	e003      	b.n	8007810 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2240      	movs	r2, #64	; 0x40
 800780c:	71da      	strb	r2, [r3, #7]
      break;
 800780e:	bf00      	nop
  }

  if (length > 8U)
 8007810:	88fb      	ldrh	r3, [r7, #6]
 8007812:	2b08      	cmp	r3, #8
 8007814:	d939      	bls.n	800788a <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	3308      	adds	r3, #8
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	b29a      	uxth	r2, r3
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	3309      	adds	r3, #9
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	b29b      	uxth	r3, r3
 8007826:	021b      	lsls	r3, r3, #8
 8007828:	b29b      	uxth	r3, r3
 800782a:	4313      	orrs	r3, r2
 800782c:	b29a      	uxth	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	330a      	adds	r3, #10
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	b29a      	uxth	r2, r3
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	330b      	adds	r3, #11
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	b29b      	uxth	r3, r3
 8007842:	021b      	lsls	r3, r3, #8
 8007844:	b29b      	uxth	r3, r3
 8007846:	4313      	orrs	r3, r2
 8007848:	b29a      	uxth	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	330c      	adds	r3, #12
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	b29a      	uxth	r2, r3
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	330d      	adds	r3, #13
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	b29b      	uxth	r3, r3
 800785e:	021b      	lsls	r3, r3, #8
 8007860:	b29b      	uxth	r3, r3
 8007862:	4313      	orrs	r3, r2
 8007864:	b29a      	uxth	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	7b9a      	ldrb	r2, [r3, #14]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	7bda      	ldrb	r2, [r3, #15]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	7c1a      	ldrb	r2, [r3, #16]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	7c5a      	ldrb	r2, [r3, #17]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	745a      	strb	r2, [r3, #17]
  }
}
 800788a:	bf00      	nop
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	01000101 	.word	0x01000101

0800789c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b08c      	sub	sp, #48	; 0x30
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	4613      	mov	r3, r2
 80078a8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80078b0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80078b2:	2300      	movs	r3, #0
 80078b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80078bc:	2300      	movs	r3, #0
 80078be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	781a      	ldrb	r2, [r3, #0]
 80078d0:	6a3b      	ldr	r3, [r7, #32]
 80078d2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	785a      	ldrb	r2, [r3, #1]
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	3302      	adds	r3, #2
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	3303      	adds	r3, #3
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	021b      	lsls	r3, r3, #8
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	4313      	orrs	r3, r2
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078f8:	bf28      	it	cs
 80078fa:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80078fe:	b29a      	uxth	r2, r3
 8007900:	6a3b      	ldr	r3, [r7, #32]
 8007902:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	791a      	ldrb	r2, [r3, #4]
 8007908:	6a3b      	ldr	r3, [r7, #32]
 800790a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	795a      	ldrb	r2, [r3, #5]
 8007910:	6a3b      	ldr	r3, [r7, #32]
 8007912:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	799a      	ldrb	r2, [r3, #6]
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	79da      	ldrb	r2, [r3, #7]
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	7a1a      	ldrb	r2, [r3, #8]
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2b09      	cmp	r3, #9
 8007932:	d002      	beq.n	800793a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	2209      	movs	r2, #9
 8007938:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800793a:	88fb      	ldrh	r3, [r7, #6]
 800793c:	2b09      	cmp	r3, #9
 800793e:	f240 809d 	bls.w	8007a7c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007942:	2309      	movs	r3, #9
 8007944:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007946:	2300      	movs	r3, #0
 8007948:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800794a:	e081      	b.n	8007a50 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800794c:	f107 0316 	add.w	r3, r7, #22
 8007950:	4619      	mov	r1, r3
 8007952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007954:	f000 f99f 	bl	8007c96 <USBH_GetNextDesc>
 8007958:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795c:	785b      	ldrb	r3, [r3, #1]
 800795e:	2b04      	cmp	r3, #4
 8007960:	d176      	bne.n	8007a50 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	2b09      	cmp	r3, #9
 8007968:	d002      	beq.n	8007970 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800796a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800796c:	2209      	movs	r2, #9
 800796e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007974:	221a      	movs	r2, #26
 8007976:	fb02 f303 	mul.w	r3, r2, r3
 800797a:	3308      	adds	r3, #8
 800797c:	6a3a      	ldr	r2, [r7, #32]
 800797e:	4413      	add	r3, r2
 8007980:	3302      	adds	r3, #2
 8007982:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007984:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007986:	69f8      	ldr	r0, [r7, #28]
 8007988:	f000 f87e 	bl	8007a88 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800798c:	2300      	movs	r3, #0
 800798e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007992:	2300      	movs	r3, #0
 8007994:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007996:	e043      	b.n	8007a20 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007998:	f107 0316 	add.w	r3, r7, #22
 800799c:	4619      	mov	r1, r3
 800799e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079a0:	f000 f979 	bl	8007c96 <USBH_GetNextDesc>
 80079a4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80079a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a8:	785b      	ldrb	r3, [r3, #1]
 80079aa:	2b05      	cmp	r3, #5
 80079ac:	d138      	bne.n	8007a20 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	795b      	ldrb	r3, [r3, #5]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d10f      	bne.n	80079d6 <USBH_ParseCfgDesc+0x13a>
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	799b      	ldrb	r3, [r3, #6]
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d10b      	bne.n	80079d6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	79db      	ldrb	r3, [r3, #7]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10f      	bne.n	80079e6 <USBH_ParseCfgDesc+0x14a>
 80079c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	2b09      	cmp	r3, #9
 80079cc:	d00b      	beq.n	80079e6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80079ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d0:	2209      	movs	r2, #9
 80079d2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079d4:	e007      	b.n	80079e6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2b07      	cmp	r3, #7
 80079dc:	d004      	beq.n	80079e8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80079de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e0:	2207      	movs	r2, #7
 80079e2:	701a      	strb	r2, [r3, #0]
 80079e4:	e000      	b.n	80079e8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079e6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80079e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80079f0:	3201      	adds	r2, #1
 80079f2:	00d2      	lsls	r2, r2, #3
 80079f4:	211a      	movs	r1, #26
 80079f6:	fb01 f303 	mul.w	r3, r1, r3
 80079fa:	4413      	add	r3, r2
 80079fc:	3308      	adds	r3, #8
 80079fe:	6a3a      	ldr	r2, [r7, #32]
 8007a00:	4413      	add	r3, r2
 8007a02:	3304      	adds	r3, #4
 8007a04:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a08:	69b9      	ldr	r1, [r7, #24]
 8007a0a:	68f8      	ldr	r0, [r7, #12]
 8007a0c:	f000 f86b 	bl	8007ae6 <USBH_ParseEPDesc>
 8007a10:	4603      	mov	r3, r0
 8007a12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007a16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	791b      	ldrb	r3, [r3, #4]
 8007a24:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d204      	bcs.n	8007a36 <USBH_ParseCfgDesc+0x19a>
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	885a      	ldrh	r2, [r3, #2]
 8007a30:	8afb      	ldrh	r3, [r7, #22]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d8b0      	bhi.n	8007998 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	791b      	ldrb	r3, [r3, #4]
 8007a3a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d201      	bcs.n	8007a46 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e01c      	b.n	8007a80 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007a46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d805      	bhi.n	8007a64 <USBH_ParseCfgDesc+0x1c8>
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	885a      	ldrh	r2, [r3, #2]
 8007a5c:	8afb      	ldrh	r3, [r7, #22]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	f63f af74 	bhi.w	800794c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007a64:	6a3b      	ldr	r3, [r7, #32]
 8007a66:	791b      	ldrb	r3, [r3, #4]
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	bf28      	it	cs
 8007a6c:	2302      	movcs	r3, #2
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d201      	bcs.n	8007a7c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e001      	b.n	8007a80 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007a7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3730      	adds	r7, #48	; 0x30
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	781a      	ldrb	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	785a      	ldrb	r2, [r3, #1]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	789a      	ldrb	r2, [r3, #2]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	78da      	ldrb	r2, [r3, #3]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	791a      	ldrb	r2, [r3, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	795a      	ldrb	r2, [r3, #5]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	799a      	ldrb	r2, [r3, #6]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	79da      	ldrb	r2, [r3, #7]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	7a1a      	ldrb	r2, [r3, #8]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	721a      	strb	r2, [r3, #8]
}
 8007ada:	bf00      	nop
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b087      	sub	sp, #28
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	60f8      	str	r0, [r7, #12]
 8007aee:	60b9      	str	r1, [r7, #8]
 8007af0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	781a      	ldrb	r2, [r3, #0]
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	785a      	ldrb	r2, [r3, #1]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	789a      	ldrb	r2, [r3, #2]
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	78da      	ldrb	r2, [r3, #3]
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	3305      	adds	r3, #5
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	021b      	lsls	r3, r3, #8
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	799a      	ldrb	r2, [r3, #6]
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	889b      	ldrh	r3, [r3, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d102      	bne.n	8007b48 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007b42:	2303      	movs	r3, #3
 8007b44:	75fb      	strb	r3, [r7, #23]
 8007b46:	e033      	b.n	8007bb0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	889b      	ldrh	r3, [r3, #4]
 8007b4c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007b50:	f023 0307 	bic.w	r3, r3, #7
 8007b54:	b29a      	uxth	r2, r3
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	889b      	ldrh	r3, [r3, #4]
 8007b5e:	b21a      	sxth	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	3304      	adds	r3, #4
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	b299      	uxth	r1, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	3305      	adds	r3, #5
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	021b      	lsls	r3, r3, #8
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	430b      	orrs	r3, r1
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d110      	bne.n	8007ba2 <USBH_ParseEPDesc+0xbc>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	3304      	adds	r3, #4
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	b299      	uxth	r1, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	3305      	adds	r3, #5
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	021b      	lsls	r3, r3, #8
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	430b      	orrs	r3, r1
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	b21b      	sxth	r3, r3
 8007b9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b9e:	b21b      	sxth	r3, r3
 8007ba0:	e001      	b.n	8007ba6 <USBH_ParseEPDesc+0xc0>
 8007ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	b21b      	sxth	r3, r3
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d116      	bne.n	8007be8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	78db      	ldrb	r3, [r3, #3]
 8007bbe:	f003 0303 	and.w	r3, r3, #3
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d005      	beq.n	8007bd2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	78db      	ldrb	r3, [r3, #3]
 8007bca:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d127      	bne.n	8007c22 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	799b      	ldrb	r3, [r3, #6]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <USBH_ParseEPDesc+0xfc>
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	799b      	ldrb	r3, [r3, #6]
 8007bde:	2b10      	cmp	r3, #16
 8007be0:	d91f      	bls.n	8007c22 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007be2:	2303      	movs	r3, #3
 8007be4:	75fb      	strb	r3, [r7, #23]
 8007be6:	e01c      	b.n	8007c22 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	78db      	ldrb	r3, [r3, #3]
 8007bec:	f003 0303 	and.w	r3, r3, #3
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d10a      	bne.n	8007c0a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	799b      	ldrb	r3, [r3, #6]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d003      	beq.n	8007c04 <USBH_ParseEPDesc+0x11e>
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	799b      	ldrb	r3, [r3, #6]
 8007c00:	2b10      	cmp	r3, #16
 8007c02:	d90e      	bls.n	8007c22 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007c04:	2303      	movs	r3, #3
 8007c06:	75fb      	strb	r3, [r7, #23]
 8007c08:	e00b      	b.n	8007c22 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	78db      	ldrb	r3, [r3, #3]
 8007c0e:	f003 0303 	and.w	r3, r3, #3
 8007c12:	2b03      	cmp	r3, #3
 8007c14:	d105      	bne.n	8007c22 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	799b      	ldrb	r3, [r3, #6]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	371c      	adds	r7, #28
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b087      	sub	sp, #28
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	3301      	adds	r3, #1
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	2b03      	cmp	r3, #3
 8007c46:	d120      	bne.n	8007c8a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	1e9a      	subs	r2, r3, #2
 8007c4e:	88fb      	ldrh	r3, [r7, #6]
 8007c50:	4293      	cmp	r3, r2
 8007c52:	bf28      	it	cs
 8007c54:	4613      	movcs	r3, r2
 8007c56:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	3302      	adds	r3, #2
 8007c5c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007c5e:	2300      	movs	r3, #0
 8007c60:	82fb      	strh	r3, [r7, #22]
 8007c62:	e00b      	b.n	8007c7c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007c64:	8afb      	ldrh	r3, [r7, #22]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	4413      	add	r3, r2
 8007c6a:	781a      	ldrb	r2, [r3, #0]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	3301      	adds	r3, #1
 8007c74:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007c76:	8afb      	ldrh	r3, [r7, #22]
 8007c78:	3302      	adds	r3, #2
 8007c7a:	82fb      	strh	r3, [r7, #22]
 8007c7c:	8afa      	ldrh	r2, [r7, #22]
 8007c7e:	8abb      	ldrh	r3, [r7, #20]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d3ef      	bcc.n	8007c64 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	2200      	movs	r2, #0
 8007c88:	701a      	strb	r2, [r3, #0]
  }
}
 8007c8a:	bf00      	nop
 8007c8c:	371c      	adds	r7, #28
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b085      	sub	sp, #20
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	881a      	ldrh	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	4413      	add	r3, r2
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4413      	add	r3, r2
 8007cbc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	789b      	ldrb	r3, [r3, #2]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d002      	beq.n	8007cec <USBH_CtlReq+0x20>
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d00f      	beq.n	8007d0a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007cea:	e027      	b.n	8007d3c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	68ba      	ldr	r2, [r7, #8]
 8007cf0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	88fa      	ldrh	r2, [r7, #6]
 8007cf6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2202      	movs	r2, #2
 8007d02:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007d04:	2301      	movs	r3, #1
 8007d06:	75fb      	strb	r3, [r7, #23]
      break;
 8007d08:	e018      	b.n	8007d3c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 f81c 	bl	8007d48 <USBH_HandleControl>
 8007d10:	4603      	mov	r3, r0
 8007d12:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d002      	beq.n	8007d20 <USBH_CtlReq+0x54>
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
 8007d1c:	2b03      	cmp	r3, #3
 8007d1e:	d106      	bne.n	8007d2e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2201      	movs	r2, #1
 8007d24:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	761a      	strb	r2, [r3, #24]
      break;
 8007d2c:	e005      	b.n	8007d3a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007d2e:	7dfb      	ldrb	r3, [r7, #23]
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d102      	bne.n	8007d3a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2201      	movs	r2, #1
 8007d38:	709a      	strb	r2, [r3, #2]
      break;
 8007d3a:	bf00      	nop
  }
  return status;
 8007d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
	...

08007d48 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af02      	add	r7, sp, #8
 8007d4e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d50:	2301      	movs	r3, #1
 8007d52:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d54:	2300      	movs	r3, #0
 8007d56:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	7e1b      	ldrb	r3, [r3, #24]
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	2b0a      	cmp	r3, #10
 8007d60:	f200 8156 	bhi.w	8008010 <USBH_HandleControl+0x2c8>
 8007d64:	a201      	add	r2, pc, #4	; (adr r2, 8007d6c <USBH_HandleControl+0x24>)
 8007d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6a:	bf00      	nop
 8007d6c:	08007d99 	.word	0x08007d99
 8007d70:	08007db3 	.word	0x08007db3
 8007d74:	08007e1d 	.word	0x08007e1d
 8007d78:	08007e43 	.word	0x08007e43
 8007d7c:	08007e7b 	.word	0x08007e7b
 8007d80:	08007ea5 	.word	0x08007ea5
 8007d84:	08007ef7 	.word	0x08007ef7
 8007d88:	08007f19 	.word	0x08007f19
 8007d8c:	08007f55 	.word	0x08007f55
 8007d90:	08007f7b 	.word	0x08007f7b
 8007d94:	08007fb9 	.word	0x08007fb9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f103 0110 	add.w	r1, r3, #16
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	795b      	ldrb	r3, [r3, #5]
 8007da2:	461a      	mov	r2, r3
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f943 	bl	8008030 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2202      	movs	r2, #2
 8007dae:	761a      	strb	r2, [r3, #24]
      break;
 8007db0:	e139      	b.n	8008026 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	795b      	ldrb	r3, [r3, #5]
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fcc5 	bl	8008748 <USBH_LL_GetURBState>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007dc2:	7bbb      	ldrb	r3, [r7, #14]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d11e      	bne.n	8007e06 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	7c1b      	ldrb	r3, [r3, #16]
 8007dcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007dd0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	8adb      	ldrh	r3, [r3, #22]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00a      	beq.n	8007df0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007dda:	7b7b      	ldrb	r3, [r7, #13]
 8007ddc:	2b80      	cmp	r3, #128	; 0x80
 8007dde:	d103      	bne.n	8007de8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2203      	movs	r2, #3
 8007de4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007de6:	e115      	b.n	8008014 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2205      	movs	r2, #5
 8007dec:	761a      	strb	r2, [r3, #24]
      break;
 8007dee:	e111      	b.n	8008014 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007df0:	7b7b      	ldrb	r3, [r7, #13]
 8007df2:	2b80      	cmp	r3, #128	; 0x80
 8007df4:	d103      	bne.n	8007dfe <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2209      	movs	r2, #9
 8007dfa:	761a      	strb	r2, [r3, #24]
      break;
 8007dfc:	e10a      	b.n	8008014 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2207      	movs	r2, #7
 8007e02:	761a      	strb	r2, [r3, #24]
      break;
 8007e04:	e106      	b.n	8008014 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007e06:	7bbb      	ldrb	r3, [r7, #14]
 8007e08:	2b04      	cmp	r3, #4
 8007e0a:	d003      	beq.n	8007e14 <USBH_HandleControl+0xcc>
 8007e0c:	7bbb      	ldrb	r3, [r7, #14]
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	f040 8100 	bne.w	8008014 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	220b      	movs	r2, #11
 8007e18:	761a      	strb	r2, [r3, #24]
      break;
 8007e1a:	e0fb      	b.n	8008014 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6899      	ldr	r1, [r3, #8]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	899a      	ldrh	r2, [r3, #12]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	791b      	ldrb	r3, [r3, #4]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f93a 	bl	80080ae <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2204      	movs	r2, #4
 8007e3e:	761a      	strb	r2, [r3, #24]
      break;
 8007e40:	e0f1      	b.n	8008026 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	791b      	ldrb	r3, [r3, #4]
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fc7d 	bl	8008748 <USBH_LL_GetURBState>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e52:	7bbb      	ldrb	r3, [r7, #14]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d102      	bne.n	8007e5e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2209      	movs	r2, #9
 8007e5c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007e5e:	7bbb      	ldrb	r3, [r7, #14]
 8007e60:	2b05      	cmp	r3, #5
 8007e62:	d102      	bne.n	8007e6a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007e64:	2303      	movs	r3, #3
 8007e66:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e68:	e0d6      	b.n	8008018 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	2b04      	cmp	r3, #4
 8007e6e:	f040 80d3 	bne.w	8008018 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	220b      	movs	r2, #11
 8007e76:	761a      	strb	r2, [r3, #24]
      break;
 8007e78:	e0ce      	b.n	8008018 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6899      	ldr	r1, [r3, #8]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	899a      	ldrh	r2, [r3, #12]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	795b      	ldrb	r3, [r3, #5]
 8007e86:	2001      	movs	r0, #1
 8007e88:	9000      	str	r0, [sp, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f8ea 	bl	8008064 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e96:	b29a      	uxth	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2206      	movs	r2, #6
 8007ea0:	761a      	strb	r2, [r3, #24]
      break;
 8007ea2:	e0c0      	b.n	8008026 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	795b      	ldrb	r3, [r3, #5]
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fc4c 	bl	8008748 <USBH_LL_GetURBState>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007eb4:	7bbb      	ldrb	r3, [r7, #14]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d103      	bne.n	8007ec2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2207      	movs	r2, #7
 8007ebe:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ec0:	e0ac      	b.n	800801c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	2b05      	cmp	r3, #5
 8007ec6:	d105      	bne.n	8007ed4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	220c      	movs	r2, #12
 8007ecc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ed2:	e0a3      	b.n	800801c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ed4:	7bbb      	ldrb	r3, [r7, #14]
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d103      	bne.n	8007ee2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2205      	movs	r2, #5
 8007ede:	761a      	strb	r2, [r3, #24]
      break;
 8007ee0:	e09c      	b.n	800801c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007ee2:	7bbb      	ldrb	r3, [r7, #14]
 8007ee4:	2b04      	cmp	r3, #4
 8007ee6:	f040 8099 	bne.w	800801c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	220b      	movs	r2, #11
 8007eee:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ef4:	e092      	b.n	800801c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	791b      	ldrb	r3, [r3, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	2100      	movs	r1, #0
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 f8d5 	bl	80080ae <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2208      	movs	r2, #8
 8007f14:	761a      	strb	r2, [r3, #24]

      break;
 8007f16:	e086      	b.n	8008026 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	791b      	ldrb	r3, [r3, #4]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fc12 	bl	8008748 <USBH_LL_GetURBState>
 8007f24:	4603      	mov	r3, r0
 8007f26:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f28:	7bbb      	ldrb	r3, [r7, #14]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d105      	bne.n	8007f3a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	220d      	movs	r2, #13
 8007f32:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f38:	e072      	b.n	8008020 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007f3a:	7bbb      	ldrb	r3, [r7, #14]
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	d103      	bne.n	8007f48 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	220b      	movs	r2, #11
 8007f44:	761a      	strb	r2, [r3, #24]
      break;
 8007f46:	e06b      	b.n	8008020 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007f48:	7bbb      	ldrb	r3, [r7, #14]
 8007f4a:	2b05      	cmp	r3, #5
 8007f4c:	d168      	bne.n	8008020 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	73fb      	strb	r3, [r7, #15]
      break;
 8007f52:	e065      	b.n	8008020 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	795b      	ldrb	r3, [r3, #5]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	9200      	str	r2, [sp, #0]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2100      	movs	r1, #0
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f87f 	bl	8008064 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	220a      	movs	r2, #10
 8007f76:	761a      	strb	r2, [r3, #24]
      break;
 8007f78:	e055      	b.n	8008026 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	795b      	ldrb	r3, [r3, #5]
 8007f7e:	4619      	mov	r1, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fbe1 	bl	8008748 <USBH_LL_GetURBState>
 8007f86:	4603      	mov	r3, r0
 8007f88:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007f8a:	7bbb      	ldrb	r3, [r7, #14]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d105      	bne.n	8007f9c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	220d      	movs	r2, #13
 8007f98:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f9a:	e043      	b.n	8008024 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f9c:	7bbb      	ldrb	r3, [r7, #14]
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d103      	bne.n	8007faa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2209      	movs	r2, #9
 8007fa6:	761a      	strb	r2, [r3, #24]
      break;
 8007fa8:	e03c      	b.n	8008024 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007faa:	7bbb      	ldrb	r3, [r7, #14]
 8007fac:	2b04      	cmp	r3, #4
 8007fae:	d139      	bne.n	8008024 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	220b      	movs	r2, #11
 8007fb4:	761a      	strb	r2, [r3, #24]
      break;
 8007fb6:	e035      	b.n	8008024 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	7e5b      	ldrb	r3, [r3, #25]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	765a      	strb	r2, [r3, #25]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	7e5b      	ldrb	r3, [r3, #25]
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d806      	bhi.n	8007fda <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007fd8:	e025      	b.n	8008026 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007fe0:	2106      	movs	r1, #6
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	795b      	ldrb	r3, [r3, #5]
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f90c 	bl	8008210 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	791b      	ldrb	r3, [r3, #4]
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f906 	bl	8008210 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800800a:	2302      	movs	r3, #2
 800800c:	73fb      	strb	r3, [r7, #15]
      break;
 800800e:	e00a      	b.n	8008026 <USBH_HandleControl+0x2de>

    default:
      break;
 8008010:	bf00      	nop
 8008012:	e008      	b.n	8008026 <USBH_HandleControl+0x2de>
      break;
 8008014:	bf00      	nop
 8008016:	e006      	b.n	8008026 <USBH_HandleControl+0x2de>
      break;
 8008018:	bf00      	nop
 800801a:	e004      	b.n	8008026 <USBH_HandleControl+0x2de>
      break;
 800801c:	bf00      	nop
 800801e:	e002      	b.n	8008026 <USBH_HandleControl+0x2de>
      break;
 8008020:	bf00      	nop
 8008022:	e000      	b.n	8008026 <USBH_HandleControl+0x2de>
      break;
 8008024:	bf00      	nop
  }

  return status;
 8008026:	7bfb      	ldrb	r3, [r7, #15]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b088      	sub	sp, #32
 8008034:	af04      	add	r7, sp, #16
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	4613      	mov	r3, r2
 800803c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800803e:	79f9      	ldrb	r1, [r7, #7]
 8008040:	2300      	movs	r3, #0
 8008042:	9303      	str	r3, [sp, #12]
 8008044:	2308      	movs	r3, #8
 8008046:	9302      	str	r3, [sp, #8]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	9301      	str	r3, [sp, #4]
 800804c:	2300      	movs	r3, #0
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	2300      	movs	r3, #0
 8008052:	2200      	movs	r2, #0
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f000 fb46 	bl	80086e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b088      	sub	sp, #32
 8008068:	af04      	add	r7, sp, #16
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	4611      	mov	r1, r2
 8008070:	461a      	mov	r2, r3
 8008072:	460b      	mov	r3, r1
 8008074:	80fb      	strh	r3, [r7, #6]
 8008076:	4613      	mov	r3, r2
 8008078:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008088:	7979      	ldrb	r1, [r7, #5]
 800808a:	7e3b      	ldrb	r3, [r7, #24]
 800808c:	9303      	str	r3, [sp, #12]
 800808e:	88fb      	ldrh	r3, [r7, #6]
 8008090:	9302      	str	r3, [sp, #8]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	9301      	str	r3, [sp, #4]
 8008096:	2301      	movs	r3, #1
 8008098:	9300      	str	r3, [sp, #0]
 800809a:	2300      	movs	r3, #0
 800809c:	2200      	movs	r2, #0
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 fb21 	bl	80086e6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b088      	sub	sp, #32
 80080b2:	af04      	add	r7, sp, #16
 80080b4:	60f8      	str	r0, [r7, #12]
 80080b6:	60b9      	str	r1, [r7, #8]
 80080b8:	4611      	mov	r1, r2
 80080ba:	461a      	mov	r2, r3
 80080bc:	460b      	mov	r3, r1
 80080be:	80fb      	strh	r3, [r7, #6]
 80080c0:	4613      	mov	r3, r2
 80080c2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080c4:	7979      	ldrb	r1, [r7, #5]
 80080c6:	2300      	movs	r3, #0
 80080c8:	9303      	str	r3, [sp, #12]
 80080ca:	88fb      	ldrh	r3, [r7, #6]
 80080cc:	9302      	str	r3, [sp, #8]
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	9301      	str	r3, [sp, #4]
 80080d2:	2301      	movs	r3, #1
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	2300      	movs	r3, #0
 80080d8:	2201      	movs	r2, #1
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f000 fb03 	bl	80086e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80080e0:	2300      	movs	r3, #0

}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b088      	sub	sp, #32
 80080ee:	af04      	add	r7, sp, #16
 80080f0:	60f8      	str	r0, [r7, #12]
 80080f2:	60b9      	str	r1, [r7, #8]
 80080f4:	4611      	mov	r1, r2
 80080f6:	461a      	mov	r2, r3
 80080f8:	460b      	mov	r3, r1
 80080fa:	80fb      	strh	r3, [r7, #6]
 80080fc:	4613      	mov	r3, r2
 80080fe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800810a:	2300      	movs	r3, #0
 800810c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800810e:	7979      	ldrb	r1, [r7, #5]
 8008110:	7e3b      	ldrb	r3, [r7, #24]
 8008112:	9303      	str	r3, [sp, #12]
 8008114:	88fb      	ldrh	r3, [r7, #6]
 8008116:	9302      	str	r3, [sp, #8]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	9301      	str	r3, [sp, #4]
 800811c:	2301      	movs	r3, #1
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	2302      	movs	r3, #2
 8008122:	2200      	movs	r2, #0
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 fade 	bl	80086e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b088      	sub	sp, #32
 8008138:	af04      	add	r7, sp, #16
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	4611      	mov	r1, r2
 8008140:	461a      	mov	r2, r3
 8008142:	460b      	mov	r3, r1
 8008144:	80fb      	strh	r3, [r7, #6]
 8008146:	4613      	mov	r3, r2
 8008148:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800814a:	7979      	ldrb	r1, [r7, #5]
 800814c:	2300      	movs	r3, #0
 800814e:	9303      	str	r3, [sp, #12]
 8008150:	88fb      	ldrh	r3, [r7, #6]
 8008152:	9302      	str	r3, [sp, #8]
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	9301      	str	r3, [sp, #4]
 8008158:	2301      	movs	r3, #1
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	2302      	movs	r3, #2
 800815e:	2201      	movs	r2, #1
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f000 fac0 	bl	80086e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af04      	add	r7, sp, #16
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	4608      	mov	r0, r1
 800817a:	4611      	mov	r1, r2
 800817c:	461a      	mov	r2, r3
 800817e:	4603      	mov	r3, r0
 8008180:	70fb      	strb	r3, [r7, #3]
 8008182:	460b      	mov	r3, r1
 8008184:	70bb      	strb	r3, [r7, #2]
 8008186:	4613      	mov	r3, r2
 8008188:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800818a:	7878      	ldrb	r0, [r7, #1]
 800818c:	78ba      	ldrb	r2, [r7, #2]
 800818e:	78f9      	ldrb	r1, [r7, #3]
 8008190:	8b3b      	ldrh	r3, [r7, #24]
 8008192:	9302      	str	r3, [sp, #8]
 8008194:	7d3b      	ldrb	r3, [r7, #20]
 8008196:	9301      	str	r3, [sp, #4]
 8008198:	7c3b      	ldrb	r3, [r7, #16]
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	4603      	mov	r3, r0
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fa53 	bl	800864a <USBH_LL_OpenPipe>

  return USBH_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b082      	sub	sp, #8
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
 80081b6:	460b      	mov	r3, r1
 80081b8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80081ba:	78fb      	ldrb	r3, [r7, #3]
 80081bc:	4619      	mov	r1, r3
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fa72 	bl	80086a8 <USBH_LL_ClosePipe>

  return USBH_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b084      	sub	sp, #16
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	460b      	mov	r3, r1
 80081d8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f836 	bl	800824c <USBH_GetFreePipe>
 80081e0:	4603      	mov	r3, r0
 80081e2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80081e4:	89fb      	ldrh	r3, [r7, #14]
 80081e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d00a      	beq.n	8008204 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80081ee:	78fa      	ldrb	r2, [r7, #3]
 80081f0:	89fb      	ldrh	r3, [r7, #14]
 80081f2:	f003 030f 	and.w	r3, r3, #15
 80081f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081fa:	6879      	ldr	r1, [r7, #4]
 80081fc:	33e0      	adds	r3, #224	; 0xe0
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	440b      	add	r3, r1
 8008202:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008204:	89fb      	ldrh	r3, [r7, #14]
 8008206:	b2db      	uxtb	r3, r3
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800821c:	78fb      	ldrb	r3, [r7, #3]
 800821e:	2b0f      	cmp	r3, #15
 8008220:	d80d      	bhi.n	800823e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008222:	78fb      	ldrb	r3, [r7, #3]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	33e0      	adds	r3, #224	; 0xe0
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	78fb      	ldrb	r3, [r7, #3]
 8008230:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	33e0      	adds	r3, #224	; 0xe0
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	440b      	add	r3, r1
 800823c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008254:	2300      	movs	r3, #0
 8008256:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008258:	2300      	movs	r3, #0
 800825a:	73fb      	strb	r3, [r7, #15]
 800825c:	e00f      	b.n	800827e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800825e:	7bfb      	ldrb	r3, [r7, #15]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	33e0      	adds	r3, #224	; 0xe0
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d102      	bne.n	8008278 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008272:	7bfb      	ldrb	r3, [r7, #15]
 8008274:	b29b      	uxth	r3, r3
 8008276:	e007      	b.n	8008288 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008278:	7bfb      	ldrb	r3, [r7, #15]
 800827a:	3301      	adds	r3, #1
 800827c:	73fb      	strb	r3, [r7, #15]
 800827e:	7bfb      	ldrb	r3, [r7, #15]
 8008280:	2b0f      	cmp	r3, #15
 8008282:	d9ec      	bls.n	800825e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008284:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008288:	4618      	mov	r0, r3
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008298:	2201      	movs	r2, #1
 800829a:	490e      	ldr	r1, [pc, #56]	; (80082d4 <MX_USB_HOST_Init+0x40>)
 800829c:	480e      	ldr	r0, [pc, #56]	; (80082d8 <MX_USB_HOST_Init+0x44>)
 800829e:	f7fe fba5 	bl	80069ec <USBH_Init>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d001      	beq.n	80082ac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80082a8:	f7f8 fcaa 	bl	8000c00 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80082ac:	490b      	ldr	r1, [pc, #44]	; (80082dc <MX_USB_HOST_Init+0x48>)
 80082ae:	480a      	ldr	r0, [pc, #40]	; (80082d8 <MX_USB_HOST_Init+0x44>)
 80082b0:	f7fe fc2a 	bl	8006b08 <USBH_RegisterClass>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d001      	beq.n	80082be <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80082ba:	f7f8 fca1 	bl	8000c00 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80082be:	4806      	ldr	r0, [pc, #24]	; (80082d8 <MX_USB_HOST_Init+0x44>)
 80082c0:	f7fe fcae 	bl	8006c20 <USBH_Start>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d001      	beq.n	80082ce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80082ca:	f7f8 fc99 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80082ce:	bf00      	nop
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	080082f5 	.word	0x080082f5
 80082d8:	200001f4 	.word	0x200001f4
 80082dc:	20000018 	.word	0x20000018

080082e0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80082e4:	4802      	ldr	r0, [pc, #8]	; (80082f0 <MX_USB_HOST_Process+0x10>)
 80082e6:	f7fe fcab 	bl	8006c40 <USBH_Process>
}
 80082ea:	bf00      	nop
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	200001f4 	.word	0x200001f4

080082f4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	460b      	mov	r3, r1
 80082fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	3b01      	subs	r3, #1
 8008304:	2b04      	cmp	r3, #4
 8008306:	d819      	bhi.n	800833c <USBH_UserProcess+0x48>
 8008308:	a201      	add	r2, pc, #4	; (adr r2, 8008310 <USBH_UserProcess+0x1c>)
 800830a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830e:	bf00      	nop
 8008310:	0800833d 	.word	0x0800833d
 8008314:	0800832d 	.word	0x0800832d
 8008318:	0800833d 	.word	0x0800833d
 800831c:	08008335 	.word	0x08008335
 8008320:	08008325 	.word	0x08008325
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008324:	4b09      	ldr	r3, [pc, #36]	; (800834c <USBH_UserProcess+0x58>)
 8008326:	2203      	movs	r2, #3
 8008328:	701a      	strb	r2, [r3, #0]
  break;
 800832a:	e008      	b.n	800833e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800832c:	4b07      	ldr	r3, [pc, #28]	; (800834c <USBH_UserProcess+0x58>)
 800832e:	2202      	movs	r2, #2
 8008330:	701a      	strb	r2, [r3, #0]
  break;
 8008332:	e004      	b.n	800833e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008334:	4b05      	ldr	r3, [pc, #20]	; (800834c <USBH_UserProcess+0x58>)
 8008336:	2201      	movs	r2, #1
 8008338:	701a      	strb	r2, [r3, #0]
  break;
 800833a:	e000      	b.n	800833e <USBH_UserProcess+0x4a>

  default:
  break;
 800833c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800833e:	bf00      	nop
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	200005cc 	.word	0x200005cc

08008350 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08a      	sub	sp, #40	; 0x28
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008358:	f107 0314 	add.w	r3, r7, #20
 800835c:	2200      	movs	r2, #0
 800835e:	601a      	str	r2, [r3, #0]
 8008360:	605a      	str	r2, [r3, #4]
 8008362:	609a      	str	r2, [r3, #8]
 8008364:	60da      	str	r2, [r3, #12]
 8008366:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008370:	d147      	bne.n	8008402 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008372:	2300      	movs	r3, #0
 8008374:	613b      	str	r3, [r7, #16]
 8008376:	4b25      	ldr	r3, [pc, #148]	; (800840c <HAL_HCD_MspInit+0xbc>)
 8008378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837a:	4a24      	ldr	r2, [pc, #144]	; (800840c <HAL_HCD_MspInit+0xbc>)
 800837c:	f043 0301 	orr.w	r3, r3, #1
 8008380:	6313      	str	r3, [r2, #48]	; 0x30
 8008382:	4b22      	ldr	r3, [pc, #136]	; (800840c <HAL_HCD_MspInit+0xbc>)
 8008384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	613b      	str	r3, [r7, #16]
 800838c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800838e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008394:	2300      	movs	r3, #0
 8008396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008398:	2300      	movs	r3, #0
 800839a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800839c:	f107 0314 	add.w	r3, r7, #20
 80083a0:	4619      	mov	r1, r3
 80083a2:	481b      	ldr	r0, [pc, #108]	; (8008410 <HAL_HCD_MspInit+0xc0>)
 80083a4:	f7f8 ff66 	bl	8001274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80083a8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80083ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083ae:	2302      	movs	r3, #2
 80083b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083b2:	2300      	movs	r3, #0
 80083b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083b6:	2303      	movs	r3, #3
 80083b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80083ba:	230a      	movs	r3, #10
 80083bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083be:	f107 0314 	add.w	r3, r7, #20
 80083c2:	4619      	mov	r1, r3
 80083c4:	4812      	ldr	r0, [pc, #72]	; (8008410 <HAL_HCD_MspInit+0xc0>)
 80083c6:	f7f8 ff55 	bl	8001274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80083ca:	4b10      	ldr	r3, [pc, #64]	; (800840c <HAL_HCD_MspInit+0xbc>)
 80083cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ce:	4a0f      	ldr	r2, [pc, #60]	; (800840c <HAL_HCD_MspInit+0xbc>)
 80083d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083d4:	6353      	str	r3, [r2, #52]	; 0x34
 80083d6:	2300      	movs	r3, #0
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	4b0c      	ldr	r3, [pc, #48]	; (800840c <HAL_HCD_MspInit+0xbc>)
 80083dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083de:	4a0b      	ldr	r2, [pc, #44]	; (800840c <HAL_HCD_MspInit+0xbc>)
 80083e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083e4:	6453      	str	r3, [r2, #68]	; 0x44
 80083e6:	4b09      	ldr	r3, [pc, #36]	; (800840c <HAL_HCD_MspInit+0xbc>)
 80083e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083ee:	60fb      	str	r3, [r7, #12]
 80083f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083f2:	2200      	movs	r2, #0
 80083f4:	2100      	movs	r1, #0
 80083f6:	2043      	movs	r0, #67	; 0x43
 80083f8:	f7f8 feec 	bl	80011d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083fc:	2043      	movs	r0, #67	; 0x43
 80083fe:	f7f8 ff15 	bl	800122c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008402:	bf00      	nop
 8008404:	3728      	adds	r7, #40	; 0x28
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	40023800 	.word	0x40023800
 8008410:	40020000 	.word	0x40020000

08008414 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe ffeb 	bl	80073fe <USBH_LL_IncTimer>
}
 8008428:	bf00      	nop
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800843e:	4618      	mov	r0, r3
 8008440:	f7ff f823 	bl	800748a <USBH_LL_Connect>
}
 8008444:	bf00      	nop
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800845a:	4618      	mov	r0, r3
 800845c:	f7ff f82c 	bl	80074b8 <USBH_LL_Disconnect>
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	460b      	mov	r3, r1
 8008472:	70fb      	strb	r3, [r7, #3]
 8008474:	4613      	mov	r3, r2
 8008476:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008492:	4618      	mov	r0, r3
 8008494:	f7fe ffdd 	bl	8007452 <USBH_LL_PortEnabled>
}
 8008498:	bf00      	nop
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe ffdd 	bl	800746e <USBH_LL_PortDisabled>
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d12a      	bne.n	8008524 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80084ce:	4a18      	ldr	r2, [pc, #96]	; (8008530 <USBH_LL_Init+0x74>)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a15      	ldr	r2, [pc, #84]	; (8008530 <USBH_LL_Init+0x74>)
 80084da:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80084de:	4b14      	ldr	r3, [pc, #80]	; (8008530 <USBH_LL_Init+0x74>)
 80084e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80084e4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80084e6:	4b12      	ldr	r3, [pc, #72]	; (8008530 <USBH_LL_Init+0x74>)
 80084e8:	2208      	movs	r2, #8
 80084ea:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80084ec:	4b10      	ldr	r3, [pc, #64]	; (8008530 <USBH_LL_Init+0x74>)
 80084ee:	2201      	movs	r2, #1
 80084f0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80084f2:	4b0f      	ldr	r3, [pc, #60]	; (8008530 <USBH_LL_Init+0x74>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80084f8:	4b0d      	ldr	r3, [pc, #52]	; (8008530 <USBH_LL_Init+0x74>)
 80084fa:	2202      	movs	r2, #2
 80084fc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80084fe:	4b0c      	ldr	r3, [pc, #48]	; (8008530 <USBH_LL_Init+0x74>)
 8008500:	2200      	movs	r2, #0
 8008502:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008504:	480a      	ldr	r0, [pc, #40]	; (8008530 <USBH_LL_Init+0x74>)
 8008506:	f7f9 f9c1 	bl	800188c <HAL_HCD_Init>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008510:	f7f8 fb76 	bl	8000c00 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008514:	4806      	ldr	r0, [pc, #24]	; (8008530 <USBH_LL_Init+0x74>)
 8008516:	f7f9 fdb0 	bl	800207a <HAL_HCD_GetCurrentFrame>
 800851a:	4603      	mov	r3, r0
 800851c:	4619      	mov	r1, r3
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7fe ff5e 	bl	80073e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	200005d0 	.word	0x200005d0

08008534 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800854a:	4618      	mov	r0, r3
 800854c:	f7f9 fd1f 	bl	8001f8e <HAL_HCD_Start>
 8008550:	4603      	mov	r3, r0
 8008552:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008554:	7bfb      	ldrb	r3, [r7, #15]
 8008556:	4618      	mov	r0, r3
 8008558:	f000 f95c 	bl	8008814 <USBH_Get_USB_Status>
 800855c:	4603      	mov	r3, r0
 800855e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008560:	7bbb      	ldrb	r3, [r7, #14]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008580:	4618      	mov	r0, r3
 8008582:	f7f9 fd27 	bl	8001fd4 <HAL_HCD_Stop>
 8008586:	4603      	mov	r3, r0
 8008588:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800858a:	7bfb      	ldrb	r3, [r7, #15]
 800858c:	4618      	mov	r0, r3
 800858e:	f000 f941 	bl	8008814 <USBH_Get_USB_Status>
 8008592:	4603      	mov	r3, r0
 8008594:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008596:	7bbb      	ldrb	r3, [r7, #14]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80085a8:	2301      	movs	r3, #1
 80085aa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085b2:	4618      	mov	r0, r3
 80085b4:	f7f9 fd6f 	bl	8002096 <HAL_HCD_GetCurrentSpeed>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d00c      	beq.n	80085d8 <USBH_LL_GetSpeed+0x38>
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d80d      	bhi.n	80085de <USBH_LL_GetSpeed+0x3e>
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d002      	beq.n	80085cc <USBH_LL_GetSpeed+0x2c>
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d003      	beq.n	80085d2 <USBH_LL_GetSpeed+0x32>
 80085ca:	e008      	b.n	80085de <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80085cc:	2300      	movs	r3, #0
 80085ce:	73fb      	strb	r3, [r7, #15]
    break;
 80085d0:	e008      	b.n	80085e4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80085d2:	2301      	movs	r3, #1
 80085d4:	73fb      	strb	r3, [r7, #15]
    break;
 80085d6:	e005      	b.n	80085e4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80085d8:	2302      	movs	r3, #2
 80085da:	73fb      	strb	r3, [r7, #15]
    break;
 80085dc:	e002      	b.n	80085e4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80085de:	2301      	movs	r3, #1
 80085e0:	73fb      	strb	r3, [r7, #15]
    break;
 80085e2:	bf00      	nop
  }
  return  speed;
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b084      	sub	sp, #16
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008604:	4618      	mov	r0, r3
 8008606:	f7f9 fd02 	bl	800200e <HAL_HCD_ResetPort>
 800860a:	4603      	mov	r3, r0
 800860c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	4618      	mov	r0, r3
 8008612:	f000 f8ff 	bl	8008814 <USBH_Get_USB_Status>
 8008616:	4603      	mov	r3, r0
 8008618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800861a:	7bbb      	ldrb	r3, [r7, #14]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	460b      	mov	r3, r1
 800862e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008636:	78fa      	ldrb	r2, [r7, #3]
 8008638:	4611      	mov	r1, r2
 800863a:	4618      	mov	r0, r3
 800863c:	f7f9 fd09 	bl	8002052 <HAL_HCD_HC_GetXferCount>
 8008640:	4603      	mov	r3, r0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800864a:	b590      	push	{r4, r7, lr}
 800864c:	b089      	sub	sp, #36	; 0x24
 800864e:	af04      	add	r7, sp, #16
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	4608      	mov	r0, r1
 8008654:	4611      	mov	r1, r2
 8008656:	461a      	mov	r2, r3
 8008658:	4603      	mov	r3, r0
 800865a:	70fb      	strb	r3, [r7, #3]
 800865c:	460b      	mov	r3, r1
 800865e:	70bb      	strb	r3, [r7, #2]
 8008660:	4613      	mov	r3, r2
 8008662:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008664:	2300      	movs	r3, #0
 8008666:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008672:	787c      	ldrb	r4, [r7, #1]
 8008674:	78ba      	ldrb	r2, [r7, #2]
 8008676:	78f9      	ldrb	r1, [r7, #3]
 8008678:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800867a:	9302      	str	r3, [sp, #8]
 800867c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008680:	9301      	str	r3, [sp, #4]
 8008682:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008686:	9300      	str	r3, [sp, #0]
 8008688:	4623      	mov	r3, r4
 800868a:	f7f9 f96d 	bl	8001968 <HAL_HCD_HC_Init>
 800868e:	4603      	mov	r3, r0
 8008690:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008692:	7bfb      	ldrb	r3, [r7, #15]
 8008694:	4618      	mov	r0, r3
 8008696:	f000 f8bd 	bl	8008814 <USBH_Get_USB_Status>
 800869a:	4603      	mov	r3, r0
 800869c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800869e:	7bbb      	ldrb	r3, [r7, #14]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd90      	pop	{r4, r7, pc}

080086a8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	460b      	mov	r3, r1
 80086b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086c2:	78fa      	ldrb	r2, [r7, #3]
 80086c4:	4611      	mov	r1, r2
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7f9 f9dd 	bl	8001a86 <HAL_HCD_HC_Halt>
 80086cc:	4603      	mov	r3, r0
 80086ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 f89e 	bl	8008814 <USBH_Get_USB_Status>
 80086d8:	4603      	mov	r3, r0
 80086da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80086e6:	b590      	push	{r4, r7, lr}
 80086e8:	b089      	sub	sp, #36	; 0x24
 80086ea:	af04      	add	r7, sp, #16
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	4608      	mov	r0, r1
 80086f0:	4611      	mov	r1, r2
 80086f2:	461a      	mov	r2, r3
 80086f4:	4603      	mov	r3, r0
 80086f6:	70fb      	strb	r3, [r7, #3]
 80086f8:	460b      	mov	r3, r1
 80086fa:	70bb      	strb	r3, [r7, #2]
 80086fc:	4613      	mov	r3, r2
 80086fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008704:	2300      	movs	r3, #0
 8008706:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800870e:	787c      	ldrb	r4, [r7, #1]
 8008710:	78ba      	ldrb	r2, [r7, #2]
 8008712:	78f9      	ldrb	r1, [r7, #3]
 8008714:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008718:	9303      	str	r3, [sp, #12]
 800871a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800871c:	9302      	str	r3, [sp, #8]
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	4623      	mov	r3, r4
 800872a:	f7f9 f9cf 	bl	8001acc <HAL_HCD_HC_SubmitRequest>
 800872e:	4603      	mov	r3, r0
 8008730:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	4618      	mov	r0, r3
 8008736:	f000 f86d 	bl	8008814 <USBH_Get_USB_Status>
 800873a:	4603      	mov	r3, r0
 800873c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800873e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3714      	adds	r7, #20
 8008744:	46bd      	mov	sp, r7
 8008746:	bd90      	pop	{r4, r7, pc}

08008748 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	460b      	mov	r3, r1
 8008752:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800875a:	78fa      	ldrb	r2, [r7, #3]
 800875c:	4611      	mov	r1, r2
 800875e:	4618      	mov	r0, r3
 8008760:	f7f9 fc63 	bl	800202a <HAL_HCD_HC_GetURBState>
 8008764:	4603      	mov	r3, r0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b082      	sub	sp, #8
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	460b      	mov	r3, r1
 8008778:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008780:	2b01      	cmp	r3, #1
 8008782:	d103      	bne.n	800878c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008784:	78fb      	ldrb	r3, [r7, #3]
 8008786:	4618      	mov	r0, r3
 8008788:	f000 f870 	bl	800886c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800878c:	20c8      	movs	r0, #200	; 0xc8
 800878e:	f7f8 fc0d 	bl	8000fac <HAL_Delay>
  return USBH_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	460b      	mov	r3, r1
 80087a6:	70fb      	strb	r3, [r7, #3]
 80087a8:	4613      	mov	r3, r2
 80087aa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087b2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80087b4:	78fb      	ldrb	r3, [r7, #3]
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	212c      	movs	r1, #44	; 0x2c
 80087ba:	fb01 f303 	mul.w	r3, r1, r3
 80087be:	4413      	add	r3, r2
 80087c0:	333b      	adds	r3, #59	; 0x3b
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d009      	beq.n	80087dc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80087c8:	78fb      	ldrb	r3, [r7, #3]
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	212c      	movs	r1, #44	; 0x2c
 80087ce:	fb01 f303 	mul.w	r3, r1, r3
 80087d2:	4413      	add	r3, r2
 80087d4:	3354      	adds	r3, #84	; 0x54
 80087d6:	78ba      	ldrb	r2, [r7, #2]
 80087d8:	701a      	strb	r2, [r3, #0]
 80087da:	e008      	b.n	80087ee <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80087dc:	78fb      	ldrb	r3, [r7, #3]
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	212c      	movs	r1, #44	; 0x2c
 80087e2:	fb01 f303 	mul.w	r3, r1, r3
 80087e6:	4413      	add	r3, r2
 80087e8:	3355      	adds	r3, #85	; 0x55
 80087ea:	78ba      	ldrb	r2, [r7, #2]
 80087ec:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f7f8 fbd1 	bl	8000fac <HAL_Delay>
}
 800880a:	bf00      	nop
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
	...

08008814 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	4603      	mov	r3, r0
 800881c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008822:	79fb      	ldrb	r3, [r7, #7]
 8008824:	2b03      	cmp	r3, #3
 8008826:	d817      	bhi.n	8008858 <USBH_Get_USB_Status+0x44>
 8008828:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <USBH_Get_USB_Status+0x1c>)
 800882a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882e:	bf00      	nop
 8008830:	08008841 	.word	0x08008841
 8008834:	08008847 	.word	0x08008847
 8008838:	0800884d 	.word	0x0800884d
 800883c:	08008853 	.word	0x08008853
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008840:	2300      	movs	r3, #0
 8008842:	73fb      	strb	r3, [r7, #15]
    break;
 8008844:	e00b      	b.n	800885e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008846:	2302      	movs	r3, #2
 8008848:	73fb      	strb	r3, [r7, #15]
    break;
 800884a:	e008      	b.n	800885e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800884c:	2301      	movs	r3, #1
 800884e:	73fb      	strb	r3, [r7, #15]
    break;
 8008850:	e005      	b.n	800885e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008852:	2302      	movs	r3, #2
 8008854:	73fb      	strb	r3, [r7, #15]
    break;
 8008856:	e002      	b.n	800885e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008858:	2302      	movs	r3, #2
 800885a:	73fb      	strb	r3, [r7, #15]
    break;
 800885c:	bf00      	nop
  }
  return usb_status;
 800885e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008860:	4618      	mov	r0, r3
 8008862:	3714      	adds	r7, #20
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	4603      	mov	r3, r0
 8008874:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008876:	79fb      	ldrb	r3, [r7, #7]
 8008878:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800887a:	79fb      	ldrb	r3, [r7, #7]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d102      	bne.n	8008886 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008880:	2300      	movs	r3, #0
 8008882:	73fb      	strb	r3, [r7, #15]
 8008884:	e001      	b.n	800888a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008886:	2301      	movs	r3, #1
 8008888:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800888a:	7bfb      	ldrb	r3, [r7, #15]
 800888c:	461a      	mov	r2, r3
 800888e:	2101      	movs	r1, #1
 8008890:	4803      	ldr	r0, [pc, #12]	; (80088a0 <MX_DriverVbusFS+0x34>)
 8008892:	f7f8 ff89 	bl	80017a8 <HAL_GPIO_WritePin>
}
 8008896:	bf00      	nop
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	40020800 	.word	0x40020800

080088a4 <malloc>:
 80088a4:	4b02      	ldr	r3, [pc, #8]	; (80088b0 <malloc+0xc>)
 80088a6:	4601      	mov	r1, r0
 80088a8:	6818      	ldr	r0, [r3, #0]
 80088aa:	f000 b82b 	b.w	8008904 <_malloc_r>
 80088ae:	bf00      	nop
 80088b0:	20000084 	.word	0x20000084

080088b4 <free>:
 80088b4:	4b02      	ldr	r3, [pc, #8]	; (80088c0 <free+0xc>)
 80088b6:	4601      	mov	r1, r0
 80088b8:	6818      	ldr	r0, [r3, #0]
 80088ba:	f000 b8f3 	b.w	8008aa4 <_free_r>
 80088be:	bf00      	nop
 80088c0:	20000084 	.word	0x20000084

080088c4 <sbrk_aligned>:
 80088c4:	b570      	push	{r4, r5, r6, lr}
 80088c6:	4e0e      	ldr	r6, [pc, #56]	; (8008900 <sbrk_aligned+0x3c>)
 80088c8:	460c      	mov	r4, r1
 80088ca:	6831      	ldr	r1, [r6, #0]
 80088cc:	4605      	mov	r5, r0
 80088ce:	b911      	cbnz	r1, 80088d6 <sbrk_aligned+0x12>
 80088d0:	f000 f8ac 	bl	8008a2c <_sbrk_r>
 80088d4:	6030      	str	r0, [r6, #0]
 80088d6:	4621      	mov	r1, r4
 80088d8:	4628      	mov	r0, r5
 80088da:	f000 f8a7 	bl	8008a2c <_sbrk_r>
 80088de:	1c43      	adds	r3, r0, #1
 80088e0:	d00a      	beq.n	80088f8 <sbrk_aligned+0x34>
 80088e2:	1cc4      	adds	r4, r0, #3
 80088e4:	f024 0403 	bic.w	r4, r4, #3
 80088e8:	42a0      	cmp	r0, r4
 80088ea:	d007      	beq.n	80088fc <sbrk_aligned+0x38>
 80088ec:	1a21      	subs	r1, r4, r0
 80088ee:	4628      	mov	r0, r5
 80088f0:	f000 f89c 	bl	8008a2c <_sbrk_r>
 80088f4:	3001      	adds	r0, #1
 80088f6:	d101      	bne.n	80088fc <sbrk_aligned+0x38>
 80088f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80088fc:	4620      	mov	r0, r4
 80088fe:	bd70      	pop	{r4, r5, r6, pc}
 8008900:	200008d8 	.word	0x200008d8

08008904 <_malloc_r>:
 8008904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008908:	1ccd      	adds	r5, r1, #3
 800890a:	f025 0503 	bic.w	r5, r5, #3
 800890e:	3508      	adds	r5, #8
 8008910:	2d0c      	cmp	r5, #12
 8008912:	bf38      	it	cc
 8008914:	250c      	movcc	r5, #12
 8008916:	2d00      	cmp	r5, #0
 8008918:	4607      	mov	r7, r0
 800891a:	db01      	blt.n	8008920 <_malloc_r+0x1c>
 800891c:	42a9      	cmp	r1, r5
 800891e:	d905      	bls.n	800892c <_malloc_r+0x28>
 8008920:	230c      	movs	r3, #12
 8008922:	603b      	str	r3, [r7, #0]
 8008924:	2600      	movs	r6, #0
 8008926:	4630      	mov	r0, r6
 8008928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800892c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008a00 <_malloc_r+0xfc>
 8008930:	f000 f868 	bl	8008a04 <__malloc_lock>
 8008934:	f8d8 3000 	ldr.w	r3, [r8]
 8008938:	461c      	mov	r4, r3
 800893a:	bb5c      	cbnz	r4, 8008994 <_malloc_r+0x90>
 800893c:	4629      	mov	r1, r5
 800893e:	4638      	mov	r0, r7
 8008940:	f7ff ffc0 	bl	80088c4 <sbrk_aligned>
 8008944:	1c43      	adds	r3, r0, #1
 8008946:	4604      	mov	r4, r0
 8008948:	d155      	bne.n	80089f6 <_malloc_r+0xf2>
 800894a:	f8d8 4000 	ldr.w	r4, [r8]
 800894e:	4626      	mov	r6, r4
 8008950:	2e00      	cmp	r6, #0
 8008952:	d145      	bne.n	80089e0 <_malloc_r+0xdc>
 8008954:	2c00      	cmp	r4, #0
 8008956:	d048      	beq.n	80089ea <_malloc_r+0xe6>
 8008958:	6823      	ldr	r3, [r4, #0]
 800895a:	4631      	mov	r1, r6
 800895c:	4638      	mov	r0, r7
 800895e:	eb04 0903 	add.w	r9, r4, r3
 8008962:	f000 f863 	bl	8008a2c <_sbrk_r>
 8008966:	4581      	cmp	r9, r0
 8008968:	d13f      	bne.n	80089ea <_malloc_r+0xe6>
 800896a:	6821      	ldr	r1, [r4, #0]
 800896c:	1a6d      	subs	r5, r5, r1
 800896e:	4629      	mov	r1, r5
 8008970:	4638      	mov	r0, r7
 8008972:	f7ff ffa7 	bl	80088c4 <sbrk_aligned>
 8008976:	3001      	adds	r0, #1
 8008978:	d037      	beq.n	80089ea <_malloc_r+0xe6>
 800897a:	6823      	ldr	r3, [r4, #0]
 800897c:	442b      	add	r3, r5
 800897e:	6023      	str	r3, [r4, #0]
 8008980:	f8d8 3000 	ldr.w	r3, [r8]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d038      	beq.n	80089fa <_malloc_r+0xf6>
 8008988:	685a      	ldr	r2, [r3, #4]
 800898a:	42a2      	cmp	r2, r4
 800898c:	d12b      	bne.n	80089e6 <_malloc_r+0xe2>
 800898e:	2200      	movs	r2, #0
 8008990:	605a      	str	r2, [r3, #4]
 8008992:	e00f      	b.n	80089b4 <_malloc_r+0xb0>
 8008994:	6822      	ldr	r2, [r4, #0]
 8008996:	1b52      	subs	r2, r2, r5
 8008998:	d41f      	bmi.n	80089da <_malloc_r+0xd6>
 800899a:	2a0b      	cmp	r2, #11
 800899c:	d917      	bls.n	80089ce <_malloc_r+0xca>
 800899e:	1961      	adds	r1, r4, r5
 80089a0:	42a3      	cmp	r3, r4
 80089a2:	6025      	str	r5, [r4, #0]
 80089a4:	bf18      	it	ne
 80089a6:	6059      	strne	r1, [r3, #4]
 80089a8:	6863      	ldr	r3, [r4, #4]
 80089aa:	bf08      	it	eq
 80089ac:	f8c8 1000 	streq.w	r1, [r8]
 80089b0:	5162      	str	r2, [r4, r5]
 80089b2:	604b      	str	r3, [r1, #4]
 80089b4:	4638      	mov	r0, r7
 80089b6:	f104 060b 	add.w	r6, r4, #11
 80089ba:	f000 f829 	bl	8008a10 <__malloc_unlock>
 80089be:	f026 0607 	bic.w	r6, r6, #7
 80089c2:	1d23      	adds	r3, r4, #4
 80089c4:	1af2      	subs	r2, r6, r3
 80089c6:	d0ae      	beq.n	8008926 <_malloc_r+0x22>
 80089c8:	1b9b      	subs	r3, r3, r6
 80089ca:	50a3      	str	r3, [r4, r2]
 80089cc:	e7ab      	b.n	8008926 <_malloc_r+0x22>
 80089ce:	42a3      	cmp	r3, r4
 80089d0:	6862      	ldr	r2, [r4, #4]
 80089d2:	d1dd      	bne.n	8008990 <_malloc_r+0x8c>
 80089d4:	f8c8 2000 	str.w	r2, [r8]
 80089d8:	e7ec      	b.n	80089b4 <_malloc_r+0xb0>
 80089da:	4623      	mov	r3, r4
 80089dc:	6864      	ldr	r4, [r4, #4]
 80089de:	e7ac      	b.n	800893a <_malloc_r+0x36>
 80089e0:	4634      	mov	r4, r6
 80089e2:	6876      	ldr	r6, [r6, #4]
 80089e4:	e7b4      	b.n	8008950 <_malloc_r+0x4c>
 80089e6:	4613      	mov	r3, r2
 80089e8:	e7cc      	b.n	8008984 <_malloc_r+0x80>
 80089ea:	230c      	movs	r3, #12
 80089ec:	603b      	str	r3, [r7, #0]
 80089ee:	4638      	mov	r0, r7
 80089f0:	f000 f80e 	bl	8008a10 <__malloc_unlock>
 80089f4:	e797      	b.n	8008926 <_malloc_r+0x22>
 80089f6:	6025      	str	r5, [r4, #0]
 80089f8:	e7dc      	b.n	80089b4 <_malloc_r+0xb0>
 80089fa:	605b      	str	r3, [r3, #4]
 80089fc:	deff      	udf	#255	; 0xff
 80089fe:	bf00      	nop
 8008a00:	200008d4 	.word	0x200008d4

08008a04 <__malloc_lock>:
 8008a04:	4801      	ldr	r0, [pc, #4]	; (8008a0c <__malloc_lock+0x8>)
 8008a06:	f000 b84b 	b.w	8008aa0 <__retarget_lock_acquire_recursive>
 8008a0a:	bf00      	nop
 8008a0c:	20000a14 	.word	0x20000a14

08008a10 <__malloc_unlock>:
 8008a10:	4801      	ldr	r0, [pc, #4]	; (8008a18 <__malloc_unlock+0x8>)
 8008a12:	f000 b846 	b.w	8008aa2 <__retarget_lock_release_recursive>
 8008a16:	bf00      	nop
 8008a18:	20000a14 	.word	0x20000a14

08008a1c <memset>:
 8008a1c:	4402      	add	r2, r0
 8008a1e:	4603      	mov	r3, r0
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d100      	bne.n	8008a26 <memset+0xa>
 8008a24:	4770      	bx	lr
 8008a26:	f803 1b01 	strb.w	r1, [r3], #1
 8008a2a:	e7f9      	b.n	8008a20 <memset+0x4>

08008a2c <_sbrk_r>:
 8008a2c:	b538      	push	{r3, r4, r5, lr}
 8008a2e:	4d06      	ldr	r5, [pc, #24]	; (8008a48 <_sbrk_r+0x1c>)
 8008a30:	2300      	movs	r3, #0
 8008a32:	4604      	mov	r4, r0
 8008a34:	4608      	mov	r0, r1
 8008a36:	602b      	str	r3, [r5, #0]
 8008a38:	f7f8 f9d4 	bl	8000de4 <_sbrk>
 8008a3c:	1c43      	adds	r3, r0, #1
 8008a3e:	d102      	bne.n	8008a46 <_sbrk_r+0x1a>
 8008a40:	682b      	ldr	r3, [r5, #0]
 8008a42:	b103      	cbz	r3, 8008a46 <_sbrk_r+0x1a>
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	bd38      	pop	{r3, r4, r5, pc}
 8008a48:	20000a18 	.word	0x20000a18

08008a4c <__errno>:
 8008a4c:	4b01      	ldr	r3, [pc, #4]	; (8008a54 <__errno+0x8>)
 8008a4e:	6818      	ldr	r0, [r3, #0]
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	20000084 	.word	0x20000084

08008a58 <__libc_init_array>:
 8008a58:	b570      	push	{r4, r5, r6, lr}
 8008a5a:	4d0d      	ldr	r5, [pc, #52]	; (8008a90 <__libc_init_array+0x38>)
 8008a5c:	4c0d      	ldr	r4, [pc, #52]	; (8008a94 <__libc_init_array+0x3c>)
 8008a5e:	1b64      	subs	r4, r4, r5
 8008a60:	10a4      	asrs	r4, r4, #2
 8008a62:	2600      	movs	r6, #0
 8008a64:	42a6      	cmp	r6, r4
 8008a66:	d109      	bne.n	8008a7c <__libc_init_array+0x24>
 8008a68:	4d0b      	ldr	r5, [pc, #44]	; (8008a98 <__libc_init_array+0x40>)
 8008a6a:	4c0c      	ldr	r4, [pc, #48]	; (8008a9c <__libc_init_array+0x44>)
 8008a6c:	f000 f866 	bl	8008b3c <_init>
 8008a70:	1b64      	subs	r4, r4, r5
 8008a72:	10a4      	asrs	r4, r4, #2
 8008a74:	2600      	movs	r6, #0
 8008a76:	42a6      	cmp	r6, r4
 8008a78:	d105      	bne.n	8008a86 <__libc_init_array+0x2e>
 8008a7a:	bd70      	pop	{r4, r5, r6, pc}
 8008a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a80:	4798      	blx	r3
 8008a82:	3601      	adds	r6, #1
 8008a84:	e7ee      	b.n	8008a64 <__libc_init_array+0xc>
 8008a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a8a:	4798      	blx	r3
 8008a8c:	3601      	adds	r6, #1
 8008a8e:	e7f2      	b.n	8008a76 <__libc_init_array+0x1e>
 8008a90:	08008d44 	.word	0x08008d44
 8008a94:	08008d44 	.word	0x08008d44
 8008a98:	08008d44 	.word	0x08008d44
 8008a9c:	08008d48 	.word	0x08008d48

08008aa0 <__retarget_lock_acquire_recursive>:
 8008aa0:	4770      	bx	lr

08008aa2 <__retarget_lock_release_recursive>:
 8008aa2:	4770      	bx	lr

08008aa4 <_free_r>:
 8008aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008aa6:	2900      	cmp	r1, #0
 8008aa8:	d044      	beq.n	8008b34 <_free_r+0x90>
 8008aaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aae:	9001      	str	r0, [sp, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ab6:	bfb8      	it	lt
 8008ab8:	18e4      	addlt	r4, r4, r3
 8008aba:	f7ff ffa3 	bl	8008a04 <__malloc_lock>
 8008abe:	4a1e      	ldr	r2, [pc, #120]	; (8008b38 <_free_r+0x94>)
 8008ac0:	9801      	ldr	r0, [sp, #4]
 8008ac2:	6813      	ldr	r3, [r2, #0]
 8008ac4:	b933      	cbnz	r3, 8008ad4 <_free_r+0x30>
 8008ac6:	6063      	str	r3, [r4, #4]
 8008ac8:	6014      	str	r4, [r2, #0]
 8008aca:	b003      	add	sp, #12
 8008acc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ad0:	f7ff bf9e 	b.w	8008a10 <__malloc_unlock>
 8008ad4:	42a3      	cmp	r3, r4
 8008ad6:	d908      	bls.n	8008aea <_free_r+0x46>
 8008ad8:	6825      	ldr	r5, [r4, #0]
 8008ada:	1961      	adds	r1, r4, r5
 8008adc:	428b      	cmp	r3, r1
 8008ade:	bf01      	itttt	eq
 8008ae0:	6819      	ldreq	r1, [r3, #0]
 8008ae2:	685b      	ldreq	r3, [r3, #4]
 8008ae4:	1949      	addeq	r1, r1, r5
 8008ae6:	6021      	streq	r1, [r4, #0]
 8008ae8:	e7ed      	b.n	8008ac6 <_free_r+0x22>
 8008aea:	461a      	mov	r2, r3
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	b10b      	cbz	r3, 8008af4 <_free_r+0x50>
 8008af0:	42a3      	cmp	r3, r4
 8008af2:	d9fa      	bls.n	8008aea <_free_r+0x46>
 8008af4:	6811      	ldr	r1, [r2, #0]
 8008af6:	1855      	adds	r5, r2, r1
 8008af8:	42a5      	cmp	r5, r4
 8008afa:	d10b      	bne.n	8008b14 <_free_r+0x70>
 8008afc:	6824      	ldr	r4, [r4, #0]
 8008afe:	4421      	add	r1, r4
 8008b00:	1854      	adds	r4, r2, r1
 8008b02:	42a3      	cmp	r3, r4
 8008b04:	6011      	str	r1, [r2, #0]
 8008b06:	d1e0      	bne.n	8008aca <_free_r+0x26>
 8008b08:	681c      	ldr	r4, [r3, #0]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	6053      	str	r3, [r2, #4]
 8008b0e:	440c      	add	r4, r1
 8008b10:	6014      	str	r4, [r2, #0]
 8008b12:	e7da      	b.n	8008aca <_free_r+0x26>
 8008b14:	d902      	bls.n	8008b1c <_free_r+0x78>
 8008b16:	230c      	movs	r3, #12
 8008b18:	6003      	str	r3, [r0, #0]
 8008b1a:	e7d6      	b.n	8008aca <_free_r+0x26>
 8008b1c:	6825      	ldr	r5, [r4, #0]
 8008b1e:	1961      	adds	r1, r4, r5
 8008b20:	428b      	cmp	r3, r1
 8008b22:	bf04      	itt	eq
 8008b24:	6819      	ldreq	r1, [r3, #0]
 8008b26:	685b      	ldreq	r3, [r3, #4]
 8008b28:	6063      	str	r3, [r4, #4]
 8008b2a:	bf04      	itt	eq
 8008b2c:	1949      	addeq	r1, r1, r5
 8008b2e:	6021      	streq	r1, [r4, #0]
 8008b30:	6054      	str	r4, [r2, #4]
 8008b32:	e7ca      	b.n	8008aca <_free_r+0x26>
 8008b34:	b003      	add	sp, #12
 8008b36:	bd30      	pop	{r4, r5, pc}
 8008b38:	200008d4 	.word	0x200008d4

08008b3c <_init>:
 8008b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3e:	bf00      	nop
 8008b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b42:	bc08      	pop	{r3}
 8008b44:	469e      	mov	lr, r3
 8008b46:	4770      	bx	lr

08008b48 <_fini>:
 8008b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4a:	bf00      	nop
 8008b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4e:	bc08      	pop	{r3}
 8008b50:	469e      	mov	lr, r3
 8008b52:	4770      	bx	lr
